{
    "meta": {
        "title": "Computer Science MCQs",
        "description": "Practice questions on History and Generation of Computers.",
        "keywords": "computer science, history, generations, vacuum tubes, transistors"
    },
    "subcategories": [
        {
            "id": "history-gen-computers",
            "title": "History and Generation of Computers",
            "questions": [
                {
                    "q": "Which generation of computers used vacuum tubes?",
                    "options": [
                        "First",
                        "Second",
                        "Third",
                        "Fourth"
                    ],
                    "a": 0,
                    "ex": "First-generation computers (1940s–1950s) used vacuum tubes for processing."
                },
                {
                    "q": "What technology replaced vacuum tubes in the second generation?",
                    "options": [
                        "Transistors",
                        "Integrated Circuits",
                        "Microprocessors",
                        "Quantum Chips"
                    ],
                    "a": 0,
                    "ex": "Transistors (1950s–1960s) were smaller, faster, and more energy-efficient."
                },
                {
                    "q": "ENIAC was primarily designed for:",
                    "options": [
                        "Business applications",
                        "Military calculations",
                        "Personal computing",
                        "Gaming"
                    ],
                    "a": 1,
                    "ex": "ENIAC (1945) was built to calculate artillery trajectories for the U.S. Army."
                },
                {
                    "q": "Which generation introduced integrated circuits (ICs)?",
                    "options": [
                        "First",
                        "Second",
                        "Third",
                        "Fourth"
                    ],
                    "a": 2,
                    "ex": "Third-generation computers (1960s–1970s) used ICs, enabling smaller and faster systems."
                },
                {
                    "q": "UNIVAC was an example of:",
                    "options": [
                        "First-gen",
                        "Second-gen",
                        "Third-gen",
                        "Fourth-gen"
                    ],
                    "a": 0,
                    "ex": "UNIVAC (1951) was a first-gen computer using vacuum tubes."
                },
                {
                    "q": "The microprocessor was introduced in which generation?",
                    "options": [
                        "Second",
                        "Third",
                        "Fourth",
                        "Fifth"
                    ],
                    "a": 2,
                    "ex": "Fourth-gen (1970s–present) uses microprocessors (VLSI technology)."
                },
                {
                    "q": "What was the main limitation of vacuum tubes?",
                    "options": [
                        "High cost",
                        "Large size and heat",
                        "Slow speed",
                        "Limited programming"
                    ],
                    "a": 1,
                    "ex": "Vacuum tubes were bulky, consumed high power, and generated excessive heat."
                },
                {
                    "q": "Which early computer used punched cards for input?",
                    "options": [
                        "ENIAC",
                        "UNIVAC",
                        "Harvard Mark I",
                        "IBM 1401"
                    ],
                    "a": 2,
                    "ex": "Harvard Mark I (1944) used punched paper tape for programming."
                },
                {
                    "q": "The term 'bug' in computing originated from:",
                    "options": [
                        "A moth in Harvard Mark II",
                        "A software error in ENIAC",
                        "A transistor failure",
                        "A punched card misalignment"
                    ],
                    "a": 0,
                    "ex": "A moth caused a hardware fault in Harvard Mark II (1947), coined as the first 'debugging'."
                },
                {
                    "q": "Which generation introduced high-level programming languages like COBOL?",
                    "options": [
                        "First",
                        "Second",
                        "Third",
                        "Fourth"
                    ],
                    "a": 1,
                    "ex": "Second-gen (1950s–1960s) saw languages like COBOL and FORTRAN."
                },
                {
                    "q": "EDSAC was developed in:",
                    "options": [
                        "USA",
                        "UK",
                        "Germany",
                        "Japan"
                    ],
                    "a": 1,
                    "ex": "EDSAC (1949) was the first practical stored-program computer, built in the UK."
                },
                {
                    "q": "The IBM 360 series belonged to which generation?",
                    "options": [
                        "First",
                        "Second",
                        "Third",
                        "Fourth"
                    ],
                    "a": 2,
                    "ex": "IBM 360 (1964) was a third-gen system using ICs."
                },
                {
                    "q": "What characterized fifth-generation computers?",
                    "options": [
                        "Vacuum tubes",
                        "AI and parallel processing",
                        "Microprocessors",
                        "Transistors"
                    ],
                    "a": 1,
                    "ex": "Fifth-gen (1980s–present) focuses on AI, ULSI, and quantum computing."
                },
                {
                    "q": "Who is considered the 'father of the computer'?",
                    "options": [
                        "Alan Turing",
                        "Charles Babbage",
                        "John von Neumann",
                        "Grace Hopper"
                    ],
                    "a": 1,
                    "ex": "Babbage designed the Analytical Engine (1837), a precursor to modern computers."
                },
                {
                    "q": "The von Neumann architecture is based on:",
                    "options": [
                        "Separate storage for data/instructions",
                        "Stored-program concept",
                        "Analog calculations",
                        "Mechanical parts"
                    ],
                    "a": 1,
                    "ex": "Von Neumann's design (1945) stored both data and instructions in memory."
                },
                {
                    "q": "Which first-gen computer was binary-based?",
                    "options": [
                        "ENIAC",
                        "UNIVAC",
                        "Z3",
                        "Harvard Mark I"
                    ],
                    "a": 2,
                    "ex": "Konrad Zuse's Z3 (1941) was the first binary programmable computer."
                },
                {
                    "q": "The first electronic general-purpose computer was:",
                    "options": [
                        "ABC",
                        "ENIAC",
                        "Colossus",
                        "UNIVAC"
                    ],
                    "a": 1,
                    "ex": "ENIAC (1945) was the first Turing-complete electronic computer."
                },
                {
                    "q": "What was the primary storage in first-gen computers?",
                    "options": [
                        "Magnetic core",
                        "Punched cards",
                        "Hard disks",
                        "SSDs"
                    ],
                    "a": 1,
                    "ex": "Punched cards and paper tape were used for input/output and storage."
                },
                {
                    "q": "Which company dominated the second-gen computer market?",
                    "options": [
                        "IBM",
                        "Microsoft",
                        "Apple",
                        "Intel"
                    ],
                    "a": 0,
                    "ex": "IBM's 7000 series (e.g., 7090) were iconic second-gen systems."
                },
                {
                    "q": "The Apple I (1976) belonged to which generation?",
                    "options": [
                        "Second",
                        "Third",
                        "Fourth",
                        "Fifth"
                    ],
                    "a": 2,
                    "ex": "Apple I used a microprocessor (MOS 6502), making it fourth-gen."
                },
                {
                    "q": "What innovation defined third-gen computers?",
                    "options": [
                        "Operating systems",
                        "Time-sharing",
                        "Both A and B",
                        "None"
                    ],
                    "a": 2,
                    "ex": "Third-gen introduced OSes (e.g., UNIX) and time-sharing for multitasking."
                },
                {
                    "q": "Which early computer was used for code-breaking in WWII?",
                    "options": [
                        "ENIAC",
                        "Colossus",
                        "UNIVAC",
                        "Harvard Mark I"
                    ],
                    "a": 1,
                    "ex": "Colossus (1943) decrypted German messages at Bletchley Park."
                },
                {
                    "q": "The Cray-1 supercomputer was:",
                    "options": [
                        "First-gen",
                        "Second-gen",
                        "Third-gen",
                        "Fourth-gen"
                    ],
                    "a": 3,
                    "ex": "Cray-1 (1976) was a fourth-gen vector-processing supercomputer."
                },
                {
                    "q": "What replaced magnetic core memory in fourth-gen computers?",
                    "options": [
                        "SSDs",
                        "Semiconductor RAM",
                        "Punched cards",
                        "Vacuum tubes"
                    ],
                    "a": 1,
                    "ex": "Semiconductor RAM (DRAM/SRAM) became standard in the 1970s."
                },
                {
                    "q": "Which generation saw the rise of personal computers?",
                    "options": [
                        "Second",
                        "Third",
                        "Fourth",
                        "Fifth"
                    ],
                    "a": 2,
                    "ex": "Fourth-gen (1970s–1980s) brought PCs like Apple II and IBM PC."
                }
            ]
        },
        {
            "id": "types-of-computers",
            "title": "Types of Computers",
            "questions": [
                {
                    "q": "Which type of computer is designed for a single user?",
                    "options": [
                        "Mainframe",
                        "Supercomputer",
                        "Personal Computer",
                        "Server"
                    ],
                    "a": 2,
                    "ex": "Personal Computers (PCs) are designed for individual use."
                },
                {
                    "q": "What is the primary purpose of a supercomputer?",
                    "options": [
                        "Business applications",
                        "Scientific research",
                        "Personal gaming",
                        "Word processing"
                    ],
                    "a": 1,
                    "ex": "Supercomputers are used for complex calculations in scientific and engineering fields."
                },
                {
                    "q": "Which of these is an example of a mainframe computer?",
                    "options": [
                        "IBM zSeries",
                        "Apple MacBook",
                        "Raspberry Pi",
                        "PlayStation"
                    ],
                    "a": 0,
                    "ex": "IBM zSeries are powerful mainframes used for critical enterprise applications."
                },
                {
                    "q": "Embedded computers are commonly found in:",
                    "options": [
                        "ATMs",
                        "Laptops",
                        "Tablets",
                        "Desktop PCs"
                    ],
                    "a": 0,
                    "ex": "Embedded systems are specialized computers built into larger systems like ATMs or traffic lights."
                },
                {
                    "q": "What distinguishes a workstation from a regular PC?",
                    "options": [
                        "Lower cost",
                        "Higher performance",
                        "Smaller size",
                        "No internet connectivity"
                    ],
                    "a": 1,
                    "ex": "Workstations offer superior performance for specialized tasks like 3D rendering."
                },
                {
                    "q": "Which type of computer is designed to provide services to other computers?",
                    "options": [
                        "Personal Computer",
                        "Server",
                        "Embedded System",
                        "Laptop"
                    ],
                    "a": 1,
                    "ex": "Servers provide shared resources or services to client computers."
                },
                {
                    "q": "Quantum computers differ from classical computers by using:",
                    "options": [
                        "Transistors",
                        "Vacuum tubes",
                        "Qubits",
                        "Integrated circuits"
                    ],
                    "a": 2,
                    "ex": "Quantum computers use quantum bits (qubits) that can exist in superposition states."
                },
                {
                    "q": "Which computer type would be most suitable for weather forecasting?",
                    "options": [
                        "Personal Computer",
                        "Tablet",
                        "Supercomputer",
                        "Smartphone"
                    ],
                    "a": 2,
                    "ex": "Supercomputers can process massive datasets required for weather modeling."
                },
                {
                    "q": "What is a characteristic of a minicomputer?",
                    "options": [
                        "Single-user system",
                        "Fits in the palm of your hand",
                        "Mid-range computing power",
                        "Uses vacuum tubes"
                    ],
                    "a": 2,
                    "ex": "Minicomputers are mid-sized systems between mainframes and microcomputers."
                },
                {
                    "q": "Which of these is NOT a portable computer?",
                    "options": [
                        "Laptop",
                        "Tablet",
                        "Mainframe",
                        "Smartphone"
                    ],
                    "a": 2,
                    "ex": "Mainframes are large, non-portable systems designed for enterprise use."
                },
                {
                    "q": "What type of computer would a bank most likely use for transaction processing?",
                    "options": [
                        "Mainframe",
                        "Game console",
                        "Smartwatch",
                        "Calculator"
                    ],
                    "a": 0,
                    "ex": "Mainframes handle high-volume transaction processing for banks."
                },
                {
                    "q": "Which computer type is designed to be worn on the body?",
                    "options": [
                        "Desktop",
                        "Wearable computer",
                        "Server",
                        "Supercomputer"
                    ],
                    "a": 1,
                    "ex": "Wearable computers like smartwatches are designed for personal use on the body."
                },
                {
                    "q": "What is the primary advantage of a thin client?",
                    "options": [
                        "High processing power",
                        "Low cost and maintenance",
                        "Large storage capacity",
                        "Independent operation"
                    ],
                    "a": 1,
                    "ex": "Thin clients rely on servers for processing, reducing local hardware requirements."
                },
                {
                    "q": "Which type of computer is most suitable for airline reservation systems?",
                    "options": [
                        "Mainframe",
                        "PDA",
                        "Calculator",
                        "Game console"
                    ],
                    "a": 0,
                    "ex": "Mainframes handle large-scale, real-time transaction systems like airline reservations."
                },
                {
                    "q": "What distinguishes a microcomputer from other types?",
                    "options": [
                        "Use of vacuum tubes",
                        "Single-chip processor",
                        "Room-sized footprint",
                        "Only used by governments"
                    ],
                    "a": 1,
                    "ex": "Microcomputers are built around a single microprocessor chip."
                },
                {
                    "q": "Which computer type would be used for controlling traffic lights?",
                    "options": [
                        "Embedded system",
                        "Supercomputer",
                        "Mainframe",
                        "Workstation"
                    ],
                    "a": 0,
                    "ex": "Embedded systems are specialized for control applications like traffic management."
                },
                {
                    "q": "What is a characteristic of a server computer?",
                    "options": [
                        "Always portable",
                        "High reliability",
                        "Single-user design",
                        "Low uptime requirements"
                    ],
                    "a": 1,
                    "ex": "Servers are built for high reliability and continuous operation."
                },
                {
                    "q": "Which of these is an example of a handheld computer?",
                    "options": [
                        "Mainframe",
                        "PDA",
                        "Supercomputer",
                        "Desktop"
                    ],
                    "a": 1,
                    "ex": "PDAs (Personal Digital Assistants) are early examples of handheld computers."
                },
                {
                    "q": "What type of computer is specifically designed for playing video games?",
                    "options": [
                        "Mainframe",
                        "Game console",
                        "Server",
                        "Thin client"
                    ],
                    "a": 1,
                    "ex": "Game consoles are optimized for gaming performance and experience."
                },
                {
                    "q": "Which computer type is most likely to use a RISC processor?",
                    "options": [
                        "Mainframe",
                        "Embedded system",
                        "1940s vacuum tube computer",
                        "Abacus"
                    ],
                    "a": 1,
                    "ex": "Embedded systems often use RISC processors for efficiency."
                },
                {
                    "q": "What is the primary use of a blade server?",
                    "options": [
                        "Personal gaming",
                        "Data center operations",
                        "Portable computing",
                        "Analog calculations"
                    ],
                    "a": 1,
                    "ex": "Blade servers are compact systems designed for data center deployment."
                },
                {
                    "q": "Which type of computer would be used for computer-aided design (CAD)?",
                    "options": [
                        "Workstation",
                        "Smartphone",
                        "Calculator",
                        "Game console"
                    ],
                    "a": 0,
                    "ex": "Workstations provide the power needed for CAD applications."
                },
                {
                    "q": "What distinguishes a tablet computer from a laptop?",
                    "options": [
                        "Larger size",
                        "Touchscreen interface",
                        "Higher cost",
                        "More powerful processor"
                    ],
                    "a": 1,
                    "ex": "Tablets primarily use touchscreen interfaces rather than keyboards/mice."
                },
                {
                    "q": "Which computer type is most energy efficient?",
                    "options": [
                        "Supercomputer",
                        "Mainframe",
                        "Embedded system",
                        "1960s mainframe"
                    ],
                    "a": 2,
                    "ex": "Embedded systems are optimized for low power consumption."
                },
                {
                    "q": "What is a common feature of all modern personal computers?",
                    "options": [
                        "Use vacuum tubes",
                        "Microprocessor-based",
                        "Room-sized",
                        "Analog technology"
                    ],
                    "a": 1,
                    "ex": "All modern PCs are built around microprocessor technology."
                }
            ]
        },
        {
            "id": "number-systems",
            "title": "Number Systems (Binary, Octal, Decimal, Hexadecimal)",
            "questions": [
                {
                    "q": "What is the decimal equivalent of binary 1010?",
                    "options": [
                        "8",
                        "10",
                        "12",
                        "14"
                    ],
                    "a": 1,
                    "ex": "1010 in binary is 1×2³ + 0×2² + 1×2¹ + 0×2⁰ = 8 + 0 + 2 + 0 = 10 in decimal."
                },
                {
                    "q": "The hexadecimal number 'F' represents decimal:",
                    "options": [
                        "15",
                        "16",
                        "31",
                        "10"
                    ],
                    "a": 0,
                    "ex": "In hexadecimal, A=10, B=11, ..., F=15."
                },
                {
                    "q": "Which number system has a base of 8?",
                    "options": [
                        "Binary",
                        "Octal",
                        "Decimal",
                        "Hexadecimal"
                    ],
                    "a": 1,
                    "ex": "Octal system uses base-8 (digits 0-7)."
                },
                {
                    "q": "What is the binary equivalent of decimal 15?",
                    "options": [
                        "1110",
                        "1111",
                        "1010",
                        "1100"
                    ],
                    "a": 1,
                    "ex": "15 in decimal is 8 + 4 + 2 + 1 = 1111 in binary."
                },
                {
                    "q": "How many bits are needed to represent decimal 32?",
                    "options": [
                        "4",
                        "5",
                        "6",
                        "7"
                    ],
                    "a": 1,
                    "ex": "2⁵ = 32, so 5 bits are needed (100000 in binary)."
                },
                {
                    "q": "The octal number 17 represents decimal:",
                    "options": [
                        "15",
                        "17",
                        "13",
                        "21"
                    ],
                    "a": 0,
                    "ex": "Octal 17 = 1×8¹ + 7×8⁰ = 8 + 7 = 15 in decimal."
                },
                {
                    "q": "Which of these is NOT a valid hexadecimal digit?",
                    "options": [
                        "A",
                        "F",
                        "G",
                        "9"
                    ],
                    "a": 2,
                    "ex": "Hexadecimal uses 0-9 and A-F (where G is invalid)."
                },
                {
                    "q": "What is 1101 in binary minus 101 in binary?",
                    "options": [
                        "100",
                        "1000",
                        "1010",
                        "111"
                    ],
                    "a": 1,
                    "ex": "1101 (13) - 101 (5) = 1000 (8) in binary."
                },
                {
                    "q": "The two's complement representation is used for:",
                    "options": [
                        "Fractional numbers",
                        "Negative numbers",
                        "Hexadecimal conversion",
                        "Octal arithmetic"
                    ],
                    "a": 1,
                    "ex": "Two's complement is a method to represent signed (positive/negative) numbers."
                },
                {
                    "q": "What is the hexadecimal equivalent of binary 11001100?",
                    "options": [
                        "CC",
                        "FF",
                        "12",
                        "3C"
                    ],
                    "a": 0,
                    "ex": "11001100 = CC in hex (split as 1100=C and 1100=C)."
                },
                {
                    "q": "Which number system is most commonly used in digital circuits?",
                    "options": [
                        "Decimal",
                        "Binary",
                        "Octal",
                        "Hexadecimal"
                    ],
                    "a": 1,
                    "ex": "Binary (base-2) directly represents on/off states in electronics."
                },
                {
                    "q": "The BCD (Binary Coded Decimal) representation of decimal 9 is:",
                    "options": [
                        "1000",
                        "1001",
                        "1010",
                        "1100"
                    ],
                    "a": 1,
                    "ex": "BCD encodes each decimal digit separately (9 = 1001)."
                },
                {
                    "q": "What is the result of binary 101 AND 011?",
                    "options": [
                        "001",
                        "111",
                        "101",
                        "011"
                    ],
                    "a": 0,
                    "ex": "Bitwise AND: 1∧0=0, 0∧1=0, 1∧1=1 → 001."
                },
                {
                    "q": "The largest 4-bit binary number is:",
                    "options": [
                        "1111",
                        "1000",
                        "1010",
                        "0000"
                    ],
                    "a": 0,
                    "ex": "1111 in binary equals 15 in decimal (the maximum 4-bit value)."
                },
                {
                    "q": "What is the octal equivalent of hexadecimal 'A'?",
                    "options": [
                        "10",
                        "12",
                        "15",
                        "20"
                    ],
                    "a": 1,
                    "ex": "Hex A (decimal 10) = Octal 12 (1×8¹ + 2×8⁰)."
                },
                {
                    "q": "Which operation is used to convert decimal to binary?",
                    "options": [
                        "Division by 2",
                        "Multiplication by 2",
                        "Subtraction",
                        "Square root"
                    ],
                    "a": 0,
                    "ex": "Repeated division-by-2 with remainders gives binary digits."
                },
                {
                    "q": "The binary number 10101.101 equals decimal:",
                    "options": [
                        "21.625",
                        "20.5",
                        "22.75",
                        "19.375"
                    ],
                    "a": 0,
                    "ex": "10101 = 16+4+1=21, .101 = 0.5+0.125=0.625 → 21.625."
                },
                {
                    "q": "What is the hexadecimal result of 7 + 9?",
                    "options": [
                        "G",
                        "16",
                        "10",
                        "F"
                    ],
                    "a": 2,
                    "ex": "7 + 9 = 16 in decimal, which is '10' in hexadecimal."
                },
                {
                    "q": "Which is the correct binary fraction for decimal 0.75?",
                    "options": [
                        "0.10",
                        "0.01",
                        "0.11",
                        "0.00"
                    ],
                    "a": 2,
                    "ex": "0.75 = 0.5 + 0.25 → 0.11 in binary."
                },
                {
                    "q": "The Gray code is used primarily for:",
                    "options": [
                        "Arithmetic operations",
                        "Error correction",
                        "Minimizing bit transitions",
                        "Data compression"
                    ],
                    "a": 2,
                    "ex": "Gray code ensures only one bit changes between adjacent numbers."
                },
                {
                    "q": "What is the 8-bit two's complement representation of -5?",
                    "options": [
                        "11111010",
                        "11111011",
                        "00000101",
                        "10000101"
                    ],
                    "a": 1,
                    "ex": "+5 = 00000101, invert → 11111010, +1 → 11111011."
                },
                {
                    "q": "The binary subtraction 1010 - 0101 equals:",
                    "options": [
                        "0101",
                        "0111",
                        "1001",
                        "1101"
                    ],
                    "a": 0,
                    "ex": "1010 (10) - 0101 (5) = 0101 (5)."
                },
                {
                    "q": "Which number system uses digits 0-7?",
                    "options": [
                        "Binary",
                        "Octal",
                        "Decimal",
                        "Hexadecimal"
                    ],
                    "a": 1,
                    "ex": "Octal is base-8 (digits 0-7)."
                },
                {
                    "q": "The hexadecimal number '1A3' equals decimal:",
                    "options": [
                        "419",
                        "323",
                        "290",
                        "513"
                    ],
                    "a": 0,
                    "ex": "1A3 = 1×256 + 10×16 + 3×1 = 419."
                },
                {
                    "q": "What is the binary equivalent of octal 45?",
                    "options": [
                        "100101",
                        "101101",
                        "110101",
                        "100111"
                    ],
                    "a": 0,
                    "ex": "Octal 45 → 4=100, 5=101 → 100101."
                },
                {
                    "q": "Which of these represents an even number in binary?",
                    "options": [
                        "1101",
                        "1010",
                        "1111",
                        "1001"
                    ],
                    "a": 1,
                    "ex": "Even numbers end with 0 in binary (1010 = 10 in decimal)."
                },
                {
                    "q": "The 1's complement of binary 1100 is:",
                    "options": [
                        "0011",
                        "1100",
                        "1011",
                        "0100"
                    ],
                    "a": 0,
                    "ex": "1's complement flips all bits (1100 → 0011)."
                },
                {
                    "q": "What is the result of binary 110 XOR 101?",
                    "options": [
                        "011",
                        "111",
                        "100",
                        "010"
                    ],
                    "a": 0,
                    "ex": "Bitwise XOR: 1⊕1=0, 1⊕0=1, 0⊕1=1 → 011."
                },
                {
                    "q": "The hexadecimal system is often used in computing because:",
                    "options": [
                        "It matches decimal exactly",
                        "It's more compact than binary",
                        "It has no arithmetic errors",
                        "It's easier for humans than octal"
                    ],
                    "a": 1,
                    "ex": "Hex (base-16) concisely represents binary (1 hex digit = 4 binary digits)."
                },
                {
                    "q": "What is the decimal value of the binary floating-point 1.1×2³?",
                    "options": [
                        "6",
                        "12",
                        "3.5",
                        "24"
                    ],
                    "a": 1,
                    "ex": "1.1 in binary = 1.5 in decimal. 1.5 × 2³ = 12."
                }
            ]
        },
        {
            "id": "logic-gates-boolean-algebra",
            "title": "Logic Gates and Boolean Algebra",
            "questions": [
                {
                    "q": "Which logic gate outputs 1 only when all inputs are 1?",
                    "options": [
                        "AND",
                        "OR",
                        "NOT",
                        "XOR"
                    ],
                    "a": 0,
                    "ex": "AND gate follows the rule: 1 AND 1 = 1; all other combinations = 0."
                },
                {
                    "q": "The Boolean expression for a NOT gate with input A is:",
                    "options": [
                        "A + B",
                        "A · B",
                        "Ā",
                        "A ⊕ B"
                    ],
                    "a": 2,
                    "ex": "NOT gate inverts the input (Ā represents NOT A)."
                },
                {
                    "q": "What is the output of an XOR gate when both inputs are 1?",
                    "options": [
                        "0",
                        "1",
                        "Undefined",
                        "Same as input"
                    ],
                    "a": 0,
                    "ex": "XOR outputs 1 only when inputs differ (1 XOR 1 = 0)."
                },
                {
                    "q": "Which gate is called the 'universal gate'?",
                    "options": [
                        "AND",
                        "OR",
                        "NAND",
                        "XOR"
                    ],
                    "a": 2,
                    "ex": "NAND (and NOR) gates can construct all other gates."
                },
                {
                    "q": "The Boolean expression A + A.B simplifies to:",
                    "options": [
                        "A",
                        "B",
                        "A.B",
                        "A + B"
                    ],
                    "a": 0,
                    "ex": "By Absorption Law: A + A.B = A(1 + B) = A."
                },
                {
                    "q": "Which gate implements the logical OR operation?",
                    "options": [
                        "AND",
                        "OR",
                        "NAND",
                        "NOR"
                    ],
                    "a": 1,
                    "ex": "OR gate outputs 1 if any input is 1."
                },
                {
                    "q": "The complement of A.B (A AND B) is:",
                    "options": [
                        "Ā + B̄",
                        "Ā · B̄",
                        "A + B",
                        "A ⊕ B"
                    ],
                    "a": 0,
                    "ex": "De Morgan's Law: Complement of A.B = Ā + B̄."
                },
                {
                    "q": "A NOR gate is equivalent to:",
                    "options": [
                        "AND followed by NOT",
                        "OR followed by NOT",
                        "XOR followed by NOT",
                        "NAND followed by NOT"
                    ],
                    "a": 1,
                    "ex": "NOR = NOT OR (OR gate output inverted)."
                },
                {
                    "q": "The Boolean expression for a 2-input NAND gate is:",
                    "options": [
                        "A + B",
                        "A · B",
                        "A ⊕ B",
                        "A · B"
                    ],
                    "a": 3,
                    "ex": "NAND = NOT AND (A · B is inverted)."
                },
                {
                    "q": "Which law states A + Ā = 1?",
                    "options": [
                        "Identity Law",
                        "Complement Law",
                        "Associative Law",
                        "Distributive Law"
                    ],
                    "a": 1,
                    "ex": "Complement Law: A variable OR its complement always equals 1."
                },
                {
                    "q": "The number of possible inputs for a 3-input AND gate is:",
                    "options": [
                        "4",
                        "6",
                        "8",
                        "10"
                    ],
                    "a": 2,
                    "ex": "2³ = 8 possible combinations (000 to 111)."
                },
                {
                    "q": "Which gate is this truth table representing?\nInputs: 00=1, 01=1, 10=1, 11=0",
                    "options": [
                        "AND",
                        "OR",
                        "NAND",
                        "NOR"
                    ],
                    "a": 2,
                    "ex": "NAND outputs 0 only when all inputs are 1."
                },
                {
                    "q": "The dual of the Boolean expression A + B = B + A is:",
                    "options": [
                        "A · B = B · A",
                        "Ā + B̄ = B̄ + Ā",
                        "A ⊕ B = B ⊕ A",
                        "A + B̄ = B̄ + A"
                    ],
                    "a": 0,
                    "ex": "Dual swaps '+' with '.' and 1s with 0s (commutativity holds for both)."
                },
                {
                    "q": "Which gate is used to implement binary addition?",
                    "options": [
                        "AND",
                        "OR",
                        "XOR",
                        "NOT"
                    ],
                    "a": 2,
                    "ex": "XOR computes sum, AND computes carry in half-adders."
                },
                {
                    "q": "The Boolean expression A + Ā.B simplifies to:",
                    "options": [
                        "A",
                        "A + B",
                        "Ā + B",
                        "A.B"
                    ],
                    "a": 1,
                    "ex": "A + Ā.B = (A + Ā)(A + B) = 1.(A + B) = A + B."
                },
                {
                    "q": "Which of these is NOT a valid Boolean algebra law?",
                    "options": [
                        "A + A = A",
                        "A + 1 = 1",
                        "A + B = B + A",
                        "A + B = A · B"
                    ],
                    "a": 3,
                    "ex": "OR (+) and AND (·) are not equivalent operations."
                },
                {
                    "q": "A 2-input XOR gate can be built using:",
                    "options": [
                        "4 NAND gates",
                        "2 AND gates",
                        "1 NOR gate",
                        "3 NOT gates"
                    ],
                    "a": 0,
                    "ex": "XOR = ((A NAND (A NAND B)) NAND ((B NAND (A NAND B)))."
                },
                {
                    "q": "The output of an OR gate with inputs A=0 and B=1 is:",
                    "options": [
                        "0",
                        "1",
                        "Undefined",
                        "Z"
                    ],
                    "a": 1,
                    "ex": "OR outputs 1 if any input is 1 (0 OR 1 = 1)."
                },
                {
                    "q": "Which theorem converts between sum-of-products and product-of-sums?",
                    "options": [
                        "De Morgan's",
                        "Distributive",
                        "Associative",
                        "Commutative"
                    ],
                    "a": 0,
                    "ex": "De Morgan's Theorem: (A+B)' = A'·B' and (A·B)' = A' + B'."
                },
                {
                    "q": "The Boolean expression (A + B)(A + C) simplifies to:",
                    "options": [
                        "A + B.C",
                        "A.B + A.C",
                        "A + B + C",
                        "A.B.C"
                    ],
                    "a": 0,
                    "ex": "By Distributive Law: (A+B)(A+C) = A + B.C."
                },
                {
                    "q": "Which logic family is known for low power consumption?",
                    "options": [
                        "TTL",
                        "CMOS",
                        "ECL",
                        "RTL"
                    ],
                    "a": 1,
                    "ex": "CMOS (Complementary Metal-Oxide-Semiconductor) is power-efficient."
                },
                {
                    "q": "The Boolean expression A ⊕ A is always:",
                    "options": [
                        "A",
                        "Ā",
                        "0",
                        "1"
                    ],
                    "a": 2,
                    "ex": "XOR of a variable with itself is 0 (A ⊕ A = 0)."
                },
                {
                    "q": "Which gate is used to detect odd parity?",
                    "options": [
                        "AND",
                        "OR",
                        "XOR",
                        "NOT"
                    ],
                    "a": 2,
                    "ex": "XOR outputs 1 for odd numbers of 1s (odd parity)."
                },
                {
                    "q": "The Boolean expression A + A.B̄ simplifies to:",
                    "options": [
                        "A",
                        "B",
                        "A + B",
                        "A.B"
                    ],
                    "a": 0,
                    "ex": "A + A.B̄ = A(1 + B̄) = A (since 1 + B̄ = 1)."
                },
                {
                    "q": "Which IC number represents a quad 2-input AND gate?",
                    "options": [
                        "7400",
                        "7402",
                        "7404",
                        "7408"
                    ],
                    "a": 3,
                    "ex": "7408 is a quad 2-input AND gate IC."
                },
                {
                    "q": "The Boolean expression (A + B)' is equivalent to:",
                    "options": [
                        "A' + B'",
                        "A' · B'",
                        "A · B",
                        "A ⊕ B"
                    ],
                    "a": 1,
                    "ex": "De Morgan's Law: (A + B)' = A' · B'."
                },
                {
                    "q": "Which logic gate has an output that is the complement of an AND gate?",
                    "options": [
                        "OR",
                        "NAND",
                        "NOR",
                        "XOR"
                    ],
                    "a": 1,
                    "ex": "NAND = NOT AND."
                },
                {
                    "q": "The Boolean expression A.B + A.B̄ simplifies to:",
                    "options": [
                        "A",
                        "B",
                        "A + B",
                        "0"
                    ],
                    "a": 0,
                    "ex": "A.B + A.B̄ = A(B + B̄) = A(1) = A."
                },
                {
                    "q": "Which gate is used to construct a half-adder?",
                    "options": [
                        "AND + OR",
                        "XOR + AND",
                        "NAND + NOR",
                        "NOT + OR"
                    ],
                    "a": 1,
                    "ex": "Half-adder: XOR for sum, AND for carry."
                },
                {
                    "q": "The Boolean expression A + (A · B) simplifies to:",
                    "options": [
                        "A",
                        "B",
                        "A · B",
                        "A + B"
                    ],
                    "a": 0,
                    "ex": "A + (A · B) = A by Absorption Law."
                }
            ]
        },
        {
            "id": "computer-architecture-organization",
            "title": "Computer Architecture and Organization",
            "questions": [
                {
                    "q": "Which component is considered the 'brain' of the computer?",
                    "options": [
                        "RAM",
                        "Hard Drive",
                        "CPU",
                        "Motherboard"
                    ],
                    "a": 2,
                    "ex": "The Central Processing Unit (CPU) executes instructions and performs calculations."
                },
                {
                    "q": "What does ALU stand for in the context of CPU?",
                    "options": [
                        "Arithmetic Logic Unit",
                        "Array Logic Unit",
                        "Application Logic Unit",
                        "Advanced Logic Unit"
                    ],
                    "a": 0,
                    "ex": "The ALU performs arithmetic and logical operations within the CPU."
                },
                {
                    "q": "The control unit (CU) is responsible for:",
                    "options": [
                        "Storing data permanently",
                        "Executing arithmetic operations",
                        "Directing and coordinating operations of the CPU",
                        "Providing power to components"
                    ],
                    "a": 2,
                    "ex": "The CU fetches, decodes, executes, and stores results of instructions."
                },
                {
                    "q": "Which component connects all parts of the computer and allows them to communicate?",
                    "options": [
                        "CPU",
                        "RAM",
                        "Motherboard",
                        "Power Supply Unit"
                    ],
                    "a": 2,
                    "ex": "The motherboard serves as the central communication backbone."
                },
                {
                    "q": "What is the primary function of the CPU's registers?",
                    "options": [
                        "Long-term data storage",
                        "Temporary storage for data being processed by the CPU",
                        "Connecting to external devices",
                        "Managing network connections"
                    ],
                    "a": 1,
                    "ex": "Registers are small, high-speed storage locations within the CPU used for immediate access to data."
                },
                {
                    "q": "The concept of a 'stored program' computer architecture is often attributed to:",
                    "options": [
                        "Charles Babbage",
                        "Alan Turing",
                        "John von Neumann",
                        "Grace Hopper"
                    ],
                    "a": 2,
                    "ex": "The von Neumann architecture defines computers that store both program instructions and data in the same memory."
                },
                {
                    "q": "Which bus carries the addresses of data or instructions?",
                    "options": [
                        "Data bus",
                        "Control bus",
                        "Address bus",
                        "Power bus"
                    ],
                    "a": 2,
                    "ex": "The address bus specifies the location in memory that the CPU wants to access."
                },
                {
                    "q": "Which bus carries actual data between components?",
                    "options": [
                        "Data bus",
                        "Control bus",
                        "Address bus",
                        "Instruction bus"
                    ],
                    "a": 0,
                    "ex": "The data bus carries the information being transferred (data or instructions)."
                },
                {
                    "q": "The clock speed of a CPU is typically measured in:",
                    "options": [
                        "Bytes",
                        "Hertz (Hz)",
                        "Watts",
                        "Volts"
                    ],
                    "a": 1,
                    "ex": "Clock speed indicates the number of cycles per second, usually in MHz or GHz."
                },
                {
                    "q": "What is the purpose of the Fetch-Decode-Execute cycle?",
                    "options": [
                        "To manage printer operations",
                        "To process instructions in the CPU",
                        "To regulate power supply",
                        "To connect to the internet"
                    ],
                    "a": 1,
                    "ex": "This is the fundamental cycle by which a CPU processes instructions."
                },
                {
                    "q": "What is 'pipelining' in computer architecture?",
                    "options": [
                        "A method for connecting multiple hard drives",
                        "A technique to allow multiple instructions to be processed concurrently",
                        "A type of network cable",
                        "A way to cool the CPU"
                    ],
                    "a": 1,
                    "ex": "Pipelining breaks down instruction execution into stages, allowing multiple instructions to be in different stages of execution simultaneously."
                },
                {
                    "q": "CISC (Complex Instruction Set Computer) and RISC (Reduced Instruction Set Computer) refer to different types of:",
                    "options": [
                        "Memory units",
                        "Input/output devices",
                        "Instruction sets",
                        "Network protocols"
                    ],
                    "a": 2,
                    "ex": "These are two major approaches to designing the instruction set of a CPU."
                },
                {
                    "q": "Which of the following is NOT typically found on a motherboard?",
                    "options": [
                        "CPU socket",
                        "RAM slots",
                        "Expansion slots (PCIe)",
                        "External printer"
                    ],
                    "a": 3,
                    "ex": "An external printer is a peripheral device, not an internal component of the motherboard."
                },
                {
                    "q": "The BIOS (Basic Input/Output System) is typically stored in:",
                    "options": [
                        "RAM",
                        "CPU registers",
                        "ROM",
                        "Hard drive"
                    ],
                    "a": 2,
                    "ex": "BIOS is firmware stored on a ROM chip, essential for booting the computer."
                },
                {
                    "q": "What is the purpose of the Northbridge chipset?",
                    "options": [
                        "Managing USB ports",
                        "Controlling slower peripherals like hard drives",
                        "Connecting the CPU to RAM and the graphics card",
                        "Managing network connectivity"
                    ],
                    "a": 2,
                    "ex": "The Northbridge (or Memory Controller Hub) handles high-speed communication between the CPU, RAM, and PCIe (graphics card)."
                },
                {
                    "q": "What is the purpose of the Southbridge chipset?",
                    "options": [
                        "Connecting the CPU to RAM",
                        "Controlling faster components like the CPU",
                        "Managing slower peripherals like USB, SATA, and audio",
                        "Executing arithmetic operations"
                    ],
                    "a": 2,
                    "ex": "The Southbridge (or I/O Controller Hub) manages slower I/O functions and peripherals."
                },
                {
                    "q": "What is 'multicore processing'?",
                    "options": [
                        "Using multiple hard drives simultaneously",
                        "A single CPU with multiple processing units (cores)",
                        "Running multiple operating systems at once",
                        "Connecting multiple monitors to a computer"
                    ],
                    "a": 1,
                    "ex": "Multicore processors contain two or more independent processing units, or 'cores', on a single chip."
                },
                {
                    "q": "The process of starting up a computer is called:",
                    "options": [
                        "Sleeping",
                        "Shutting down",
                        "Booting",
                        "Hibernating"
                    ],
                    "a": 2,
                    "ex": "Booting refers to the initial set of operations that a computer system performs when electrical power is switched on."
                },
                {
                    "q": "What is the function of the cache memory in a computer system?",
                    "options": [
                        "Permanent storage for all data",
                        "Slow and cheap storage",
                        "High-speed temporary storage for frequently accessed data",
                        "Storing operating system files only"
                    ],
                    "a": 2,
                    "ex": "Cache memory acts as a buffer between the CPU and main memory to speed up data access."
                },
                {
                    "q": "Which of the following is an example of an expansion slot on a motherboard?",
                    "options": [
                        "CPU socket",
                        "RAM slot",
                        "PCIe slot",
                        "SATA port"
                    ],
                    "a": 2,
                    "ex": "PCIe (Peripheral Component Interconnect Express) slots are used for adding expansion cards like graphics cards, sound cards, etc."
                },
                {
                    "q": "The instruction register (IR) in the CPU holds:",
                    "options": [
                        "The address of the next instruction",
                        "The instruction currently being executed",
                        "Data values for calculations",
                        "Results of previous operations"
                    ],
                    "a": 1,
                    "ex": "The IR stores the instruction fetched from memory before it is decoded and executed."
                },
                {
                    "q": "What is the role of the program counter (PC) in the CPU?",
                    "options": [
                        "Stores data from the ALU",
                        "Points to the memory address of the next instruction to be fetched",
                        "Counts the number of programs running",
                        "Stores the current program's name"
                    ],
                    "a": 1,
                    "ex": "The PC keeps track of the execution flow by holding the address of the next instruction."
                },
                {
                    "q": "Virtual memory is a technique that:",
                    "options": [
                        "Uses physical RAM only",
                        "Uses hard disk space as an extension of RAM",
                        "Is only found in supercomputers",
                        "Replaces the need for RAM entirely"
                    ],
                    "a": 1,
                    "ex": "Virtual memory allows a computer to compensate for physical memory shortages by temporarily transferring data from RAM to disk storage."
                },
                {
                    "q": "What is the primary function of a power supply unit (PSU)?",
                    "options": [
                        "To store data permanently",
                        "To convert AC power from the wall outlet to DC power for components",
                        "To process graphics",
                        "To connect to external peripherals"
                    ],
                    "a": 1,
                    "ex": "The PSU provides stable DC power at various voltages required by different computer components."
                },
                {
                    "q": "In a von Neumann architecture, which of the following is true?",
                    "options": [
                        "Instructions and data are stored in separate memories.",
                        "Instructions and data share the same memory space.",
                        "Only instructions are stored in memory.",
                        "Only data is stored in memory."
                    ],
                    "a": 1,
                    "ex": "This is a defining characteristic of the von Neumann architecture, leading to the 'von Neumann bottleneck'."
                },
                {
                    "q": "What is the purpose of 'overclocking' a CPU?",
                    "options": [
                        "To reduce its power consumption",
                        "To make it run slower for better stability",
                        "To increase its clock speed beyond manufacturer's specifications",
                        "To improve its cooling efficiency"
                    ],
                    "a": 2,
                    "ex": "Overclocking aims to gain higher performance at the risk of instability and increased heat."
                },
                {
                    "q": "What is the main role of the graphics processing unit (GPU)?",
                    "options": [
                        "Managing network connections",
                        "Handling complex mathematical calculations for general computing",
                        "Accelerating image and video rendering",
                        "Storing long-term data"
                    ],
                    "a": 2,
                    "ex": "GPUs are specialized processors optimized for parallel processing, making them ideal for graphics and parallelizable computations."
                },
                {
                    "q": "Which type of memory is directly accessible by the CPU and used for active data and instructions?",
                    "options": [
                        "Hard disk drive",
                        "Solid State Drive (SSD)",
                        "RAM",
                        "ROM"
                    ],
                    "a": 2,
                    "ex": "RAM (Random Access Memory) is the primary working memory for the CPU."
                },
                {
                    "q": "What is the function of a 'heat sink' in a computer?",
                    "options": [
                        "To generate heat for components",
                        "To radiate heat away from components like the CPU",
                        "To store electricity",
                        "To amplify audio signals"
                    ],
                    "a": 1,
                    "ex": "Heat sinks, often with fans, are crucial for dissipating heat generated by high-performance components."
                },
                {
                    "q": "The concept of 'parallel processing' in computer architecture means:",
                    "options": [
                        "Executing one instruction at a time very quickly.",
                        "Executing multiple instructions or parts of instructions simultaneously.",
                        "Only processing data in a sequential manner.",
                        "Using only one CPU core."
                    ],
                    "a": 1,
                    "ex": "Parallel processing involves using multiple processing units or cores to perform computations concurrently."
                }
            ]
        },
        {
            "id": "memory-units",
            "title": "Memory Units (RAM, ROM, Cache, etc.)",
            "questions": [
                {
                    "q": "Which type of memory is volatile, meaning its contents are lost when the power is turned off?",
                    "options": [
                        "ROM",
                        "Hard Drive",
                        "RAM",
                        "Flash Memory"
                    ],
                    "a": 2,
                    "ex": "RAM (Random Access Memory) requires power to maintain the stored information."
                },
                {
                    "q": "What does ROM stand for?",
                    "options": [
                        "Random Only Memory",
                        "Read Only Memory",
                        "Running Output Module",
                        "Real-time Operating Memory"
                    ],
                    "a": 1,
                    "ex": "ROM (Read Only Memory) is non-volatile and typically contains firmware that cannot be easily modified."
                },
                {
                    "q": "Which memory type is the fastest and closest to the CPU?",
                    "options": [
                        "Hard Drive",
                        "RAM",
                        "Cache Memory",
                        "Solid State Drive"
                    ],
                    "a": 2,
                    "ex": "Cache memory (L1, L2, L3) is extremely fast and serves as a buffer between the CPU and main memory."
                },
                {
                    "q": "What is the primary function of RAM?",
                    "options": [
                        "To store the operating system permanently",
                        "To provide long-term storage for user files",
                        "To temporarily store data and instructions that the CPU is actively using",
                        "To boot up the computer"
                    ],
                    "a": 2,
                    "ex": "RAM is the working memory of the computer, holding programs and data currently in use."
                },
                {
                    "q": "Which type of ROM can be erased and reprogrammed using ultraviolet light?",
                    "options": [
                        "PROM",
                        "EPROM",
                        "EEPROM",
                        "Flash Memory"
                    ],
                    "a": 1,
                    "ex": "EPROM (Erasable Programmable Read-Only Memory) uses UV light for erasure."
                },
                {
                    "q": "What is the difference between SRAM and DRAM?",
                    "options": [
                        "SRAM is slower and cheaper than DRAM.",
                        "DRAM is faster and more expensive than SRAM.",
                        "SRAM uses capacitors and needs refreshing, while DRAM uses latches and does not.",
                        "SRAM uses latches and does not need refreshing, while DRAM uses capacitors and needs refreshing."
                    ],
                    "a": 3,
                    "ex": "SRAM (Static RAM) is faster and more expensive, used for cache. DRAM (Dynamic RAM) is slower, cheaper, and used for main memory."
                },
                {
                    "q": "Which type of memory is non-volatile and can be electrically erased and reprogrammed?",
                    "options": [
                        "SRAM",
                        "DRAM",
                        "EEPROM",
                        "PROM"
                    ],
                    "a": 2,
                    "ex": "EEPROM (Electrically Erasable Programmable Read-Only Memory) allows for electrical erasure and reprogramming."
                },
                {
                    "q": "Flash memory is a type of:",
                    "options": [
                        "Volatile RAM",
                        "Non-volatile ROM",
                        "Cache memory",
                        "Magnetic storage"
                    ],
                    "a": 1,
                    "ex": "Flash memory is a non-volatile computer memory that can be electrically erased and reprogrammed, commonly used in USB drives and SSDs."
                },
                {
                    "q": "What is 'virtual memory'?",
                    "options": [
                        "A type of fast RAM",
                        "Memory stored in the cloud",
                        "Using a portion of the hard drive as an extension of RAM",
                        "Memory that is physically located in the CPU"
                    ],
                    "a": 2,
                    "ex": "Virtual memory allows programs to address more memory than is physically installed, using disk space as an overflow."
                },
                {
                    "q": "The BIOS is typically stored in which type of memory?",
                    "options": [
                        "RAM",
                        "Cache",
                        "ROM (specifically Flash ROM/EEPROM)",
                        "Hard Drive"
                    ],
                    "a": 2,
                    "ex": "The BIOS is firmware, requiring non-volatile storage provided by ROM or Flash ROM."
                },
                {
                    "q": "What happens when a computer runs out of physical RAM?",
                    "options": [
                        "It crashes immediately.",
                        "It automatically buys more RAM online.",
                        "It starts using virtual memory (swapping data to disk).",
                        "It speeds up its processing."
                    ],
                    "a": 2,
                    "ex": "When physical RAM is full, the operating system uses virtual memory to swap less used data to secondary storage."
                },
                {
                    "q": "Which memory level is the smallest but fastest, often integrated directly into the CPU?",
                    "options": [
                        "L3 Cache",
                        "L2 Cache",
                        "L1 Cache",
                        "RAM"
                    ],
                    "a": 2,
                    "ex": "L1 cache is the fastest and smallest, providing immediate access to data for the CPU."
                },
                {
                    "q": "What is the primary advantage of SSDs (Solid State Drives) over traditional HDDs (Hard Disk Drives)?",
                    "options": [
                        "Lower cost per gigabyte",
                        "Higher storage capacity",
                        "Faster read/write speeds and no moving parts",
                        "Easier data recovery"
                    ],
                    "a": 2,
                    "ex": "SSDs use flash memory, providing significantly faster performance and greater durability."
                },
                {
                    "q": "Which memory technology stores data by trapping electrons in a floating gate?",
                    "options": [
                        "DRAM",
                        "SRAM",
                        "Magnetic Core Memory",
                        "Flash Memory"
                    ],
                    "a": 3,
                    "ex": "This is the fundamental principle behind how flash memory retains data without power."
                },
                {
                    "q": "What does RAM's 'random access' mean?",
                    "options": [
                        "Data is stored randomly.",
                        "Any memory location can be accessed directly in the same amount of time.",
                        "Data can only be accessed sequentially.",
                        "It can only store random numbers."
                    ],
                    "a": 1,
                    "ex": "Unlike sequential access memory (e.g., tape drives), any byte of RAM can be accessed as quickly as any other byte."
                },
                {
                    "q": "Which type of memory is considered main memory?",
                    "options": [
                        "Cache",
                        "Registers",
                        "RAM",
                        "Hard Drive"
                    ],
                    "a": 2,
                    "ex": "RAM is the primary or main memory of a computer system."
                },
                {
                    "q": "A 'page file' or 'swap file' is associated with which memory concept?",
                    "options": [
                        "ROM",
                        "Cache memory",
                        "Virtual memory",
                        "Flash memory"
                    ],
                    "a": 2,
                    "ex": "These terms refer to the space on the hard drive used by the operating system for virtual memory."
                },
                {
                    "q": "What is the function of a 'memory controller'?",
                    "options": [
                        "To store data permanently",
                        "To manage the flow of data to and from RAM",
                        "To execute CPU instructions",
                        "To generate random numbers"
                    ],
                    "a": 1,
                    "ex": "The memory controller is responsible for handling all requests to RAM."
                },
                {
                    "q": "Which type of memory is typically used for firmware in embedded systems?",
                    "options": [
                        "DRAM",
                        "SRAM",
                        "Flash Memory",
                        "Hard Disk Drive"
                    ],
                    "a": 2,
                    "ex": "Flash memory's non-volatility and reprogrammability make it ideal for embedded system firmware."
                },
                {
                    "q": "If a computer has 8GB of RAM, what does 'GB' stand for?",
                    "options": [
                        "Gigabits",
                        "Gigabytes",
                        "Global Bytes",
                        "General Bits"
                    ],
                    "a": 1,
                    "ex": "GB stands for Gigabytes, a unit of digital information storage."
                },
                {
                    "q": "Why is cache memory used?",
                    "options": [
                        "To make the computer cheaper",
                        "To provide more permanent storage",
                        "To reduce the speed gap between the CPU and main memory",
                        "To allow for offline data access"
                    ],
                    "a": 2,
                    "ex": "Cache memory bridges the speed difference between the very fast CPU and slower main memory."
                },
                {
                    "q": "Which of these memory units has the fastest access time?",
                    "options": [
                        "L2 Cache",
                        "L3 Cache",
                        "RAM",
                        "CPU Registers"
                    ],
                    "a": 3,
                    "ex": "CPU registers are the fastest memory locations within the CPU itself."
                },
                {
                    "q": "What does the term 'non-volatile' mean in relation to memory?",
                    "options": [
                        "It can be easily overwritten.",
                        "It retains its data even when power is removed.",
                        "It is only used for temporary storage.",
                        "It is difficult to access."
                    ],
                    "a": 1,
                    "ex": "Non-volatile memory persists its data without continuous power."
                },
                {
                    "q": "Which form of memory is commonly found in USB flash drives?",
                    "options": [
                        "DRAM",
                        "SRAM",
                        "Magnetic tape",
                        "Flash Memory"
                    ],
                    "a": 3,
                    "ex": "USB drives are a prime example of devices using flash memory."
                },
                {
                    "q": "The storage capacity of a hard disk drive (HDD) is typically measured in:",
                    "options": [
                        "Megabits",
                        "Gigabytes or Terabytes",
                        "Kilobytes",
                        "Hertz"
                    ],
                    "a": 1,
                    "ex": "HDDs store large amounts of data, usually in the range of gigabytes to terabytes."
                },
                {
                    "q": "What is 'memory interleaving'?",
                    "options": [
                        "A method to encrypt memory data.",
                        "A technique to divide memory into banks that can be accessed independently.",
                        "A type of memory error correction.",
                        "A way to reduce the physical size of memory modules."
                    ],
                    "a": 1,
                    "ex": "Memory interleaving improves performance by allowing simultaneous access to different memory banks."
                },
                {
                    "q": "Which memory technology is used for the very small amount of fast memory on the CPU that stores instructions and data being currently processed?",
                    "options": [
                        "DRAM",
                        "SRAM",
                        "HDD",
                        "Flash"
                    ],
                    "a": 1,
                    "ex": "SRAM is used for cache memory due to its speed."
                },
                {
                    "q": "What is the purpose of a 'memory management unit' (MMU)?",
                    "options": [
                        "To physically store memory chips.",
                        "To translate virtual addresses to physical addresses.",
                        "To control memory manufacturing.",
                        "To provide power to memory modules."
                    ],
                    "a": 1,
                    "ex": "The MMU is a hardware component responsible for memory address translation and protection."
                },
                {
                    "q": "Which memory type stores data using magnetic patterns on spinning platters?",
                    "options": [
                        "SSD",
                        "RAM",
                        "CD-ROM",
                        "HDD"
                    ],
                    "a": 3,
                    "ex": "Hard Disk Drives (HDDs) use magnetic storage technology."
                },
                {
                    "q": "A 'memory stick' or 'USB drive' is an example of a device using which type of memory?",
                    "options": [
                        "DRAM",
                        "Magnetic Tape",
                        "Flash Memory",
                        "ROM"
                    ],
                    "a": 2,
                    "ex": "These portable storage devices rely on flash memory."
                },
                {
                    "q": "What is the main advantage of using DDR (Double Data Rate) RAM over older SDRAM?",
                    "options": [
                        "It is cheaper.",
                        "It consumes less power.",
                        "It transfers data twice per clock cycle.",
                        "It is non-volatile."
                    ],
                    "a": 2,
                    "ex": "DDR RAM significantly increases memory bandwidth by transferring data on both the rising and falling edges of the clock signal."
                }
            ]
        },
        {
            "id": "input-output-devices",
            "title": "Input and Output Devices",
            "questions": [
                {
                    "q": "Which of the following is primarily an **input device**?",
                    "options": [
                        "Monitor",
                        "Printer",
                        "Keyboard",
                        "Speaker"
                    ],
                    "a": 2,
                    "ex": "A keyboard allows users to enter data and commands into a computer."
                },
                {
                    "q": "A device that converts digital information from the computer into a human-readable format is called an **output device**. Which of these fits the description?",
                    "options": [
                        "Mouse",
                        "Scanner",
                        "Webcam",
                        "Projector"
                    ],
                    "a": 3,
                    "ex": "A projector displays images or video onto a screen or other surface for viewing."
                },
                {
                    "q": "Which input device uses a light-sensitive detector to select objects on a display screen?",
                    "options": [
                        "Joystick",
                        "Light Pen",
                        "Touchpad",
                        "Microphone"
                    ],
                    "a": 1,
                    "ex": "A light pen is a pointing device that can detect light from a display screen, allowing direct interaction."
                },
                {
                    "q": "Which output device produces a hard copy of text or graphics?",
                    "options": [
                        "Monitor",
                        "Plotter",
                        "Speaker",
                        "Projector"
                    ],
                    "a": 1,
                    "ex": "A plotter is a specialized printer used to produce high-quality, large-format graphics, such as architectural drawings."
                },
                {
                    "q": "A device that captures images or documents and converts them into digital data is a:",
                    "options": [
                        "Digital Camera",
                        "Printer",
                        "Scanner",
                        "Barcode Reader"
                    ],
                    "a": 2,
                    "ex": "A scanner digitizes physical documents or images."
                },
                {
                    "q": "Which of the following is both an **input and output device**?",
                    "options": [
                        "Keyboard",
                        "Printer",
                        "Touchscreen",
                        "Microphone"
                    ],
                    "a": 2,
                    "ex": "A touchscreen allows input through touch and displays output visually."
                },
                {
                    "q": "DPI (Dots Per Inch) is a common measurement for the resolution of which device?",
                    "options": [
                        "Keyboard",
                        "Mouse",
                        "Speaker",
                        "Printer"
                    ],
                    "a": 3,
                    "ex": "DPI indicates the resolution of a printer or scanner, representing the number of individual dots that can be placed in a line within one inch."
                },
                {
                    "q": "Which input device is commonly used for playing video games?",
                    "options": [
                        "Scanner",
                        "Light Pen",
                        "Joystick",
                        "Graphics Tablet"
                    ],
                    "a": 2,
                    "ex": "A joystick is a common input device for controlling movement in video games."
                },
                {
                    "q": "Optical Character Recognition (OCR) is technology primarily associated with which device?",
                    "options": [
                        "Printer",
                        "Monitor",
                        "Scanner",
                        "Speaker"
                    ],
                    "a": 2,
                    "ex": "OCR software works with scanners to convert images of text into actual editable text."
                },
                {
                    "q": "Which output device generates sound?",
                    "options": [
                        "Microphone",
                        "Webcam",
                        "Speaker",
                        "Plotter"
                    ],
                    "a": 2,
                    "ex": "Speakers convert electrical audio signals into audible sound waves."
                },
                {
                    "q": "What is the primary function of a webcam?",
                    "options": [
                        "To print documents",
                        "To capture still images and video for computer input",
                        "To display images on a screen",
                        "To store data permanently"
                    ],
                    "a": 1,
                    "ex": "A webcam is an input device used for video conferencing and capturing live video."
                },
                {
                    "q": "Which type of printer uses toner to produce images on paper?",
                    "options": [
                        "Inkjet printer",
                        "Dot Matrix printer",
                        "Laser printer",
                        "Thermal printer"
                    ],
                    "a": 2,
                    "ex": "Laser printers use a laser beam to create an image on a drum, which then attracts toner particles to form the print."
                },
                {
                    "q": "A trackball is an alternative to which input device?",
                    "options": [
                        "Keyboard",
                        "Scanner",
                        "Mouse",
                        "Microphone"
                    ],
                    "a": 2,
                    "ex": "A trackball is essentially an upside-down mouse where you move a ball with your thumb, fingers, or palm to control the cursor."
                },
                {
                    "q": "MIDI (Musical Instrument Digital Interface) is a standard used with which input/output device?",
                    "options": [
                        "Scanner",
                        "Graphics Tablet",
                        "Digital Camera",
                        "Musical Keyboard"
                    ],
                    "a": 3,
                    "ex": "MIDI allows electronic musical instruments and computers to communicate and synchronize."
                },
                {
                    "q": "Which display technology uses organic light-emitting diodes for individual pixel illumination?",
                    "options": [
                        "LCD",
                        "CRT",
                        "OLED",
                        "LED"
                    ],
                    "a": 2,
                    "ex": "OLED displays offer superior contrast and true blacks as each pixel generates its own light."
                },
                {
                    "q": "What is the main function of a graphics tablet (digitizer)?",
                    "options": [
                        "To play games",
                        "To create digital drawings and sketches",
                        "To scan documents",
                        "To print photos"
                    ],
                    "a": 1,
                    "ex": "Graphics tablets are used by artists and designers to create digital art with a stylus."
                },
                {
                    "q": "VGA, HDMI, and DisplayPort are types of connectors for which device?",
                    "options": [
                        "Keyboard",
                        "Mouse",
                        "Monitor",
                        "Printer"
                    ],
                    "a": 2,
                    "ex": "These are common video interfaces used to connect displays to computers."
                },
                {
                    "q": "Which input device is typically used for biometric authentication?",
                    "options": [
                        "Touchpad",
                        "Fingerprint Scanner",
                        "Stylus",
                        "Bar code reader"
                    ],
                    "a": 1,
                    "ex": "Fingerprint scanners capture unique biometric data for user verification."
                },
                {
                    "q": "What is the purpose of haptic feedback in input devices?",
                    "options": [
                        "To provide visual cues",
                        "To provide auditory cues",
                        "To provide tactile feedback (vibrations, force feedback)",
                        "To improve network connectivity"
                    ],
                    "a": 2,
                    "ex": "Haptic feedback provides a sense of touch, common in game controllers and touchscreens."
                },
                {
                    "q": "Which output device is essential for virtual reality (VR) experiences?",
                    "options": [
                        "Monitor",
                        "VR Headset",
                        "Projector",
                        "Speaker"
                    ],
                    "a": 1,
                    "ex": "VR headsets provide immersive visual and auditory output for virtual environments."
                },
                {
                    "q": "QR code readers are a type of which category of device?",
                    "options": [
                        "Keyboard",
                        "Pointing device",
                        "Scanner",
                        "Printer"
                    ],
                    "a": 2,
                    "ex": "QR code readers scan and interpret the information encoded in QR codes."
                },
                {
                    "q": "The refresh rate of a monitor is measured in:",
                    "options": [
                        "DPI",
                        "Pixels",
                        "Hertz (Hz)",
                        "Lumens"
                    ],
                    "a": 2,
                    "ex": "Refresh rate (Hz) indicates how many times per second the display updates its image."
                },
                {
                    "q": "What is the primary function of a microphone?",
                    "options": [
                        "To output sound",
                        "To input audio (voice, music) into a computer",
                        "To display video",
                        "To store data"
                    ],
                    "a": 1,
                    "ex": "A microphone converts sound waves into electrical signals for digital processing."
                },
                {
                    "q": "Which of the following is an example of an **audio output device**?",
                    "options": [
                        "Headphones",
                        "Microphone",
                        "Webcam",
                        "Graphics tablet"
                    ],
                    "a": 0,
                    "ex": "Headphones allow users to hear audio output from the computer privately."
                },
                {
                    "q": "What is the primary difference between a 'soft copy' and a 'hard copy' output?",
                    "options": [
                        "Soft copy is digital, hard copy is physical.",
                        "Soft copy is more expensive, hard copy is cheaper.",
                        "Soft copy is permanent, hard copy is temporary.",
                        "There is no difference."
                    ],
                    "a": 0,
                    "ex": "Soft copy is electronic (e.g., on a screen), while hard copy is tangible (e.g., printed on paper)."
                },
                {
                    "q": "A KVM switch is a device that allows a user to control multiple computers with a single set of:",
                    "options": [
                        "Printers",
                        "Monitors",
                        "Keyboard, Video, Mouse",
                        "Scanners"
                    ],
                    "a": 2,
                    "ex": "KVM stands for Keyboard, Video, Mouse, allowing one set of these peripherals to control multiple computers."
                },
                {
                    "q": "Which input device uses a grid of sensors to detect the position of a finger or stylus?",
                    "options": [
                        "Mouse",
                        "Trackball",
                        "Touchpad",
                        "Joystick"
                    ],
                    "a": 2,
                    "ex": "Touchpads are commonly found on laptops and use touch to control the cursor."
                },
                {
                    "q": "What is the maximum resolution of a display typically measured in?",
                    "options": [
                        "DPI",
                        "Pixels",
                        "Refresh Rate",
                        "Color Depth"
                    ],
                    "a": 1,
                    "ex": "Resolution is expressed as the number of horizontal pixels by the number of vertical pixels (e.g., 1920x1080 pixels)."
                },
                {
                    "q": "Which type of printer is best suited for printing receipts or labels quickly and quietly?",
                    "options": [
                        "Laser printer",
                        "Inkjet printer",
                        "Dot Matrix printer",
                        "Thermal printer"
                    ],
                    "a": 3,
                    "ex": "Thermal printers use heat to produce an image, often found in point-of-sale systems."
                },
                {
                    "q": "Voice recognition software works in conjunction with which input device?",
                    "options": [
                        "Speaker",
                        "Microphone",
                        "Webcam",
                        "Headphones"
                    ],
                    "a": 1,
                    "ex": "Microphones capture spoken words, which are then processed by voice recognition software."
                }
            ]
        },
        {
            "id": "functions-of-operating-systems",
            "title": "Functions of Operating Systems",
            "questions": [
                {
                    "q": "What is the primary role of an Operating System (OS)?",
                    "options": [
                        "To run specific applications like Word Processors",
                        "To manage computer hardware and software resources",
                        "To provide internet connectivity",
                        "To protect the computer from viruses"
                    ],
                    "a": 1,
                    "ex": "The OS acts as an intermediary between the user and the computer hardware."
                },
                {
                    "q": "Which function of an OS involves allocating CPU time to different processes?",
                    "options": [
                        "Memory Management",
                        "File Management",
                        "Process Management",
                        "Device Management"
                    ],
                    "a": 2,
                    "ex": "Process management handles the creation, scheduling, and termination of processes."
                },
                {
                    "q": "The OS function that deals with allocating and deallocating memory space for programs is called:",
                    "options": [
                        "CPU Scheduling",
                        "Memory Management",
                        "I/O Management",
                        "Security Management"
                    ],
                    "a": 1,
                    "ex": "Memory management ensures efficient use of the computer's main memory."
                },
                {
                    "q": "What is the purpose of the 'file system' in an operating system?",
                    "options": [
                        "To manage network connections",
                        "To organize and store files and folders on storage devices",
                        "To display graphics on the screen",
                        "To run applications"
                    ],
                    "a": 1,
                    "ex": "The file system provides a logical structure for storing and retrieving data."
                },
                {
                    "q": "Which OS function handles requests from applications for hardware resources (like printer or scanner)?",
                    "options": [
                        "Process Management",
                        "File Management",
                        "Device Management",
                        "User Interface Management"
                    ],
                    "a": 2,
                    "ex": "Device management controls and coordinates the operation of hardware devices."
                },
                {
                    "q": "The user interface (UI) provided by an operating system can be classified into:",
                    "options": [
                        "Graphical User Interface (GUI) and Command Line Interface (CLI)",
                        "Desktop and Mobile",
                        "Server and Client",
                        "Input and Output"
                    ],
                    "a": 0,
                    "ex": "GUI uses visual elements, while CLI uses text commands."
                },
                {
                    "q": "What is 'multitasking' in an operating system?",
                    "options": [
                        "Running only one program at a time",
                        "Allowing a single CPU to appear to run multiple programs simultaneously",
                        "Having multiple users on the same computer",
                        "Connecting to multiple networks"
                    ],
                    "a": 1,
                    "ex": "Multitasking is the ability of an OS to execute multiple tasks (programs) concurrently over a period of time."
                },
                {
                    "q": "Which of the following is NOT a core function of an operating system?",
                    "options": [
                        "Error handling",
                        "Network management",
                        "Application software development",
                        "Resource allocation"
                    ],
                    "a": 2,
                    "ex": "Application software development is done by programmers using development tools, not a core function of the OS itself."
                },
                {
                    "q": "The OS function that ensures system stability and protects different programs from interfering with each other is part of:",
                    "options": [
                        "Security Management",
                        "Error Handling",
                        "Process Synchronization",
                        "All of the above"
                    ],
                    "a": 3,
                    "ex": "These aspects contribute to the overall stability and integrity of the system."
                },
                {
                    "q": "What does a 'kernel' refer to in an operating system?",
                    "options": [
                        "The user interface layer",
                        "The core component that manages system resources and facilitates interaction between hardware and software",
                        "A type of application software",
                        "A peripheral device"
                    ],
                    "a": 1,
                    "ex": "The kernel is the central part of an OS, responsible for managing basic system services."
                },
                {
                    "q": "What is the purpose of 'bootstrapping' in an operating system?",
                    "options": [
                        "To shut down the computer safely",
                        "To load the operating system into memory when the computer starts",
                        "To install new applications",
                        "To connect to the internet"
                    ],
                    "a": 1,
                    "ex": "Bootstrapping is the process by which a computer starts up and loads its operating system."
                },
                {
                    "q": "Which OS function is responsible for ensuring that different processes do not corrupt each other's data?",
                    "options": [
                        "Device Management",
                        "Memory Protection",
                        "File Compression",
                        "User Authentication"
                    ],
                    "a": 1,
                    "ex": "Memory protection mechanisms prevent one process from accessing memory allocated to another."
                },
                {
                    "q": "What is the primary role of the 'shell' in a command-line interface (CLI) OS?",
                    "options": [
                        "To manage hardware devices",
                        "To interpret and execute user commands",
                        "To store files",
                        "To display graphics"
                    ],
                    "a": 1,
                    "ex": "The shell is the command-line interpreter that takes user input and executes corresponding system commands."
                },
                {
                    "q": "When an OS performs 'paging' and 'swapping', it is performing part of its:",
                    "options": [
                        "Process Scheduling",
                        "File Management",
                        "Memory Management",
                        "Device Driver Management"
                    ],
                    "a": 2,
                    "ex": "Paging and swapping are techniques used in virtual memory management to move data between RAM and secondary storage."
                },
                {
                    "q": "What is a 'device driver'?",
                    "options": [
                        "A hardware component of a device",
                        "A type of application software",
                        "A software program that allows the OS to communicate with a specific hardware device",
                        "A utility for cleaning hard drives"
                    ],
                    "a": 2,
                    "ex": "Device drivers are crucial for the OS to interact correctly with peripherals."
                },
                {
                    "q": "Which OS function typically involves creating, deleting, copying, and renaming files and directories?",
                    "options": [
                        "Process Management",
                        "Memory Management",
                        "File Management",
                        "Security Management"
                    ],
                    "a": 2,
                    "ex": "These are common operations within the file system managed by the OS."
                },
                {
                    "q": "The ability of an OS to handle multiple users simultaneously is called:",
                    "options": [
                        "Multitasking",
                        "Multiprocessing",
                        "Multi-user",
                        "Real-time processing"
                    ],
                    "a": 2,
                    "ex": "A multi-user OS allows several users to access the same system resources at the same time."
                },
                {
                    "q": "What is the purpose of the 'scheduler' in an operating system?",
                    "options": [
                        "To schedule meetings for users",
                        "To determine which processes run when and for how long",
                        "To schedule file backups",
                        "To schedule network tasks"
                    ],
                    "a": 1,
                    "ex": "The scheduler is a component of the OS that selects which processes should be moved from the ready queue to the running state."
                },
                {
                    "q": "Which OS function protects system resources from unauthorized access?",
                    "options": [
                        "Process Management",
                        "File Management",
                        "Security Management",
                        "Performance Monitoring"
                    ],
                    "a": 2,
                    "ex": "Security management includes authentication, authorization, and protection against malicious activities."
                },
                {
                    "q": "When an application requests a resource from the OS, this is often handled through:",
                    "options": [
                        "Direct hardware access",
                        "System Calls",
                        "User-level functions",
                        "BIOS interrupts"
                    ],
                    "a": 1,
                    "ex": "System calls provide an interface between a process and the operating system services."
                },
                {
                    "q": "What is 'deadlock' in the context of operating systems?",
                    "options": [
                        "A situation where a program crashes.",
                        "A situation where two or more processes are blocked indefinitely, waiting for each other to release resources.",
                        "A method for speeding up CPU processing.",
                        "A type of virus."
                    ],
                    "a": 1,
                    "ex": "Deadlock is a critical issue in concurrent systems where processes get stuck in a circular waiting pattern."
                },
                {
                    "q": "Which OS function is responsible for keeping track of the status of processes and resources?",
                    "options": [
                        "Performance Monitoring",
                        "Accounting",
                        "Process Management",
                        "All of the above"
                    ],
                    "a": 3,
                    "ex": "The OS continuously monitors and accounts for resource usage and process states."
                },
                {
                    "q": "The ability of an OS to manage multiple CPUs in a single system is called:",
                    "options": [
                        "Multitasking",
                        "Multiprocessing",
                        "Multi-user",
                        "Hyper-threading"
                    ],
                    "a": 1,
                    "ex": "Multiprocessing refers to the use of two or more central processing units (CPUs) within a single computer system."
                },
                {
                    "q": "What is the role of an OS in 'error handling'?",
                    "options": [
                        "To cause system errors.",
                        "To detect and respond to errors, both hardware and software.",
                        "To ignore all errors.",
                        "To only handle application-specific errors."
                    ],
                    "a": 1,
                    "ex": "The OS includes mechanisms to detect, diagnose, and recover from various system errors."
                },
                {
                    "q": "Which of the following is an example of an operating system?",
                    "options": [
                        "Microsoft Word",
                        "Google Chrome",
                        "Windows",
                        "Adobe Photoshop"
                    ],
                    "a": 2,
                    "ex": "Windows is a widely used operating system."
                },
                {
                    "q": "What is the main advantage of a Graphical User Interface (GUI) over a Command Line Interface (CLI)?",
                    "options": [
                        "It requires more memory.",
                        "It is faster for experienced users.",
                        "It is more intuitive and user-friendly for beginners.",
                        "It has fewer features."
                    ],
                    "a": 2,
                    "ex": "GUIs make computers easier to use for a wider audience due to their visual nature."
                },
                {
                    "q": "The concept of 'spooling' (e.g., print spooling) is a feature of which OS function?",
                    "options": [
                        "Memory Management",
                        "File Management",
                        "I/O Management",
                        "Process Management"
                    ],
                    "a": 2,
                    "ex": "Spooling manages the flow of data to slow output devices like printers, allowing the CPU to continue with other tasks."
                },
                {
                    "q": "Which component of the OS handles communication between processes?",
                    "options": [
                        "File System",
                        "Kernel",
                        "Device Drivers",
                        "User Interface"
                    ],
                    "a": 1,
                    "ex": "The kernel provides mechanisms for inter-process communication (IPC)."
                },
                {
                    "q": "What is the purpose of 'system calls'?",
                    "options": [
                        "To allow applications to directly access hardware.",
                        "To provide a structured way for applications to request services from the operating system kernel.",
                        "To bypass OS security.",
                        "To manage network traffic."
                    ],
                    "a": 1,
                    "ex": "System calls are the interface between user-level programs and the operating system."
                },
                {
                    "q": "When a computer is 'booting up', the OS first loads the:",
                    "options": [
                        "Entire OS into RAM",
                        "Bootloader and then the kernel",
                        "All user applications",
                        "Device drivers only"
                    ],
                    "a": 1,
                    "ex": "The bootloader is a small program that loads the main part of the OS (kernel) into memory."
                }
            ]
        },
        {
            "id": "types-of-operating-systems",
            "title": "Types of Operating Systems (Batch, Multitasking, Real-Time)",
            "questions": [
                {
                    "q": "Which type of operating system processes jobs in a queue without direct user interaction?",
                    "options": [
                        "Real-time OS",
                        "Multitasking OS",
                        "Batch OS",
                        "Distributed OS"
                    ],
                    "a": 2,
                    "ex": "Batch operating systems execute similar jobs as a group (batch) without user interaction during processing."
                },
                {
                    "q": "Which operating system allows a single user to run multiple programs concurrently?",
                    "options": [
                        "Single-user, single-tasking OS",
                        "Batch OS",
                        "Single-user, multitasking OS",
                        "Real-time OS"
                    ],
                    "a": 2,
                    "ex": "Operating systems like Windows or macOS are examples of single-user, multitasking systems."
                },
                {
                    "q": "An operating system designed for systems where tasks must be completed within strict time constraints (e.g., industrial control systems) is a:",
                    "options": [
                        "Batch OS",
                        "Network OS",
                        "Real-time OS",
                        "Distributed OS"
                    ],
                    "a": 2,
                    "ex": "Real-time operating systems (RTOS) are crucial for applications where timing is critical."
                },
                {
                    "q": "Which type of real-time operating system guarantees that critical tasks will be completed within a specified deadline?",
                    "options": [
                        "Soft Real-time OS",
                        "Hard Real-time OS",
                        "Firm Real-time OS",
                        "Distributed Real-time OS"
                    ],
                    "a": 1,
                    "ex": "Hard RTOS are used in life-critical systems where missing a deadline can have severe consequences."
                },
                {
                    "q": "UNIX and Linux are classic examples of which type of operating system, allowing multiple users to access resources simultaneously?",
                    "options": [
                        "Single-user OS",
                        "Batch OS",
                        "Multi-user OS",
                        "Embedded OS"
                    ],
                    "a": 2,
                    "ex": "Multi-user operating systems support concurrent access by multiple users."
                },
                {
                    "q": "Which type of operating system spreads the computation over multiple physical processors interconnected by a network?",
                    "options": [
                        "Batch OS",
                        "Real-time OS",
                        "Distributed OS",
                        "Network OS"
                    ],
                    "a": 2,
                    "ex": "Distributed operating systems manage a collection of independent computers as a single coherent system."
                },
                {
                    "q": "An operating system whose primary function is to manage network resources and allow file and printer sharing is typically a:",
                    "options": [
                        "Distributed OS",
                        "Network OS",
                        "Embedded OS",
                        "Real-time OS"
                    ],
                    "a": 1,
                    "ex": "Network Operating Systems (NOS) are designed to support network clients and manage network resources."
                },
                {
                    "q": "MS-DOS is an example of which type of operating system?",
                    "options": [
                        "Multi-user, multitasking OS",
                        "Single-user, single-tasking OS",
                        "Real-time OS",
                        "Network OS"
                    ],
                    "a": 1,
                    "ex": "MS-DOS allowed only one user to perform one task at a time."
                },
                {
                    "q": "Operating systems found in consumer electronics like smart appliances, GPS systems, or medical devices are often classified as:",
                    "options": [
                        "Desktop OS",
                        "Server OS",
                        "Embedded OS",
                        "Supercomputer OS"
                    ],
                    "a": 2,
                    "ex": "Embedded operating systems are specialized for specific, often resource-constrained, devices."
                },
                {
                    "q": "Which type of OS prioritizes throughput by running jobs in batches, often with minimal CPU idle time?",
                    "options": [
                        "Multitasking OS",
                        "Real-time OS",
                        "Batch OS",
                        "Network OS"
                    ],
                    "a": 2,
                    "ex": "Batch systems were designed to maximize CPU utilization by processing jobs continuously."
                },
                {
                    "q": "Windows 10, macOS, and Ubuntu Desktop are examples of which type of operating system?",
                    "options": [
                        "Server OS",
                        "Embedded OS",
                        "Desktop OS",
                        "Mainframe OS"
                    ],
                    "a": 2,
                    "ex": "These are common operating systems designed for personal computers."
                },
                {
                    "q": "Which type of real-time operating system attempts to meet deadlines but does not guarantee them, potentially impacting quality but not causing system failure?",
                    "options": [
                        "Hard Real-time OS",
                        "Soft Real-time OS",
                        "Firm Real-time OS",
                        "Critical Real-time OS"
                    ],
                    "a": 1,
                    "ex": "Soft RTOS are used in multimedia systems or scientific applications where missing a deadline might degrade performance but not be catastrophic."
                },
                {
                    "q": "What is the primary characteristic of a 'time-sharing' operating system?",
                    "options": [
                        "Allows one user to run multiple tasks.",
                        "Allows multiple users to share computer resources simultaneously by giving each a slice of CPU time.",
                        "Processes jobs in batches without user interaction.",
                        "Dedicated to a single specific task."
                    ],
                    "a": 1,
                    "ex": "Time-sharing systems evolved from batch systems to provide interactive computing to multiple users."
                },
                {
                    "q": "Which type of OS is best suited for applications like online transaction processing (OLTP) in banking?",
                    "options": [
                        "Batch OS",
                        "Single-user OS",
                        "Multi-user OS",
                        "Embedded OS"
                    ],
                    "a": 2,
                    "ex": "Banking systems require simultaneous access and processing for many users, characteristic of multi-user systems."
                },
                {
                    "q": "What distinguishes a 'Network OS' from a 'Distributed OS'?",
                    "options": [
                        "Network OS manages local resources; Distributed OS pools resources to appear as one system.",
                        "Network OS is for single users; Distributed OS is for multiple users.",
                        "Network OS uses real-time processing; Distributed OS uses batch processing.",
                        "There is no significant difference."
                    ],
                    "a": 0,
                    "ex": "A Network OS manages individual computers and their interactions on a network. A Distributed OS creates the illusion of a single, powerful machine from multiple interconnected computers."
                },
                {
                    "q": "An ATM machine typically uses which type of operating system?",
                    "options": [
                        "Desktop OS",
                        "Server OS",
                        "Embedded OS",
                        "Batch OS"
                    ],
                    "a": 2,
                    "ex": "ATMs run specialized embedded systems tailored for their specific functions."
                },
                {
                    "q": "Which of the following is a characteristic of a 'firm real-time' operating system?",
                    "options": [
                        "Failure to meet deadlines leads to system failure.",
                        "Missing a deadline is acceptable if it's not frequent.",
                        "Missing a deadline results in a loss of value for that specific result, but the system continues.",
                        "It is only used for entertainment systems."
                    ],
                    "a": 2,
                    "ex": "Firm RTOS are a middle ground; a missed deadline isn't catastrophic but makes the result useless."
                },
                {
                    "q": "Which type of operating system would you expect to find on a supercomputer performing complex simulations?",
                    "options": [
                        "Desktop OS",
                        "Embedded OS",
                        "Distributed OS (or specialized HPC OS)",
                        "Single-user OS"
                    ],
                    "a": 2,
                    "ex": "Supercomputers often utilize highly specialized distributed operating systems or High-Performance Computing (HPC) operating systems to manage their massive parallel processing capabilities."
                },
                {
                    "q": "The first generation of computers primarily used which type of operating system?",
                    "options": [
                        "Multitasking OS",
                        "Real-time OS",
                        "Batch OS",
                        "Time-sharing OS"
                    ],
                    "a": 2,
                    "ex": "Early computers relied on batch processing due to lack of interactive capabilities."
                },
                {
                    "q": "Which type of operating system would be most suitable for managing a large database server with many concurrent user requests?",
                    "options": [
                        "Single-user OS",
                        "Batch OS",
                        "Server OS",
                        "Embedded OS"
                    ],
                    "a": 2,
                    "ex": "Server OS are optimized for handling multiple requests, network services, and high uptime."
                },
                {
                    "q": "What is the primary objective of a 'Real-time OS'?",
                    "options": [
                        "To maximize CPU utilization.",
                        "To ensure timely and predictable response to events.",
                        "To provide a user-friendly graphical interface.",
                        "To minimize memory usage."
                    ],
                    "a": 1,
                    "ex": "Timeliness and predictability are paramount for RTOS."
                },
                {
                    "q": "An operating system that supports only one user and one task at a time is known as:",
                    "options": [
                        "Multi-user OS",
                        "Multitasking OS",
                        "Single-user, single-tasking OS",
                        "Network OS"
                    ],
                    "a": 2,
                    "ex": "This describes the most basic type of operating system."
                },
                {
                    "q": "Which of the following describes a 'mobile operating system'?",
                    "options": [
                        "An OS for supercomputers.",
                        "An OS designed for smartphones and tablets.",
                        "An OS exclusively for server management.",
                        "An OS that runs only in batches."
                    ],
                    "a": 1,
                    "ex": "Android and iOS are prime examples of mobile operating systems."
                },
                {
                    "q": "What is the main characteristic of a 'client-server' operating system model?",
                    "options": [
                        "All processing happens on the client.",
                        "Clients request services from a central server.",
                        "It runs only on a single computer.",
                        "It does not involve a network."
                    ],
                    "a": 1,
                    "ex": "In this model, clients send requests (e.g., for files, web pages) to servers, which respond with the requested data."
                },
                {
                    "q": "Which type of operating system provides a consistent environment for running applications across different hardware platforms?",
                    "options": [
                        "Batch OS",
                        "Proprietary OS",
                        "Open-source OS",
                        "Portable OS"
                    ],
                    "a": 3,
                    "ex": "A portable OS can run on various hardware architectures with minimal or no changes (e.g., Linux)."
                },
                {
                    "q": "The concept of 'spooling' (e.g., print spooling) was developed to improve the efficiency of which type of OS?",
                    "options": [
                        "Real-time OS",
                        "Single-user OS",
                        "Batch OS",
                        "Embedded OS"
                    ],
                    "a": 2,
                    "ex": "Spooling allowed input/output operations to be done in parallel with CPU operations, improving throughput in batch systems."
                },
                {
                    "q": "Which of these is NOT typically a feature of a 'batch operating system'?",
                    "options": [
                        "Lack of direct user interaction.",
                        "Processing similar jobs together.",
                        "Interactive command-line interface.",
                        "High CPU utilization."
                    ],
                    "a": 2,
                    "ex": "Batch systems are non-interactive by nature."
                },
                {
                    "q": "What is the primary goal of a 'multitasking operating system'?",
                    "options": [
                        "To allow multiple users to log in simultaneously.",
                        "To make the computer appear to perform multiple tasks at the same time.",
                        "To execute tasks only in a predefined order.",
                        "To minimize the number of programs running."
                    ],
                    "a": 1,
                    "ex": "Multitasking creates the illusion of parallel execution, enhancing user productivity."
                },
                {
                    "q": "Which category would Chrome OS (used on Chromebooks) fall under?",
                    "options": [
                        "Server OS",
                        "Embedded OS",
                        "Desktop OS",
                        "Real-time OS"
                    ],
                    "a": 2,
                    "ex": "Chrome OS is designed for personal computing on laptop-style devices."
                },
                {
                    "q": "An OS that is designed to be very small, efficient, and typically runs a single, specific application within a device is an example of a:",
                    "options": [
                        "General-purpose OS",
                        "Server OS",
                        "Embedded OS",
                        "Distributed OS"
                    ],
                    "a": 2,
                    "ex": "This description perfectly matches the characteristics of an embedded operating system."
                }
            ]
        },
        {
            "id": "process-management",
            "title": "Process Management",
            "questions": [
                {
                    "q": "What is a 'process' in the context of an operating system?",
                    "options": [
                        "A program stored on disk.",
                        "A program in execution.",
                        "A collection of files.",
                        "A hardware component."
                    ],
                    "a": 1,
                    "ex": "A process is an active instance of a program being executed, including its program counter, registers, and stack."
                },
                {
                    "q": "Which state does a process enter when it is waiting for some event to occur (e.g., I/O completion)?",
                    "options": [
                        "New",
                        "Ready",
                        "Running",
                        "Waiting (Blocked)"
                    ],
                    "a": 3,
                    "ex": "A process enters the Waiting (or Blocked) state when it cannot proceed until some external event finishes."
                },
                {
                    "q": "What is the primary role of the 'scheduler' in process management?",
                    "options": [
                        "To create new processes.",
                        "To allocate memory to processes.",
                        "To select which process should be executed by the CPU.",
                        "To delete terminated processes."
                    ],
                    "a": 2,
                    "ex": "The scheduler is responsible for choosing which process from the ready queue gets the CPU next."
                },
                {
                    "q": "The rapid switching of the CPU from one process to another to give the illusion of simultaneous execution is called:",
                    "options": [
                        "Multiprocessing",
                        "Multithreading",
                        "Context Switching",
                        "Pipelining"
                    ],
                    "a": 2,
                    "ex": "Context switching is the mechanism that allows the OS to save the state of one process and load the state of another."
                },
                {
                    "q": "What is a 'thread' in relation to a process?",
                    "options": [
                        "A completely separate program.",
                        "A lightweight process, representing a single sequence of execution within a process.",
                        "A file containing executable code.",
                        "A type of hardware interrupt."
                    ],
                    "a": 1,
                    "ex": "Threads share the same memory space and resources of their parent process but have their own execution path."
                },
                {
                    "q": "Which of the following is NOT part of a Process Control Block (PCB)?",
                    "options": [
                        "Process State",
                        "Program Counter",
                        "CPU Registers",
                        "The entire program code"
                    ],
                    "a": 3,
                    "ex": "The PCB contains information about the process (state, registers, memory limits, etc.) but not the entire executable code itself."
                },
                {
                    "q": "When a process finishes its execution, it enters which state?",
                    "options": [
                        "Running",
                        "Ready",
                        "Waiting",
                        "Terminated"
                    ],
                    "a": 3,
                    "ex": "The Terminated state signifies that the process has completed its execution and is no longer active."
                },
                {
                    "q": "What is 'inter-process communication (IPC)'?",
                    "options": [
                        "Communication between a process and the operating system.",
                        "Communication between processes, allowing them to synchronize and exchange data.",
                        "Communication between hardware devices.",
                        "Communication over a network."
                    ],
                    "a": 1,
                    "ex": "IPC mechanisms (like pipes, message queues, shared memory) enable processes to cooperate."
                },
                {
                    "q": "Which of the following describes a 'daemon' process?",
                    "options": [
                        "A process that runs only once.",
                        "A background process that runs continuously to perform system-wide tasks.",
                        "A process that requires direct user interaction.",
                        "A process that only handles errors."
                    ],
                    "a": 1,
                    "ex": "Daemons typically start at boot time and run silently in the background, providing services."
                },
                {
                    "q": "What is the primary cause of 'deadlock' in concurrent processes?",
                    "options": [
                        "Insufficient memory.",
                        "Processes indefinitely waiting for resources held by other waiting processes.",
                        "Too many processes running simultaneously.",
                        "CPU overheating."
                    ],
                    "a": 1,
                    "ex": "Deadlock occurs when processes are stuck in a circular dependency for resources."
                },
                {
                    "q": "The 'dispatcher' module in the OS is responsible for:",
                    "options": [
                        "Saving the state of the CPU for a process.",
                        "Loading the state of the CPU for a new process.",
                        "Moving control of the CPU to the process selected by the short-term scheduler.",
                        "All of the above."
                    ],
                    "a": 3,
                    "ex": "The dispatcher performs the context switch, switching the CPU from one process to another."
                },
                {
                    "q": "A 'child process' is created by a 'parent process' using which system call?",
                    "options": [
                        "exit()",
                        "wait()",
                        "fork()",
                        "exec()"
                    ],
                    "a": 2,
                    "ex": "The `fork()` system call creates a new process by duplicating the calling process."
                },
                {
                    "q": "What is 'process synchronization'?",
                    "options": [
                        "Ensuring all processes run at the same speed.",
                        "Coordinating the execution of multiple processes to ensure data consistency and avoid race conditions.",
                        "Making sure processes access resources randomly.",
                        "Deleting unnecessary processes."
                    ],
                    "a": 1,
                    "ex": "Synchronization mechanisms (e.g., semaphores, mutexes) are used to manage access to shared resources."
                },
                {
                    "q": "What is a 'race condition' in concurrent programming?",
                    "options": [
                        "When two processes compete for CPU time.",
                        "When the outcome of execution depends on the order of specific events, often leading to incorrect results.",
                        "When a process finishes too quickly.",
                        "When processes communicate too slowly."
                    ],
                    "a": 1,
                    "ex": "Race conditions occur when multiple processes access and modify shared data concurrently, and the final result depends on the order of execution."
                },
                {
                    "q": "Which of the following is a common approach to prevent deadlock?",
                    "options": [
                        "Allowing processes to hold resources indefinitely.",
                        "Disallowing preemption of resources.",
                        "Implementing resource ordering.",
                        "Ignoring the problem."
                    ],
                    "a": 2,
                    "ex": "Resource ordering is a common deadlock prevention strategy where processes request resources in a predefined order."
                },
                {
                    "q": "What is the purpose of the 'wait()' system call?",
                    "options": [
                        "To put a process to sleep indefinitely.",
                        "To allow a parent process to wait for its child process to terminate.",
                        "To make a process wait for an I/O operation.",
                        "To wait for a network connection."
                    ],
                    "a": 1,
                    "ex": "The `wait()` system call is used by a parent process to suspend its own execution until a child process terminates."
                },
                {
                    "q": "The state transition from 'Running' to 'Ready' typically occurs due to:",
                    "options": [
                        "I/O completion",
                        "Process termination",
                        "Time slice expiration (preemption)",
                        "Resource request"
                    ],
                    "a": 2,
                    "ex": "In preemptive scheduling, a running process is moved to the ready state if its allotted time slice expires."
                },
                {
                    "q": "Which of the following is a mechanism for inter-process communication?",
                    "options": [
                        "Registers",
                        "Cache memory",
                        "Pipes",
                        "System clock"
                    ],
                    "a": 2,
                    "ex": "Pipes allow one-way communication between related processes."
                },
                {
                    "q": "What is a 'zombie process'?",
                    "options": [
                        "A process that is still running but unresponsive.",
                        "A process that has terminated but its entry still exists in the process table.",
                        "A process that is waiting for an I/O operation.",
                        "A malicious process."
                    ],
                    "a": 1,
                    "ex": "A zombie process has finished execution but its parent has not yet called `wait()` to collect its exit status, leaving its PCB in the table."
                },
                {
                    "q": "The 'degree of multiprogramming' refers to:",
                    "options": [
                        "The number of CPU cores in a system.",
                        "The number of processes loaded into memory at any given time.",
                        "The number of users logged into the system.",
                        "The speed of context switching."
                    ],
                    "a": 1,
                    "ex": "A higher degree of multiprogramming means more processes are residing in RAM, ready to execute."
                },
                {
                    "q": "What is a 'mutex' (mutual exclusion) used for?",
                    "options": [
                        "To speed up process creation.",
                        "To ensure that only one process can access a shared resource at a time.",
                        "To prioritize processes.",
                        "To send messages between processes."
                    ],
                    "a": 1,
                    "ex": "Mutexes are synchronization primitives that provide exclusive access to a resource."
                },
                {
                    "q": "A 'semaphore' is a synchronization tool used to:",
                    "options": [
                        "Schedule processes on the CPU.",
                        "Control access to shared resources to prevent race conditions.",
                        "Manage memory allocation.",
                        "Handle file operations."
                    ],
                    "a": 1,
                    "ex": "Semaphores are integer variables used for signaling between processes and controlling access to critical sections."
                },
                {
                    "q": "What is the 'critical section problem'?",
                    "options": [
                        "A problem with CPU scheduling.",
                        "A problem related to concurrent access to shared data.",
                        "A problem with insufficient memory.",
                        "A problem with slow I/O devices."
                    ],
                    "a": 1,
                    "ex": "The critical section problem deals with ensuring that only one process is executing its critical section (where shared data is accessed) at any given time."
                },
                {
                    "q": "Which process state indicates that a process is ready to execute but waiting for the CPU?",
                    "options": [
                        "New",
                        "Running",
                        "Waiting (Blocked)",
                        "Ready"
                    ],
                    "a": 3,
                    "ex": "Processes in the Ready state are prepared to run as soon as the CPU becomes available."
                },
                {
                    "q": "What happens during a 'fork-exec' sequence?",
                    "options": [
                        "A process executes another process within its own memory space.",
                        "A process duplicates itself, and then the child process replaces its memory space with a new program.",
                        "A process sends a message to another process.",
                        "A process creates a new thread."
                    ],
                    "a": 1,
                    "ex": "This is a common pattern in Unix-like systems: `fork` creates a copy, then `exec` loads a new program into the child's memory."
                },
                {
                    "q": "Which level of scheduling determines which processes are admitted to the system for processing?",
                    "options": [
                        "Long-term scheduler (Job scheduler)",
                        "Short-term scheduler (CPU scheduler)",
                        "Medium-term scheduler",
                        "Dispatcher"
                    ],
                    "a": 0,
                    "ex": "The long-term scheduler controls the degree of multiprogramming."
                },
                {
                    "q": "What is the primary benefit of using threads over separate processes?",
                    "options": [
                        "Increased security and isolation.",
                        "Reduced context switching overhead and easier resource sharing.",
                        "Guaranteed real-time performance.",
                        "Simpler debugging."
                    ],
                    "a": 1,
                    "ex": "Threads are more lightweight, leading to faster context switching and inherent sharing of process resources."
                },
                {
                    "q": "If a process requests a resource that is currently unavailable, it will typically transition to which state?",
                    "options": [
                        "Ready",
                        "Running",
                        "Blocked/Waiting",
                        "Terminated"
                    ],
                    "a": 2,
                    "ex": "The process will wait until the resource becomes available."
                },
                {
                    "q": "What is the 'orphan process' problem?",
                    "options": [
                        "A process that loses its parent process.",
                        "A process that cannot communicate with other processes.",
                        "A process that runs indefinitely.",
                        "A process that consumes too many resources."
                    ],
                    "a": 0,
                    "ex": "An orphan process is a computer process whose parent process has terminated, though it is still running itself."
                },
                {
                    "q": "The state transition from 'Waiting' to 'Ready' occurs when:",
                    "options": [
                        "The process requests an I/O operation.",
                        "The CPU becomes idle.",
                        "The event the process was waiting for occurs.",
                        "The process is preempted by the scheduler."
                    ],
                    "a": 2,
                    "ex": "Once the awaited event (e.g., I/O completion) takes place, the process becomes eligible to run again."
                }
            ]
        },
        {
            "id": "memory-management",
            "title": "Memory Management",
            "questions": [
                {
                    "q": "What is the primary goal of memory management in an operating system?",
                    "options": [
                        "To store all files on the hard drive.",
                        "To allocate and deallocate memory space efficiently and protect processes from each other.",
                        "To speed up CPU clock cycles.",
                        "To connect to external devices."
                    ],
                    "a": 1,
                    "ex": "Memory management ensures optimal use of RAM and prevents conflicts between processes."
                },
                {
                    "q": "Which memory management technique divides a program into fixed-size blocks called 'pages' and memory into fixed-size blocks called 'frames'?",
                    "options": [
                        "Segmentation",
                        "Paging",
                        "Swapping",
                        "Contiguous Allocation"
                    ],
                    "a": 1,
                    "ex": "Paging is a non-contiguous memory allocation scheme that eliminates external fragmentation."
                },
                {
                    "q": "What is 'virtual memory'?",
                    "options": [
                        "A type of fast RAM.",
                        "A technique that uses hard disk space to extend physical RAM capacity.",
                        "Memory directly accessible by the CPU.",
                        "Memory that is only used by the operating system."
                    ],
                    "a": 1,
                    "ex": "Virtual memory allows programs to address more memory than is physically available by using disk storage as an extension."
                },
                {
                    "q": "Which of the following is a problem associated with 'contiguous memory allocation'?",
                    "options": [
                        "Internal fragmentation",
                        "External fragmentation",
                        "Thrashing",
                        "Paging"
                    ],
                    "a": 1,
                    "ex": "External fragmentation occurs when there is enough total free space, but it is divided into small, non-contiguous blocks."
                },
                {
                    "q": "What is 'internal fragmentation'?",
                    "options": [
                        "Free space outside allocated blocks.",
                        "Unused memory within an allocated block.",
                        "Memory used by the operating system.",
                        "Memory errors."
                    ],
                    "a": 1,
                    "ex": "Internal fragmentation happens when memory is allocated in fixed-size blocks, and a process uses only part of a block, leaving the rest unused within the block."
                },
                {
                    "q": "The process of moving a complete process from main memory to secondary storage (and vice-versa) is called:",
                    "options": [
                        "Paging",
                        "Segmentation",
                        "Swapping",
                        "Compaction"
                    ],
                    "a": 2,
                    "ex": "Swapping allows the OS to bring processes in and out of memory as needed, increasing the degree of multiprogramming."
                },
                {
                    "q": "Which component translates virtual addresses into physical addresses?",
                    "options": [
                        "CPU",
                        "RAM",
                        "Memory Management Unit (MMU)",
                        "Hard Drive"
                    ],
                    "a": 2,
                    "ex": "The MMU is a hardware component crucial for virtual memory implementation."
                },
                {
                    "q": "In paging, what is a 'page fault'?",
                    "options": [
                        "A physical memory error.",
                        "An attempt to access a page that is not currently in physical memory.",
                        "A type of virus.",
                        "A program crash."
                    ],
                    "a": 1,
                    "ex": "A page fault triggers the OS to load the required page from secondary storage into a free memory frame."
                },
                {
                    "q": "What is 'thrashing' in memory management?",
                    "options": [
                        "Excessive CPU usage.",
                        "A situation where the system spends most of its time swapping pages in and out of memory.",
                        "A rapid increase in disk storage.",
                        "A type of memory defragmentation."
                    ],
                    "a": 1,
                    "ex": "Thrashing severely degrades system performance due to high page fault rates and continuous swapping."
                },
                {
                    "q": "Which memory allocation strategy allocates the smallest sufficient free memory hole to a process?",
                    "options": [
                        "First Fit",
                        "Best Fit",
                        "Worst Fit",
                        "Next Fit"
                    ],
                    "a": 1,
                    "ex": "Best Fit aims to leave the largest possible contiguous block of free memory available."
                },
                {
                    "q": "Which memory allocation strategy allocates the first free memory hole that is large enough?",
                    "options": [
                        "First Fit",
                        "Best Fit",
                        "Worst Fit",
                        "Next Fit"
                    ],
                    "a": 0,
                    "ex": "First Fit is often simple to implement but can lead to many small, unusable free blocks."
                },
                {
                    "q": "Which memory allocation strategy allocates the largest free memory hole to a process?",
                    "options": [
                        "First Fit",
                        "Best Fit",
                        "Worst Fit",
                        "Next Fit"
                    ],
                    "a": 2,
                    "ex": "Worst Fit tries to leave a large block for future large requests, but can also lead to more fragmentation."
                },
                {
                    "q": "The 'segmentation' memory management technique divides a program into logical units called:",
                    "options": [
                        "Pages",
                        "Frames",
                        "Segments",
                        "Blocks"
                    ],
                    "a": 2,
                    "ex": "Segments correspond to logical divisions meaningful to the programmer, such as code, data, stack, or functions."
                },
                {
                    "q": "What is the purpose of a 'Translation Lookaside Buffer (TLB)'?",
                    "options": [
                        "To store frequently accessed data.",
                        "To speed up the translation of virtual addresses to physical addresses.",
                        "To manage disk space.",
                        "To store program instructions."
                    ],
                    "a": 1,
                    "ex": "The TLB is a small, fast hardware cache that stores recent virtual-to-physical address translations."
                },
                {
                    "q": "When using paging, a 'page table' maps:",
                    "options": [
                        "Logical addresses to physical addresses for files.",
                        "Virtual pages to physical frames.",
                        "Process IDs to their memory locations.",
                        "Hard drive sectors to RAM addresses."
                    ],
                    "a": 1,
                    "ex": "Each process has its own page table, which the OS uses to manage its memory."
                },
                {
                    "q": "What is 'demand paging'?",
                    "options": [
                        "Loading the entire program into memory at once.",
                        "Loading pages into memory only when they are needed.",
                        "Pre-loading all possible pages before execution.",
                        "Only loading the first page of a program."
                    ],
                    "a": 1,
                    "ex": "Demand paging is a technique where the OS only loads pages into physical memory as they are accessed, improving efficiency."
                },
                {
                    "q": "Which of the following is an advantage of 'virtual memory'?",
                    "options": [
                        "Eliminates the need for physical RAM.",
                        "Allows programs larger than physical memory to run.",
                        "Always faster than physical memory.",
                        "Completely eliminates fragmentation."
                    ],
                    "a": 1,
                    "ex": "Virtual memory enables programs to function even if their total size exceeds the available RAM."
                },
                {
                    "q": "What is the primary goal of a 'page replacement algorithm'?",
                    "options": [
                        "To decide which page to load into memory.",
                        "To choose which page to swap out of memory when a page fault occurs and no free frames are available.",
                        "To encrypt memory data.",
                        "To defragment memory."
                    ],
                    "a": 1,
                    "ex": "Algorithms like FIFO, LRU, Optimal determine which page to remove from RAM to make space for a new one."
                },
                {
                    "q": "The 'Least Recently Used (LRU)' page replacement algorithm aims to remove the page that:",
                    "options": [
                        "Has been in memory the longest.",
                        "Will not be used for the longest period of time in the future.",
                        "Was accessed least recently.",
                        "Has been modified the most."
                    ],
                    "a": 2,
                    "ex": "LRU attempts to approximate the optimal algorithm by assuming past usage predicts future usage."
                },
                {
                    "q": "What is 'compaction' in memory management?",
                    "options": [
                        "Compressing data to save space.",
                        "Shuffling memory contents to gather all free space into one large block.",
                        "Removing unused programs from memory.",
                        "Encrypting memory for security."
                    ],
                    "a": 1,
                    "ex": "Compaction is used in contiguous allocation to overcome external fragmentation by moving processes together."
                },
                {
                    "q": "Memory protection mechanisms primarily aim to prevent:",
                    "options": [
                        "CPU overheating.",
                        "One process from accessing the memory space of another process.",
                        "Hard drive failure.",
                        "Slow internet connection."
                    ],
                    "a": 1,
                    "ex": "Memory protection is crucial for system stability and security in multi-programming environments."
                },
                {
                    "q": "Which register is typically used to store the base address of a program segment in memory?",
                    "options": [
                        "Program Counter",
                        "Instruction Register",
                        "Base Register",
                        "Limit Register"
                    ],
                    "a": 2,
                    "ex": "Base and Limit registers are used in simple memory protection schemes to define the bounds of a process's memory."
                },
                {
                    "q": "What is 'shared memory' in the context of memory management?",
                    "options": [
                        "Memory accessible only by the OS.",
                        "Memory that can be concurrently accessed by multiple independent processes for communication.",
                        "Memory shared by different CPU cores.",
                        "Memory used for virtual machines."
                    ],
                    "a": 1,
                    "ex": "Shared memory is a common and efficient inter-process communication mechanism."
                },
                {
                    "q": "What is the purpose of 'memory mapping'?",
                    "options": [
                        "To draw a map of the memory layout.",
                        "To associate a file or device with a portion of a process's virtual address space.",
                        "To create new memory chips.",
                        "To test memory for errors."
                    ],
                    "a": 1,
                    "ex": "Memory mapping allows files to be treated as if they are directly loaded into a program's memory."
                },
                {
                    "q": "The concept of 'locality of reference' is important in the design of:",
                    "options": [
                        "Hard drives",
                        "Printers",
                        "Cache memory and paging algorithms",
                        "Keyboards"
                    ],
                    "a": 2,
                    "ex": "Locality of reference (both temporal and spatial) explains why cache memory and demand paging are effective, as programs tend to access data and instructions that are near recently accessed ones."
                },
                {
                    "q": "What is 'memory swapping' primarily used for?",
                    "options": [
                        "To increase the speed of memory access.",
                        "To allow more programs to be loaded and run than physically fit in RAM.",
                        "To permanently store data.",
                        "To reduce fragmentation."
                    ],
                    "a": 1,
                    "ex": "Swapping temporarily moves entire processes between main memory and secondary storage."
                },
                {
                    "q": "Which of the following is true about 'logical addresses'?",
                    "options": [
                        "They are the actual addresses in physical memory.",
                        "They are generated by the CPU and mapped to physical addresses by the MMU.",
                        "They are only used in older systems.",
                        "They are the same as physical addresses."
                    ],
                    "a": 1,
                    "ex": "Logical addresses are independent of physical memory locations, providing abstraction."
                },
                {
                    "q": "What is the main goal of 'fragmentation' in memory?",
                    "options": [
                        "To improve memory access speed.",
                        "To efficiently allocate memory.",
                        "To waste memory space.",
                        "To simplify memory management."
                    ],
                    "a": 2,
                    "ex": "Fragmentation, whether internal or external, results in wasted or unusable memory space."
                },
                {
                    "q": "In a paged memory system, what is the 'frame table' used for?",
                    "options": [
                        "To map pages to processes.",
                        "To keep track of which physical memory frames are free or occupied.",
                        "To store all page tables.",
                        "To record page faults."
                    ],
                    "a": 1,
                    "ex": "The frame table provides a global view of physical memory allocation."
                },
                {
                    "q": "What is the consequence of severe 'thrashing'?",
                    "options": [
                        "Increased CPU performance.",
                        "Reduced disk I/O.",
                        "Very low CPU utilization and significant performance degradation.",
                        "More available memory."
                    ],
                    "a": 2,
                    "ex": "Thrashing implies the system is spending too much time moving data between RAM and disk, achieving little useful work."
                }
            ]
        },
        {
            "id": "file-system",
            "title": "File System",
            "questions": [
                {
                    "q": "What is the primary purpose of a file system?",
                    "options": [
                        "To manage network connections.",
                        "To organize, store, and retrieve data on storage devices.",
                        "To execute programs.",
                        "To control hardware devices."
                    ],
                    "a": 1,
                    "ex": "The file system provides a structured way to manage information on persistent storage."
                },
                {
                    "q": "Which of the following is a fundamental operation supported by a file system?",
                    "options": [
                        "Running a program directly.",
                        "Creating a file.",
                        "Debugging software.",
                        "Calculating complex equations."
                    ],
                    "a": 1,
                    "ex": "Creating, deleting, reading, and writing are core file operations."
                },
                {
                    "q": "What is a 'directory' (or folder) in a file system?",
                    "options": [
                        "A type of file.",
                        "A container that holds files and other directories.",
                        "A hardware component.",
                        "A network address."
                    ],
                    "a": 1,
                    "ex": "Directories provide a hierarchical structure for organizing files."
                },
                {
                    "q": "What is a 'path' in a file system?",
                    "options": [
                        "The physical location of a file on the disk.",
                        "A unique string that identifies the location of a file or directory in the file system hierarchy.",
                        "The size of a file.",
                        "The content of a file."
                    ],
                    "a": 1,
                    "ex": "A path specifies how to navigate through directories to reach a particular file or directory."
                },
                {
                    "q": "Which of the following attributes is typically NOT associated with a file?",
                    "options": [
                        "File name",
                        "File size",
                        "CPU type",
                        "Date created/modified"
                    ],
                    "a": 2,
                    "ex": "CPU type is a hardware attribute, not a file attribute."
                },
                {
                    "q": "What is 'file allocation' in a file system?",
                    "options": [
                        "The process of creating new files.",
                        "The method by which disk space is allocated to files.",
                        "The process of deleting files.",
                        "The way files are displayed to the user."
                    ],
                    "a": 1,
                    "ex": "Common allocation methods include contiguous, linked, and indexed allocation."
                },
                {
                    "q": "Which file allocation method stores a file in physically adjacent blocks on the disk?",
                    "options": [
                        "Linked Allocation",
                        "Indexed Allocation",
                        "Contiguous Allocation",
                        "FAT (File Allocation Table)"
                    ],
                    "a": 2,
                    "ex": "Contiguous allocation offers fast sequential access but suffers from external fragmentation."
                },
                {
                    "q": "Which file allocation method uses a table where each entry points to the next block of the file?",
                    "options": [
                        "Contiguous Allocation",
                        "Linked Allocation",
                        "Indexed Allocation",
                        "Direct Allocation"
                    ],
                    "a": 1,
                    "ex": "Linked allocation is flexible but can be slow for direct access."
                },
                {
                    "q": "Which file allocation method uses an 'index block' or 'inode' to store pointers to all the blocks of a file?",
                    "options": [
                        "Contiguous Allocation",
                        "Linked Allocation",
                        "Indexed Allocation",
                        "Sequential Allocation"
                    ],
                    "a": 2,
                    "ex": "Indexed allocation provides both direct and sequential access efficiently, used in systems like Unix/Linux."
                },
                {
                    "q": "What is a 'superblock' in some file systems (e.g., ext4, UFS)?",
                    "options": [
                        "A special type of file.",
                        "A block that contains information about the entire file system (e.g., size, number of inodes, free blocks).",
                        "A very large directory.",
                        "A backup of the file system."
                    ],
                    "a": 1,
                    "ex": "The superblock is critical for the integrity and organization of the file system."
                },
                {
                    "q": "What is the primary role of the 'disk controller' in relation to the file system?",
                    "options": [
                        "To manage files logically.",
                        "To translate logical block addresses from the file system to physical sectors on the disk.",
                        "To display file contents.",
                        "To calculate file sizes."
                    ],
                    "a": 1,
                    "ex": "The disk controller handles the low-level communication with the physical disk hardware."
                },
                {
                    "q": "What does 'mounting' a file system mean?",
                    "options": [
                        "Physically installing a new hard drive.",
                        "Making a file system accessible at a specific point in the directory tree.",
                        "Encrypting a file system.",
                        "Deleting a file system."
                    ],
                    "a": 1,
                    "ex": "Mounting integrates a file system into the existing directory structure."
                },
                {
                    "q": "What is 'disk partitioning'?",
                    "options": [
                        "Dividing a disk into one or more logical sections.",
                        "Cleaning a disk of unwanted files.",
                        "Encrypting the entire disk.",
                        "Creating a backup of a disk."
                    ],
                    "a": 0,
                    "ex": "Partitioning allows a single physical disk to function as multiple independent logical drives."
                },
                {
                    "q": "What is 'defragmentation' of a disk?",
                    "options": [
                        "Removing bad sectors from a disk.",
                        "Rearranging fragmented files to occupy contiguous storage locations.",
                        "Erasing all data from a disk.",
                        "Creating new files on a disk."
                    ],
                    "a": 1,
                    "ex": "Defragmentation improves performance by reducing seek time for fragmented files."
                },
                {
                    "q": "Which of the following is NOT a common file access method?",
                    "options": [
                        "Sequential Access",
                        "Direct Access",
                        "Indexed Sequential Access",
                        "Random Search Access"
                    ],
                    "a": 3,
                    "ex": "Common methods are sequential, direct (or random), and indexed sequential."
                },
                {
                    "q": "What is a 'file descriptor'?",
                    "options": [
                        "A description of a file's content.",
                        "An abstract indicator (usually a small integer) used by the operating system to access a file or other I/O resource.",
                        "The name of a file.",
                        "The size of a file."
                    ],
                    "a": 1,
                    "ex": "File descriptors are used by programs to refer to open files, network sockets, etc."
                },
                {
                    "q": "What is the purpose of 'file permissions' in a file system?",
                    "options": [
                        "To determine the file type.",
                        "To control who can read, write, or execute a file/directory.",
                        "To compress file data.",
                        "To indicate the file's creation date."
                    ],
                    "a": 1,
                    "ex": "File permissions are a crucial aspect of operating system security."
                },
                {
                    "q": "Which of these is a common file system for Windows operating systems?",
                    "options": [
                        "ext4",
                        "HFS+",
                        "NTFS",
                        "ZFS"
                    ],
                    "a": 2,
                    "ex": "NTFS (New Technology File System) is the default file system for Windows."
                },
                {
                    "q": "Which of these is a common file system for Linux operating systems?",
                    "options": [
                        "FAT32",
                        "NTFS",
                        "ext4",
                        "APFS"
                    ],
                    "a": 2,
                    "ex": "ext4 (fourth extended filesystem) is a widely used journaling file system for Linux."
                },
                {
                    "q": "What is a 'journaling file system'?",
                    "options": [
                        "A file system that keeps a log of changes to prevent data corruption during crashes.",
                        "A file system used for writing journals.",
                        "A file system optimized for video editing.",
                        "A file system that does not support large files."
                    ],
                    "a": 0,
                    "ex": "Journaling file systems improve data integrity and allow for faster recovery after a system crash."
                },
                {
                    "q": "What is the 'root directory' in a hierarchical file system?",
                    "options": [
                        "The largest directory.",
                        "The starting point of the entire file system hierarchy.",
                        "A directory that only contains system files.",
                        "A directory for user homes."
                    ],
                    "a": 1,
                    "ex": "The root directory is the top-most directory from which all other directories and files branch out."
                },
                {
                    "q": "What is a 'symbolic link' (symlink) or 'soft link'?",
                    "options": [
                        "A copy of a file.",
                        "A pointer to another file or directory.",
                        "A hard drive partition.",
                        "A type of file compression."
                    ],
                    "a": 1,
                    "ex": "Symbolic links are special files that refer to other files or directories, acting like shortcuts."
                },
                {
                    "q": "Which of the following is true about 'hard links'?",
                    "options": [
                        "They can link to files on different file systems.",
                        "They are essentially different names for the same underlying file data.",
                        "They point to directories.",
                        "They only work on Windows."
                    ],
                    "a": 1,
                    "ex": "A hard link is an additional directory entry for a file, pointing to the same inode (data). They can only exist on the same file system."
                },
                {
                    "q": "What is 'disk caching' in the context of file systems?",
                    "options": [
                        "Storing files on a network drive.",
                        "Using a portion of RAM to store frequently accessed disk blocks.",
                        "Creating backups of the entire disk.",
                        "Encrypting data on the disk."
                    ],
                    "a": 1,
                    "ex": "Disk caching improves performance by reducing the number of slow disk I/O operations."
                },
                {
                    "q": "The 'inode' in Unix-like file systems contains information about:",
                    "options": [
                        "The actual content of the file.",
                        "The file name and directory path.",
                        "Metadata about a file (permissions, owner, size, timestamps, data block pointers).",
                        "The user who last accessed the file."
                    ],
                    "a": 2,
                    "ex": "An inode is a data structure on a Unix-like file system that stores information about a regular file, directory, or other file system object."
                },
                {
                    "q": "What is 'bad sector' on a hard drive?",
                    "options": [
                        "A sector that contains malicious software.",
                        "A sector that cannot be read or written to due to physical damage.",
                        "A sector used for storing temporary files.",
                        "A sector that is currently empty."
                    ],
                    "a": 1,
                    "ex": "Bad sectors indicate permanent damage to the disk surface."
                },
                {
                    "q": "The 'file control block (FCB)' contains:",
                    "options": [
                        "The actual data of the file.",
                        "File-specific information such as permissions, dates, and pointers to disk blocks.",
                        "User passwords.",
                        "Network configuration settings."
                    ],
                    "a": 1,
                    "ex": "The FCB is a data structure maintained by the operating system for each open file."
                },
                {
                    "q": "What is the primary role of 'file system utilities' (e.g., `fsck`, `chkdsk`)?",
                    "options": [
                        "To create new files.",
                        "To manage user accounts.",
                        "To check and repair file system inconsistencies.",
                        "To install new software."
                    ],
                    "a": 2,
                    "ex": "These utilities are essential for maintaining the health and integrity of a file system."
                },
                {
                    "q": "The concept of 'current working directory' allows users to:",
                    "options": [
                        "Access files from anywhere on the system.",
                        "Refer to files within that directory without specifying the full path.",
                        "Only store files in that specific directory.",
                        "Share files over a network."
                    ],
                    "a": 1,
                    "ex": "It simplifies file access by providing a default location for commands."
                },
                {
                    "q": "What is 'RAID' in the context of disk management?",
                    "options": [
                        "A type of file system for flash drives.",
                        "A technique for combining multiple physical disk drives into one or more logical units for data redundancy and performance improvement.",
                        "A network protocol.",
                        "A type of memory chip."
                    ],
                    "a": 1,
                    "ex": "RAID (Redundant Array of Independent Disks) is used to improve data storage reliability and speed."
                }
            ]
        },
        {
            "id": "file-system",
            "title": "File System",
            "questions": [
                {
                    "q": "What is a file system?",
                    "options": [
                        "A method to name and store files on a disk",
                        "A software that controls applications",
                        "A network protocol",
                        "An operating system feature for printing"
                    ],
                    "a": 0,
                    "ex": "A file system organizes and stores data in files and directories on a storage device."
                },
                {
                    "q": "Which of the following is a common file system in Windows?",
                    "options": [
                        "NTFS",
                        "EXT4",
                        "HFS+",
                        "APFS"
                    ],
                    "a": 0,
                    "ex": "NTFS (New Technology File System) is commonly used in Windows operating systems."
                },
                {
                    "q": "In which file system is journaling used?",
                    "options": [
                        "FAT32",
                        "NTFS",
                        "exFAT",
                        "FAT16"
                    ],
                    "a": 1,
                    "ex": "NTFS supports journaling, which helps recover from system crashes."
                },
                {
                    "q": "Which file system is used by macOS?",
                    "options": [
                        "NTFS",
                        "EXT4",
                        "APFS",
                        "FAT32"
                    ],
                    "a": 2,
                    "ex": "APFS (Apple File System) is the default file system for macOS."
                },
                {
                    "q": "Which file system supports file permissions and encryption?",
                    "options": [
                        "FAT32",
                        "EXT2",
                        "NTFS",
                        "exFAT"
                    ],
                    "a": 2,
                    "ex": "NTFS supports file-level security, encryption, and permissions."
                },
                {
                    "q": "What is the maximum file size supported by FAT32?",
                    "options": [
                        "2 GB",
                        "4 GB",
                        "8 GB",
                        "16 GB"
                    ],
                    "a": 1,
                    "ex": "FAT32 has a maximum file size limit of 4 GB."
                },
                {
                    "q": "Which of the following is a Linux file system?",
                    "options": [
                        "NTFS",
                        "EXT4",
                        "FAT32",
                        "APFS"
                    ],
                    "a": 1,
                    "ex": "EXT4 is widely used as the default file system for Linux distributions."
                },
                {
                    "q": "Which structure stores metadata about files?",
                    "options": [
                        "Directory",
                        "File table",
                        "Inode",
                        "Pathname"
                    ],
                    "a": 2,
                    "ex": "An inode contains metadata such as permissions, timestamps, and file size."
                },
                {
                    "q": "What is the root directory?",
                    "options": [
                        "The base of the file system hierarchy",
                        "The largest file in the system",
                        "The system boot file",
                        "A hidden folder in every partition"
                    ],
                    "a": 0,
                    "ex": "The root directory is the topmost directory from which all others stem."
                },
                {
                    "q": "Which of these is not a valid file system?",
                    "options": [
                        "NTFS",
                        "EXT3",
                        "BTRFS",
                        "TLS"
                    ],
                    "a": 3,
                    "ex": "TLS is a security protocol, not a file system."
                },
                {
                    "q": "What does 'mounting' a file system mean?",
                    "options": [
                        "Scanning the drive for viruses",
                        "Connecting the file system to the directory structure",
                        "Formatting the drive",
                        "Defragmenting the disk"
                    ],
                    "a": 1,
                    "ex": "Mounting makes a file system accessible within the system's directory tree."
                },
                {
                    "q": "What is a directory in a file system?",
                    "options": [
                        "A type of file",
                        "A file that stores other files",
                        "A compressed file",
                        "An executable file"
                    ],
                    "a": 1,
                    "ex": "A directory is a container that holds references to other files and directories."
                },
                {
                    "q": "Which file system is best for external drives with cross-platform support?",
                    "options": [
                        "FAT32",
                        "EXT4",
                        "NTFS",
                        "BTRFS"
                    ],
                    "a": 0,
                    "ex": "FAT32 is supported by Windows, Linux, and macOS, making it suitable for external drives."
                },
                {
                    "q": "Which command is used in Linux to list files?",
                    "options": [
                        "ls",
                        "dir",
                        "list",
                        "show"
                    ],
                    "a": 0,
                    "ex": "'ls' is the command used in Linux to list files in a directory."
                },
                {
                    "q": "What is file fragmentation?",
                    "options": [
                        "Files stored in non-contiguous blocks",
                        "Files deleted from disk",
                        "Files merged into one",
                        "Files encrypted for security"
                    ],
                    "a": 0,
                    "ex": "Fragmentation happens when a file is split into pieces scattered across the disk."
                },
                {
                    "q": "What is the purpose of defragmentation?",
                    "options": [
                        "To split files",
                        "To delete old files",
                        "To improve read/write performance",
                        "To increase storage capacity"
                    ],
                    "a": 2,
                    "ex": "Defragmentation reorganizes fragmented data to improve performance."
                },
                {
                    "q": "Which system call is used to open a file in C?",
                    "options": [
                        "fread()",
                        "fopen()",
                        "fclose()",
                        "openfile()"
                    ],
                    "a": 1,
                    "ex": "'fopen()' is used to open a file and associate a stream with it."
                },
                {
                    "q": "What does the file extension .txt indicate?",
                    "options": [
                        "Executable file",
                        "Text file",
                        "Compressed file",
                        "Image file"
                    ],
                    "a": 1,
                    "ex": ".txt files are plain text files that contain readable characters."
                },
                {
                    "q": "What does 'read-only' permission mean?",
                    "options": [
                        "The file can be edited",
                        "The file can be executed",
                        "The file can only be viewed",
                        "The file can be deleted"
                    ],
                    "a": 2,
                    "ex": "Read-only permission allows viewing but not editing or deleting the file."
                },
                {
                    "q": "Which is a hierarchical file structure?",
                    "options": [
                        "Flat",
                        "Tree",
                        "Linear",
                        "Graph"
                    ],
                    "a": 1,
                    "ex": "Modern file systems use a tree (hierarchical) structure for organizing files."
                },
                {
                    "q": "What happens when you delete a file in most OSes?",
                    "options": [
                        "The file is permanently removed",
                        "The file is moved to a recycle bin or trash",
                        "The file is encrypted",
                        "The file is backed up"
                    ],
                    "a": 1,
                    "ex": "Deleted files usually go to a temporary bin from which they can be restored."
                },
                {
                    "q": "What is metadata in a file system?",
                    "options": [
                        "The content of the file",
                        "Data about the file, like size and permissions",
                        "User data",
                        "Backup information"
                    ],
                    "a": 1,
                    "ex": "Metadata describes attributes of a file, such as its name, size, and timestamps."
                },
                {
                    "q": "Which command is used to change file permissions in Unix/Linux?",
                    "options": [
                        "chmod",
                        "chperm",
                        "setperm",
                        "chown"
                    ],
                    "a": 0,
                    "ex": "'chmod' changes the permission of a file or directory."
                },
                {
                    "q": "What is the function of the 'rm' command in Linux?",
                    "options": [
                        "Rename a file",
                        "Remove a file",
                        "Move a file",
                        "Read a file"
                    ],
                    "a": 1,
                    "ex": "'rm' command is used to delete files or directories."
                },
                {
                    "q": "What is the inode table used for?",
                    "options": [
                        "Storing user passwords",
                        "Mapping file names to metadata",
                        "Controlling RAM usage",
                        "Storing boot information"
                    ],
                    "a": 1,
                    "ex": "Inode tables contain metadata about files and directories."
                }
            ]
        },
        {
            "id": "scheduling-algorithms",
            "title": "Scheduling Algorithms",
            "questions": [
                {
                    "q": "Which scheduling algorithm executes jobs in the order they arrive?",
                    "options": [
                        "Shortest Job First",
                        "Round Robin",
                        "First Come First Serve",
                        "Priority Scheduling"
                    ],
                    "a": 2,
                    "ex": "FCFS processes tasks in the order they are received."
                },
                {
                    "q": "What is the drawback of FCFS scheduling?",
                    "options": [
                        "Starvation",
                        "Low CPU utilization",
                        "Convoy effect",
                        "Preemption"
                    ],
                    "a": 2,
                    "ex": "Convoy effect occurs when short processes wait for a long process to finish."
                },
                {
                    "q": "Which scheduling algorithm selects the process with the shortest expected processing time?",
                    "options": [
                        "Round Robin",
                        "FCFS",
                        "Shortest Job First",
                        "Priority Scheduling"
                    ],
                    "a": 2,
                    "ex": "SJF reduces the average waiting time for a set of processes."
                },
                {
                    "q": "Round Robin scheduling is most suitable for:",
                    "options": [
                        "Batch systems",
                        "Real-time systems",
                        "Time-sharing systems",
                        "Embedded systems"
                    ],
                    "a": 2,
                    "ex": "Round Robin is ideal for time-sharing systems due to its equal time allocation."
                },
                {
                    "q": "Which scheduling algorithm may cause starvation?",
                    "options": [
                        "Round Robin",
                        "FCFS",
                        "SJF",
                        "None"
                    ],
                    "a": 2,
                    "ex": "SJF can lead to starvation for longer processes."
                },
                {
                    "q": "Time quantum in Round Robin should be:",
                    "options": [
                        "Very large",
                        "Zero",
                        "Optimally small",
                        "None"
                    ],
                    "a": 2,
                    "ex": "A very small quantum increases context switching; too large mimics FCFS."
                },
                {
                    "q": "Which is a preemptive scheduling algorithm?",
                    "options": [
                        "FCFS",
                        "SJF",
                        "Round Robin",
                        "None"
                    ],
                    "a": 2,
                    "ex": "Round Robin uses time slices, making it preemptive."
                },
                {
                    "q": "What is the main goal of CPU scheduling?",
                    "options": [
                        "Minimize CPU usage",
                        "Maximize waiting time",
                        "Maximize throughput",
                        "Minimize job completion"
                    ],
                    "a": 2,
                    "ex": "CPU scheduling aims to maximize CPU utilization and throughput."
                },
                {
                    "q": "In priority scheduling, a lower number means:",
                    "options": [
                        "Higher priority",
                        "Lower priority",
                        "No effect",
                        "Random"
                    ],
                    "a": 0,
                    "ex": "Lower numerical values indicate higher priority."
                },
                {
                    "q": "A scheduling algorithm that allows interruption is called:",
                    "options": [
                        "Preemptive",
                        "Non-preemptive",
                        "Round Robin",
                        "Static"
                    ],
                    "a": 0,
                    "ex": "Preemptive algorithms allow tasks to be interrupted."
                },
                {
                    "q": "What causes starvation in priority scheduling?",
                    "options": [
                        "Equal priority tasks",
                        "High-priority tasks continuously arriving",
                        "Short tasks",
                        "Time slicing"
                    ],
                    "a": 1,
                    "ex": "If high-priority tasks keep arriving, low-priority ones may never execute."
                },
                {
                    "q": "Aging in priority scheduling is used to:",
                    "options": [
                        "Reset time quantum",
                        "Avoid deadlock",
                        "Prevent starvation",
                        "Increase CPU load"
                    ],
                    "a": 2,
                    "ex": "Aging gradually increases the priority of waiting tasks."
                },
                {
                    "q": "Which algorithm is used in most modern operating systems for multitasking?",
                    "options": [
                        "FCFS",
                        "SJF",
                        "Round Robin",
                        "Multilevel Queue"
                    ],
                    "a": 3,
                    "ex": "Multilevel queue scheduling is used for handling different process types."
                },
                {
                    "q": "Which is not a non-preemptive scheduling algorithm?",
                    "options": [
                        "FCFS",
                        "Priority (non-preemptive)",
                        "SJF (non-preemptive)",
                        "Round Robin"
                    ],
                    "a": 3,
                    "ex": "Round Robin is a preemptive scheduling algorithm."
                },
                {
                    "q": "Which of the following considers priority and arrival time?",
                    "options": [
                        "FCFS",
                        "SJF",
                        "Priority Scheduling",
                        "Multilevel Queue"
                    ],
                    "a": 3,
                    "ex": "Multilevel queues manage based on priority and arrival timing."
                },
                {
                    "q": "Which algorithm is best for minimizing average waiting time?",
                    "options": [
                        "FCFS",
                        "SJF",
                        "Round Robin",
                        "Priority"
                    ],
                    "a": 1,
                    "ex": "SJF provides the lowest average waiting time under ideal conditions."
                },
                {
                    "q": "Which algorithm works best when process lengths are similar?",
                    "options": [
                        "SJF",
                        "FCFS",
                        "Round Robin",
                        "Priority"
                    ],
                    "a": 2,
                    "ex": "Round Robin is more efficient when all processes take similar time."
                },
                {
                    "q": "Which algorithm uses multiple queues for different job types?",
                    "options": [
                        "FCFS",
                        "Multilevel Queue",
                        "SJF",
                        "Round Robin"
                    ],
                    "a": 1,
                    "ex": "Multilevel queue scheduling separates jobs by type and priority."
                },
                {
                    "q": "The term 'context switch' is associated with:",
                    "options": [
                        "Changing process state",
                        "Memory swapping",
                        "Disk I/O",
                        "File system"
                    ],
                    "a": 0,
                    "ex": "Context switch involves saving and restoring process state."
                },
                {
                    "q": "Which of these algorithms is suitable for real-time systems?",
                    "options": [
                        "SJF",
                        "FCFS",
                        "Earliest Deadline First",
                        "Round Robin"
                    ],
                    "a": 2,
                    "ex": "Earliest Deadline First is designed for real-time scheduling."
                },
                {
                    "q": "In multilevel feedback queue scheduling:",
                    "options": [
                        "All processes start in the same queue",
                        "No process moves between queues",
                        "Processes can move between queues",
                        "Only one queue is active"
                    ],
                    "a": 2,
                    "ex": "Processes can move to higher or lower priority queues."
                },
                {
                    "q": "Which algorithm favors shorter burst time but allows longer ones to execute eventually?",
                    "options": [
                        "FCFS",
                        "SJF",
                        "Round Robin",
                        "Multilevel Feedback Queue"
                    ],
                    "a": 3,
                    "ex": "MLFQ favors short jobs but includes aging to avoid starvation."
                },
                {
                    "q": "Which of these is NOT a CPU scheduling criterion?",
                    "options": [
                        "CPU utilization",
                        "Throughput",
                        "Latency",
                        "Disk speed"
                    ],
                    "a": 3,
                    "ex": "Disk speed is related to I/O, not CPU scheduling."
                },
                {
                    "q": "Turnaround time equals:",
                    "options": [
                        "Waiting time + burst time",
                        "Burst time - arrival time",
                        "Completion time - arrival time",
                        "Waiting time + arrival time"
                    ],
                    "a": 2,
                    "ex": "Turnaround time is the total time from arrival to completion."
                },
                {
                    "q": "In which case does Round Robin perform poorly?",
                    "options": [
                        "Uniform process length",
                        "I/O bound processes",
                        "Very short quantum",
                        "Long quantum"
                    ],
                    "a": 2,
                    "ex": "A very short time quantum increases overhead due to context switching."
                }
            ]
        },
        {
            "id": "arrays-strings",
            "title": "Arrays and Strings",
            "questions": [
                {
                    "q": "What is the time complexity of accessing an element in an array by index?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Array elements can be accessed directly using their index in constant time O(1)."
                },
                {
                    "q": "In most programming languages, array indexing starts from:",
                    "options": [
                        "0",
                        "1",
                        "-1",
                        "Depends on language"
                    ],
                    "a": 0,
                    "ex": "Most modern programming languages like C, Java, Python use 0-based indexing."
                },
                {
                    "q": "What is the maximum number of elements that can be stored in an array of size n?",
                    "options": [
                        "n-1",
                        "n",
                        "n+1",
                        "2n"
                    ],
                    "a": 1,
                    "ex": "An array of size n can store exactly n elements, indexed from 0 to n-1."
                },
                {
                    "q": "Which operation is NOT efficient on arrays?",
                    "options": [
                        "Random access",
                        "Insertion at beginning",
                        "Traversal",
                        "Binary search on sorted array"
                    ],
                    "a": 1,
                    "ex": "Insertion at the beginning requires shifting all existing elements, making it O(n)."
                },
                {
                    "q": "What is the space complexity of an array storing n integers?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "An array storing n elements requires O(n) space proportional to the number of elements."
                },
                {
                    "q": "In a 2D array arr[3][4], what is the total number of elements?",
                    "options": [
                        "7",
                        "12",
                        "3",
                        "4"
                    ],
                    "a": 1,
                    "ex": "A 2D array with dimensions 3×4 contains 3 × 4 = 12 elements total."
                },
                {
                    "q": "What happens when you try to access an array element beyond its bounds?",
                    "options": [
                        "Returns 0",
                        "Returns null",
                        "Undefined behavior/Exception",
                        "Creates new element"
                    ],
                    "a": 2,
                    "ex": "Accessing out-of-bounds elements causes undefined behavior in C/C++ or exceptions in Java/Python."
                },
                {
                    "q": "Which string operation has O(n) time complexity?",
                    "options": [
                        "Length calculation",
                        "Character access by index",
                        "String concatenation",
                        "All of the above"
                    ],
                    "a": 2,
                    "ex": "String concatenation typically requires O(n) time to copy characters to a new string."
                },
                {
                    "q": "In string matching, what is the time complexity of naive pattern searching?",
                    "options": [
                        "O(n)",
                        "O(m)",
                        "O(nm)",
                        "O(n+m)"
                    ],
                    "a": 2,
                    "ex": "Naive pattern searching compares pattern of length m with each position in text of length n, giving O(nm)."
                },
                {
                    "q": "What is the difference between mutable and immutable strings?",
                    "options": [
                        "No difference",
                        "Mutable can be changed, immutable cannot",
                        "Immutable is faster",
                        "Mutable uses less memory"
                    ],
                    "a": 1,
                    "ex": "Mutable strings can be modified after creation, while immutable strings create new objects for changes."
                },
                {
                    "q": "Which data structure is best for implementing a dynamic array?",
                    "options": [
                        "Static array",
                        "Linked list",
                        "Vector/ArrayList",
                        "Stack"
                    ],
                    "a": 2,
                    "ex": "Vector (C++) or ArrayList (Java) provide dynamic resizing capabilities for arrays."
                },
                {
                    "q": "What is the time complexity of finding the length of a null-terminated string?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Finding length requires traversing the entire string until null terminator, taking O(n) time."
                },
                {
                    "q": "In row-major order, how are 2D array elements stored in memory?",
                    "options": [
                        "Column by column",
                        "Row by row",
                        "Diagonally",
                        "Randomly"
                    ],
                    "a": 1,
                    "ex": "Row-major order stores elements row by row in contiguous memory locations."
                },
                {
                    "q": "What is the maximum number of comparisons needed for linear search in an array of n elements?",
                    "options": [
                        "n-1",
                        "n",
                        "n+1",
                        "2n"
                    ],
                    "a": 1,
                    "ex": "In worst case, linear search may need to check all n elements before finding the target."
                },
                {
                    "q": "Which algorithm is used for efficient string pattern matching?",
                    "options": [
                        "Bubble sort",
                        "KMP algorithm",
                        "Binary search",
                        "Quick sort"
                    ],
                    "a": 1,
                    "ex": "Knuth-Morris-Pratt (KMP) algorithm provides efficient O(n+m) string pattern matching."
                },
                {
                    "q": "What is a jagged array?",
                    "options": [
                        "Array with negative indices",
                        "2D array with rows of different lengths",
                        "Circular array",
                        "Sorted array"
                    ],
                    "a": 1,
                    "ex": "Jagged arrays are 2D arrays where each row can have a different number of columns."
                },
                {
                    "q": "In C/C++, what character marks the end of a string?",
                    "options": [
                        "\\0",
                        "\n",
                        "EOF",
                        "Space"
                    ],
                    "a": 0,
                    "ex": "C-style strings are null-terminated, ending with the null character \\0."
                },
                {
                    "q": "What is the time complexity of reversing an array in-place?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Reversing requires swapping elements from both ends, visiting each element once: O(n)."
                },
                {
                    "q": "Which operation is most efficient on a sorted array?",
                    "options": [
                        "Insertion",
                        "Deletion",
                        "Binary search",
                        "Linear search"
                    ],
                    "a": 2,
                    "ex": "Binary search on sorted arrays has O(log n) complexity, much better than O(n) linear search."
                },
                {
                    "q": "What is string interpolation?",
                    "options": [
                        "Sorting strings",
                        "Embedding variables in strings",
                        "Reversing strings",
                        "Comparing strings"
                    ],
                    "a": 1,
                    "ex": "String interpolation allows embedding variable values directly into string literals."
                },
                {
                    "q": "In array rotation, rotating [1,2,3,4,5] left by 2 positions gives:",
                    "options": [
                        "[3,4,5,1,2]",
                        "[4,5,1,2,3]",
                        "[2,3,4,5,1]",
                        "[5,1,2,3,4]"
                    ],
                    "a": 0,
                    "ex": "Left rotation by 2 moves first 2 elements to the end: [1,2,3,4,5] → [3,4,5,1,2]."
                },
                {
                    "q": "What is the space complexity of merge sort for arrays?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Merge sort requires O(n) auxiliary space for the temporary arrays during merging."
                },
                {
                    "q": "Which string comparison method is case-insensitive?",
                    "options": [
                        "strcmp()",
                        "strcasecmp()",
                        "==",
                        "equals()"
                    ],
                    "a": 1,
                    "ex": "strcasecmp() performs case-insensitive string comparison in C."
                },
                {
                    "q": "What is the advantage of using StringBuilder over String concatenation?",
                    "options": [
                        "Uses less memory",
                        "Faster for multiple concatenations",
                        "Thread-safe",
                        "Immutable"
                    ],
                    "a": 1,
                    "ex": "StringBuilder avoids creating multiple intermediate string objects, making it faster for multiple concatenations."
                },
                {
                    "q": "In dynamic arrays, what happens when capacity is exceeded?",
                    "options": [
                        "Error occurs",
                        "Array is resized",
                        "Oldest elements are removed",
                        "New elements are ignored"
                    ],
                    "a": 1,
                    "ex": "Dynamic arrays automatically resize (usually doubling capacity) when more space is needed."
                },
                {
                    "q": "What is the time complexity of checking if two strings are anagrams?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(n log n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "One approach is to sort both strings and compare, which takes O(n log n) time."
                },
                {
                    "q": "Which array traversal visits elements in reverse order?",
                    "options": [
                        "Forward traversal",
                        "Backward traversal",
                        "Random traversal",
                        "Binary traversal"
                    ],
                    "a": 1,
                    "ex": "Backward traversal starts from the last index and moves toward the first index."
                },
                {
                    "q": "What is a palindrome string?",
                    "options": [
                        "String with only alphabets",
                        "String that reads same forwards and backwards",
                        "String with even length",
                        "String with unique characters"
                    ],
                    "a": 1,
                    "ex": "A palindrome reads the same forwards and backwards, like 'radar' or 'level'."
                },
                {
                    "q": "In matrix multiplication, what must be true about dimensions?",
                    "options": [
                        "Both matrices must be square",
                        "Columns of first = Rows of second",
                        "Both matrices same size",
                        "No restrictions"
                    ],
                    "a": 1,
                    "ex": "For A×B multiplication, number of columns in A must equal number of rows in B."
                },
                {
                    "q": "What is the Boyer-Moore algorithm used for?",
                    "options": [
                        "Sorting arrays",
                        "String pattern matching",
                        "Graph traversal",
                        "Tree balancing"
                    ],
                    "a": 1,
                    "ex": "Boyer-Moore is an efficient string searching algorithm that can skip characters during pattern matching."
                }
            ]
        },
        {
            "id": "stacks-queues",
            "title": "Stacks and Queues",
            "questions": [
                {
                    "q": "What principle does a stack follow?",
                    "options": [
                        "FIFO",
                        "LIFO",
                        "Random access",
                        "Priority-based"
                    ],
                    "a": 1,
                    "ex": "Stack follows Last In First Out (LIFO) principle where the last element added is the first to be removed."
                },
                {
                    "q": "What principle does a queue follow?",
                    "options": [
                        "LIFO",
                        "FIFO",
                        "Random access",
                        "Priority-based"
                    ],
                    "a": 1,
                    "ex": "Queue follows First In First Out (FIFO) principle where the first element added is the first to be removed."
                },
                {
                    "q": "Which operation adds an element to a stack?",
                    "options": [
                        "Push",
                        "Pop",
                        "Peek",
                        "Enqueue"
                    ],
                    "a": 0,
                    "ex": "Push operation adds an element to the top of the stack."
                },
                {
                    "q": "Which operation removes an element from a queue?",
                    "options": [
                        "Push",
                        "Pop",
                        "Dequeue",
                        "Peek"
                    ],
                    "a": 2,
                    "ex": "Dequeue operation removes an element from the front of the queue."
                },
                {
                    "q": "What happens when you try to pop from an empty stack?",
                    "options": [
                        "Returns null",
                        "Returns 0",
                        "Stack underflow",
                        "Creates new element"
                    ],
                    "a": 2,
                    "ex": "Attempting to pop from an empty stack results in stack underflow condition."
                },
                {
                    "q": "What is the time complexity of push and pop operations in a stack?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Both push and pop operations in a stack take constant time O(1)."
                },
                {
                    "q": "Which data structure is used to implement function calls?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Linked List"
                    ],
                    "a": 1,
                    "ex": "Function call stack uses stack data structure to manage function calls and returns."
                },
                {
                    "q": "What is a circular queue?",
                    "options": [
                        "Queue with no end",
                        "Queue where rear connects to front",
                        "Queue with circular elements",
                        "Queue with infinite size"
                    ],
                    "a": 1,
                    "ex": "Circular queue treats storage as circular, where rear pointer wraps around to connect with front."
                },
                {
                    "q": "Which application commonly uses stacks?",
                    "options": [
                        "BFS traversal",
                        "Expression evaluation",
                        "Process scheduling",
                        "Printer queue"
                    ],
                    "a": 1,
                    "ex": "Stacks are used for expression evaluation, particularly for handling operator precedence and parentheses."
                },
                {
                    "q": "What is a priority queue?",
                    "options": [
                        "Queue with multiple levels",
                        "Queue where elements have priorities",
                        "Queue with faster operations",
                        "Queue with limited size"
                    ],
                    "a": 1,
                    "ex": "Priority queue serves elements based on their priority rather than insertion order."
                },
                {
                    "q": "In postfix expression evaluation, which data structure is used?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Tree"
                    ],
                    "a": 1,
                    "ex": "Stack is used to evaluate postfix expressions by pushing operands and popping for operations."
                },
                {
                    "q": "What is a double-ended queue (deque)?",
                    "options": [
                        "Queue with two elements",
                        "Queue allowing insertion/deletion at both ends",
                        "Queue with double capacity",
                        "Queue with two priorities"
                    ],
                    "a": 1,
                    "ex": "Deque allows insertion and deletion operations at both front and rear ends."
                },
                {
                    "q": "Which traversal algorithm uses a queue?",
                    "options": [
                        "DFS",
                        "BFS",
                        "Preorder",
                        "Postorder"
                    ],
                    "a": 1,
                    "ex": "Breadth-First Search (BFS) uses a queue to visit nodes level by level."
                },
                {
                    "q": "What is stack overflow?",
                    "options": [
                        "Stack is empty",
                        "Stack exceeds maximum size",
                        "Stack operation fails",
                        "Stack becomes circular"
                    ],
                    "a": 1,
                    "ex": "Stack overflow occurs when trying to push elements beyond the stack's maximum capacity."
                },
                {
                    "q": "In infix to postfix conversion, which data structure is used?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Tree"
                    ],
                    "a": 1,
                    "ex": "Stack is used to handle operators and parentheses during infix to postfix conversion."
                },
                {
                    "q": "What is the space complexity of a stack with n elements?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "A stack storing n elements requires O(n) space proportional to the number of elements."
                },
                {
                    "q": "Which operation checks the top element of a stack without removing it?",
                    "options": [
                        "Push",
                        "Pop",
                        "Peek/Top",
                        "Size"
                    ],
                    "a": 2,
                    "ex": "Peek or Top operation returns the top element without removing it from the stack."
                },
                {
                    "q": "In a queue implementation using arrays, what indicates an empty queue?",
                    "options": [
                        "Front = Rear",
                        "Front > Rear",
                        "Front = -1",
                        "Rear = -1"
                    ],
                    "a": 0,
                    "ex": "When front equals rear, it typically indicates an empty queue in array implementation."
                },
                {
                    "q": "What is the main advantage of implementing stack using linked list?",
                    "options": [
                        "Faster operations",
                        "Dynamic size",
                        "Less memory usage",
                        "Random access"
                    ],
                    "a": 1,
                    "ex": "Linked list implementation allows dynamic sizing without predefined capacity limits."
                },
                {
                    "q": "Which scenario is best suited for using a queue?",
                    "options": [
                        "Undo operations",
                        "Process scheduling",
                        "Expression evaluation",
                        "Function calls"
                    ],
                    "a": 1,
                    "ex": "Queues are ideal for process scheduling where first-come-first-served order is maintained."
                },
                {
                    "q": "What is the result of the following stack operations: push(1), push(2), pop(), push(3), pop()?",
                    "options": [
                        "Stack contains: 1",
                        "Stack contains: 2",
                        "Stack contains: 3",
                        "Stack is empty"
                    ],
                    "a": 0,
                    "ex": "After push(1), push(2), pop() removes 2, push(3), pop() removes 3, leaving only 1 in stack."
                },
                {
                    "q": "In a circular queue of size 5, if front=2 and rear=1, how many elements are there?",
                    "options": [
                        "0",
                        "3",
                        "4",
                        "5"
                    ],
                    "a": 2,
                    "ex": "In circular queue, when rear < front, elements = (size - front + rear + 1) = 5-2+1+1 = 5, but since rear=1 and front=2, there are 4 elements."
                },
                {
                    "q": "Which data structure would you use for implementing browser back button?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Tree"
                    ],
                    "a": 1,
                    "ex": "Stack is perfect for browser history as the most recently visited page should be accessed first (LIFO)."
                },
                {
                    "q": "What is the time complexity of enqueue and dequeue operations in a queue?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Both enqueue and dequeue operations in a properly implemented queue take constant time O(1)."
                },
                {
                    "q": "In which order will elements be removed from a stack containing [1,2,3,4] (4 on top)?",
                    "options": [
                        "1,2,3,4",
                        "4,3,2,1",
                        "1,3,2,4",
                        "2,4,1,3"
                    ],
                    "a": 1,
                    "ex": "Stack follows LIFO, so elements are removed in reverse order of insertion: 4,3,2,1."
                },
                {
                    "q": "What is a monotonic stack?",
                    "options": [
                        "Stack with single element",
                        "Stack with elements in monotonic order",
                        "Stack that never changes",
                        "Stack with identical elements"
                    ],
                    "a": 1,
                    "ex": "Monotonic stack maintains elements in either increasing or decreasing order."
                },
                {
                    "q": "Which application uses queue data structure?",
                    "options": [
                        "Recursion",
                        "Backtracking",
                        "CPU scheduling",
                        "Expression parsing"
                    ],
                    "a": 2,
                    "ex": "CPU scheduling algorithms like Round Robin use queues to manage process execution order."
                },
                {
                    "q": "What happens in queue overflow?",
                    "options": [
                        "Queue becomes empty",
                        "Queue exceeds capacity",
                        "Queue reverses order",
                        "Queue becomes circular"
                    ],
                    "a": 1,
                    "ex": "Queue overflow occurs when trying to enqueue elements beyond the queue's maximum capacity."
                },
                {
                    "q": "In balanced parentheses checking, which data structure is most suitable?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Tree"
                    ],
                    "a": 1,
                    "ex": "Stack is ideal for checking balanced parentheses by pushing opening brackets and popping for closing ones."
                },
                {
                    "q": "What is the main disadvantage of array-based queue implementation?",
                    "options": [
                        "Slow operations",
                        "Fixed size",
                        "Complex implementation",
                        "High memory usage"
                    ],
                    "a": 1,
                    "ex": "Array-based queues have fixed size limitation and may waste space due to false overflow conditions."
                }
            ]
        },
        {
            "id": "linked-lists",
            "title": "Linked Lists",
            "questions": [
                {
                    "q": "What is the basic building block of a linked list?",
                    "options": [
                        "Array",
                        "Node",
                        "Pointer",
                        "Index"
                    ],
                    "a": 1,
                    "ex": "A node is the basic unit containing data and a reference/pointer to the next node."
                },
                {
                    "q": "What is the time complexity of inserting an element at the beginning of a singly linked list?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Insertion at the beginning requires only updating the head pointer, taking constant time O(1)."
                },
                {
                    "q": "What is the time complexity of searching for an element in a linked list?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Searching requires traversing the list from head to find the element, taking O(n) time in worst case."
                },
                {
                    "q": "In a singly linked list, each node contains:",
                    "options": [
                        "Only data",
                        "Data and next pointer",
                        "Data and previous pointer",
                        "Data, next and previous pointers"
                    ],
                    "a": 1,
                    "ex": "Singly linked list nodes contain data and a pointer/reference to the next node."
                },
                {
                    "q": "What is the main advantage of linked lists over arrays?",
                    "options": [
                        "Faster access",
                        "Less memory usage",
                        "Dynamic size",
                        "Better cache performance"
                    ],
                    "a": 2,
                    "ex": "Linked lists can grow or shrink during runtime, providing dynamic memory allocation."
                },
                {
                    "q": "What does NULL/None pointer in the last node of a linked list signify?",
                    "options": [
                        "Error in list",
                        "End of list",
                        "Beginning of list",
                        "Empty node"
                    ],
                    "a": 1,
                    "ex": "NULL pointer in the last node indicates the end of the linked list."
                },
                {
                    "q": "In a doubly linked list, each node has:",
                    "options": [
                        "One pointer",
                        "Two pointers",
                        "Three pointers",
                        "No pointers"
                    ],
                    "a": 1,
                    "ex": "Doubly linked list nodes have two pointers: one to the next node and one to the previous node."
                },
                {
                    "q": "What is the time complexity of deleting the last node in a singly linked list?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "To delete the last node, we need to traverse to find the second-to-last node, taking O(n) time."
                },
                {
                    "q": "Which operation is more efficient in doubly linked list compared to singly linked list?",
                    "options": [
                        "Insertion at beginning",
                        "Deletion of given node",
                        "Searching",
                        "Traversal"
                    ],
                    "a": 1,
                    "ex": "Deletion of a given node is O(1) in doubly linked list as we can directly access previous node."
                },
                {
                    "q": "What is a circular linked list?",
                    "options": [
                        "List with no nodes",
                        "List where last node points to first",
                        "List with circular data",
                        "List with infinite nodes"
                    ],
                    "a": 1,
                    "ex": "In circular linked list, the last node points back to the first node instead of NULL."
                },
                {
                    "q": "How do you detect a cycle in a linked list?",
                    "options": [
                        "Linear traversal",
                        "Floyd's cycle detection",
                        "Binary search",
                        "Sorting"
                    ],
                    "a": 1,
                    "ex": "Floyd's cycle detection algorithm (tortoise and hare) uses two pointers moving at different speeds."
                },
                {
                    "q": "What is the space complexity of a linked list with n nodes?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Each node requires space for data and pointer(s), so total space is O(n) for n nodes."
                },
                {
                    "q": "In which scenario would you prefer linked list over array?",
                    "options": [
                        "Random access needed",
                        "Frequent insertions/deletions",
                        "Cache performance important",
                        "Indexing required"
                    ],
                    "a": 1,
                    "ex": "Linked lists are better when frequent insertions and deletions are needed at arbitrary positions."
                },
                {
                    "q": "What is the head pointer in a linked list?",
                    "options": [
                        "Last node",
                        "First node reference",
                        "Middle node",
                        "Largest element"
                    ],
                    "a": 1,
                    "ex": "Head pointer stores the reference/address of the first node in the linked list."
                },
                {
                    "q": "How do you reverse a singly linked list?",
                    "options": [
                        "Sort the list",
                        "Use three pointers",
                        "Create new list",
                        "Use recursion only"
                    ],
                    "a": 1,
                    "ex": "Reversing requires three pointers (previous, current, next) to change link directions iteratively."
                },
                {
                    "q": "What happens when you try to access a node after the tail in a singly linked list?",
                    "options": [
                        "Returns first node",
                        "Returns NULL",
                        "Creates new node",
                        "Throws exception"
                    ],
                    "a": 1,
                    "ex": "Following the next pointer of the tail node leads to NULL, indicating end of list."
                },
                {
                    "q": "Which traversal is possible in a singly linked list?",
                    "options": [
                        "Forward only",
                        "Backward only",
                        "Both directions",
                        "Random access"
                    ],
                    "a": 0,
                    "ex": "Singly linked lists can only be traversed in forward direction from head to tail."
                },
                {
                    "q": "What is the time complexity of finding the middle element of a linked list?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Finding middle requires traversing the list, which takes O(n) time (can be optimized to single pass)."
                },
                {
                    "q": "In a doubly linked list, what does the previous pointer of the first node point to?",
                    "options": [
                        "Last node",
                        "NULL",
                        "Second node",
                        "Itself"
                    ],
                    "a": 1,
                    "ex": "The previous pointer of the first node points to NULL, indicating no previous node exists."
                },
                {
                    "q": "What is the main disadvantage of linked lists?",
                    "options": [
                        "Dynamic size",
                        "Sequential access only",
                        "Easy insertion",
                        "Memory efficient"
                    ],
                    "a": 1,
                    "ex": "Linked lists require sequential access and don't support random access like arrays."
                },
                {
                    "q": "How do you merge two sorted linked lists?",
                    "options": [
                        "Concatenate and sort",
                        "Use two pointers",
                        "Convert to arrays",
                        "Use stack"
                    ],
                    "a": 1,
                    "ex": "Merging sorted lists uses two pointers to compare elements and build result list in sorted order."
                },
                {
                    "q": "What is a self-referential structure?",
                    "options": [
                        "Structure pointing to itself",
                        "Structure with same data type pointer",
                        "Circular structure",
                        "Recursive structure"
                    ],
                    "a": 1,
                    "ex": "Self-referential structure contains a pointer to the same structure type, used in linked lists."
                },
                {
                    "q": "Which memory allocation is used for linked list nodes?",
                    "options": [
                        "Static",
                        "Dynamic",
                        "Stack",
                        "Register"
                    ],
                    "a": 1,
                    "ex": "Linked list nodes are typically allocated dynamically using malloc/new during runtime."
                },
                {
                    "q": "What is the time complexity of inserting at a specific position in a linked list?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "To insert at position k, we need to traverse k nodes first, making it O(n) operation."
                },
                {
                    "q": "How do you find the nth node from the end in a linked list?",
                    "options": [
                        "Reverse and find nth",
                        "Two-pointer technique",
                        "Use array",
                        "Multiple traversals"
                    ],
                    "a": 1,
                    "ex": "Two-pointer technique: move first pointer n steps ahead, then move both until first reaches end."
                },
                {
                    "q": "What is the advantage of circular linked list over singly linked list?",
                    "options": [
                        "Faster search",
                        "Can traverse from any node",
                        "Less memory",
                        "Better sorting"
                    ],
                    "a": 1,
                    "ex": "Circular linked lists allow traversal of entire list starting from any node."
                },
                {
                    "q": "In linked list implementation of stack, where do push and pop operations occur?",
                    "options": [
                        "At tail",
                        "At head",
                        "At middle",
                        "At random position"
                    ],
                    "a": 1,
                    "ex": "Stack operations using linked list are performed at the head for O(1) time complexity."
                },
                {
                    "q": "What is memory fragmentation in context of linked lists?",
                    "options": [
                        "Nodes not in sequence",
                        "Memory leaks",
                        "Pointer corruption",
                        "Stack overflow"
                    ],
                    "a": 0,
                    "ex": "Memory fragmentation occurs when linked list nodes are scattered in memory, affecting cache performance."
                },
                {
                    "q": "How do you remove duplicates from an unsorted linked list?",
                    "options": [
                        "Sort first",
                        "Use hash table",
                        "Multiple passes",
                        "Recursive approach"
                    ],
                    "a": 1,
                    "ex": "Hash table can track seen elements while traversing, allowing O(n) duplicate removal."
                },
                {
                    "q": "What is the Floyd's cycle detection algorithm also known as?",
                    "options": [
                        "Binary search",
                        "Tortoise and Hare",
                        "Divide and conquer",
                        "Greedy approach"
                    ],
                    "a": 1,
                    "ex": "Floyd's algorithm is called 'Tortoise and Hare' due to slow and fast pointer movement analogy."
                }
            ]
        },
        {
            "id": "trees-graphs",
            "title": "Trees and Graphs",
            "questions": [
                {
                    "q": "What is the maximum number of children a node can have in a binary tree?",
                    "options": [
                        "1",
                        "2",
                        "3",
                        "Unlimited"
                    ],
                    "a": 1,
                    "ex": "Binary trees are defined as trees where each node has at most 2 children (left and right)."
                },
                {
                    "q": "What is the height of a tree with only one node (root)?",
                    "options": [
                        "0",
                        "1",
                        "-1",
                        "Undefined"
                    ],
                    "a": 0,
                    "ex": "Height is defined as the number of edges from root to deepest leaf. Single node has height 0."
                },
                {
                    "q": "In a Binary Search Tree (BST), the left subtree contains values:",
                    "options": [
                        "Greater than root",
                        "Less than root",
                        "Equal to root",
                        "Random values"
                    ],
                    "a": 1,
                    "ex": "BST property: left subtree contains values less than root, right subtree contains greater values."
                },
                {
                    "q": "What is the time complexity of searching in a balanced BST?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Balanced BST allows binary search approach, eliminating half the nodes at each step: O(log n)."
                },
                {
                    "q": "Which traversal visits nodes in the order: Left, Root, Right?",
                    "options": [
                        "Preorder",
                        "Inorder",
                        "Postorder",
                        "Level order"
                    ],
                    "a": 1,
                    "ex": "Inorder traversal visits left subtree, then root, then right subtree."
                },
                {
                    "q": "What data structure is used for Level Order traversal of a tree?",
                    "options": [
                        "Stack",
                        "Queue",
                        "Array",
                        "Linked List"
                    ],
                    "a": 1,
                    "ex": "Level order traversal uses queue to visit nodes level by level (BFS approach)."
                },
                {
                    "q": "In a complete binary tree with n nodes, what is the height?",
                    "options": [
                        "n",
                        "log n",
                        "⌊log₂ n⌋",
                        "⌈log₂(n+1)⌉ - 1"
                    ],
                    "a": 3,
                    "ex": "Complete binary tree height is ⌈log₂(n+1)⌉ - 1, where ⌈⌉ is ceiling function."
                },
                {
                    "q": "What is a leaf node in a tree?",
                    "options": [
                        "Root node",
                        "Node with no children",
                        "Node with one child",
                        "Node with maximum value"
                    ],
                    "a": 1,
                    "ex": "Leaf nodes are terminal nodes that have no children (degree = 0)."
                },
                {
                    "q": "Which graph representation is better for dense graphs?",
                    "options": [
                        "Adjacency List",
                        "Adjacency Matrix",
                        "Edge List",
                        "Incidence Matrix"
                    ],
                    "a": 1,
                    "ex": "Adjacency matrix is more space-efficient for dense graphs with many edges."
                },
                {
                    "q": "What is the space complexity of DFS traversal?",
                    "options": [
                        "O(1)",
                        "O(V)",
                        "O(E)",
                        "O(V + E)"
                    ],
                    "a": 1,
                    "ex": "DFS uses stack (recursion or explicit) that can go as deep as V vertices in worst case."
                },
                {
                    "q": "In which tree traversal do we get sorted order for a BST?",
                    "options": [
                        "Preorder",
                        "Inorder",
                        "Postorder",
                        "Level order"
                    ],
                    "a": 1,
                    "ex": "Inorder traversal of BST visits nodes in ascending sorted order due to BST property."
                },
                {
                    "q": "What is a strongly connected graph?",
                    "options": [
                        "Graph with no cycles",
                        "Directed graph where every vertex is reachable from every other",
                        "Graph with minimum edges",
                        "Undirected connected graph"
                    ],
                    "a": 1,
                    "ex": "Strongly connected directed graph has a directed path between every pair of vertices."
                },
                {
                    "q": "What is the minimum number of edges in a connected graph with V vertices?",
                    "options": [
                        "V",
                        "V-1",
                        "V+1",
                        "V²"
                    ],
                    "a": 1,
                    "ex": "A tree is the minimum connected graph, requiring exactly V-1 edges for V vertices."
                },
                {
                    "q": "Which algorithm is used to find shortest path in unweighted graphs?",
                    "options": [
                        "DFS",
                        "BFS",
                        "Dijkstra",
                        "Floyd-Warshall"
                    ],
                    "a": 1,
                    "ex": "BFS finds shortest path in unweighted graphs by exploring nodes level by level."
                },
                {
                    "q": "What is the degree of a vertex in an undirected graph?",
                    "options": [
                        "Number of incoming edges",
                        "Number of outgoing edges",
                        "Number of adjacent vertices",
                        "Number of paths from vertex"
                    ],
                    "a": 2,
                    "ex": "Degree is the number of edges incident to the vertex, equal to number of adjacent vertices."
                },
                {
                    "q": "In a binary heap, the parent of node at index i is at index:",
                    "options": [
                        "2i",
                        "2i+1",
                        "⌊(i-1)/2⌋",
                        "i-1"
                    ],
                    "a": 2,
                    "ex": "In 0-indexed array representation, parent of node at index i is at ⌊(i-1)/2⌋."
                },
                {
                    "q": "What is a spanning tree of a graph?",
                    "options": [
                        "Tree with maximum edges",
                        "Subgraph that includes all vertices and is a tree",
                        "Tree with minimum weight",
                        "Complete tree"
                    ],
                    "a": 1,
                    "ex": "Spanning tree is a subgraph that includes all vertices and forms a tree (connected, acyclic)."
                },
                {
                    "q": "Which traversal is used to detect cycles in directed graphs?",
                    "options": [
                        "BFS",
                        "DFS with coloring",
                        "Level order",
                        "Inorder"
                    ],
                    "a": 1,
                    "ex": "DFS with three colors (white, gray, black) can detect back edges indicating cycles in directed graphs."
                },
                {
                    "q": "What is the time complexity of inserting a node in a balanced binary tree?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n log n)"
                    ],
                    "a": 1,
                    "ex": "Balanced binary tree maintains O(log n) height, so insertion takes O(log n) time."
                },
                {
                    "q": "In topological sorting, what type of graph is required?",
                    "options": [
                        "Undirected",
                        "Directed Acyclic Graph (DAG)",
                        "Complete graph",
                        "Bipartite graph"
                    ],
                    "a": 1,
                    "ex": "Topological sorting is only possible for Directed Acyclic Graphs (DAGs)."
                },
                {
                    "q": "What is the maximum number of nodes at level k in a binary tree?",
                    "options": [
                        "k",
                        "2k",
                        "2^k",
                        "2^(k+1)"
                    ],
                    "a": 2,
                    "ex": "At level k (0-indexed), maximum nodes = 2^k. Level 0 has 2^0=1, level 1 has 2^1=2, etc."
                },
                {
                    "q": "Which property defines an AVL tree?",
                    "options": [
                        "Complete binary tree",
                        "Height difference of subtrees ≤ 1",
                        "All leaves at same level",
                        "Sorted inorder traversal"
                    ],
                    "a": 1,
                    "ex": "AVL tree is a self-balancing BST where height difference between left and right subtrees is at most 1."
                },
                {
                    "q": "What is the time complexity of BFS traversal?",
                    "options": [
                        "O(V)",
                        "O(E)",
                        "O(V + E)",
                        "O(V × E)"
                    ],
                    "a": 2,
                    "ex": "BFS visits all vertices (V) and explores all edges (E), giving time complexity O(V + E)."
                },
                {
                    "q": "In a min-heap, the smallest element is located at:",
                    "options": [
                        "Any leaf",
                        "Root",
                        "Last level",
                        "Middle"
                    ],
                    "a": 1,
                    "ex": "Min-heap property ensures the smallest element is always at the root of the tree."
                },
                {
                    "q": "What is a bipartite graph?",
                    "options": [
                        "Graph with two components",
                        "Graph whose vertices can be divided into two disjoint sets",
                        "Graph with two types of edges",
                        "Graph with exactly two vertices"
                    ],
                    "a": 1,
                    "ex": "Bipartite graph vertices can be colored with two colors such that no adjacent vertices have same color."
                },
                {
                    "q": "Which algorithm finds Minimum Spanning Tree?",
                    "options": [
                        "Dijkstra",
                        "BFS",
                        "Kruskal's algorithm",
                        "Topological sort"
                    ],
                    "a": 2,
                    "ex": "Kruskal's algorithm (and Prim's algorithm) finds Minimum Spanning Tree by selecting minimum weight edges."
                },
                {
                    "q": "What is the postorder traversal sequence for a tree with preorder: A,B,C and inorder: B,A,C?",
                    "options": [
                        "B,C,A",
                        "C,B,A",
                        "A,B,C",
                        "B,A,C"
                    ],
                    "a": 0,
                    "ex": "From preorder and inorder, we can construct tree: A is root, B is left child, C is right child. Postorder: B,C,A."
                },
                {
                    "q": "What is the space complexity of adjacency matrix representation?",
                    "options": [
                        "O(V)",
                        "O(E)",
                        "O(V²)",
                        "O(V + E)"
                    ],
                    "a": 2,
                    "ex": "Adjacency matrix requires V×V space to store connections between all pairs of vertices."
                },
                {
                    "q": "In a Red-Black tree, what colors can nodes have?",
                    "options": [
                        "Red only",
                        "Black only",
                        "Red and Black",
                        "Red, Black, and White"
                    ],
                    "a": 2,
                    "ex": "Red-Black trees use red and black colors with specific coloring rules to maintain balance."
                },
                {
                    "q": "What is the maximum number of edges in a simple undirected graph with V vertices?",
                    "options": [
                        "V",
                        "V-1",
                        "V(V-1)/2",
                        "V²"
                    ],
                    "a": 2,
                    "ex": "Complete graph has maximum edges: each vertex connects to V-1 others, giving V(V-1)/2 unique edges."
                }
            ]
        },
        {
            "id": "searching-algorithms",
            "title": "Searching Algorithms (Linear, Binary)",
            "questions": [
                {
                    "q": "What is the time complexity of linear search in the worst case?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Linear search may need to check all n elements in worst case when element is at end or not present."
                },
                {
                    "q": "What is the prerequisite for binary search?",
                    "options": [
                        "Array should be sorted",
                        "Array should be unsorted",
                        "Array should have unique elements",
                        "Array should be of even size"
                    ],
                    "a": 0,
                    "ex": "Binary search requires the array to be sorted to eliminate half the search space at each step."
                },
                {
                    "q": "What is the time complexity of binary search?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n log n)"
                    ],
                    "a": 1,
                    "ex": "Binary search divides search space by half at each step, resulting in O(log n) time complexity."
                },
                {
                    "q": "In linear search, what is the best case time complexity?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Best case occurs when the target element is found at the first position, taking constant time O(1)."
                },
                {
                    "q": "What is the space complexity of iterative binary search?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Iterative binary search uses only a few variables (low, high, mid), requiring constant space O(1)."
                },
                {
                    "q": "In binary search, if the target is smaller than middle element, we search in:",
                    "options": [
                        "Right half",
                        "Left half",
                        "Both halves",
                        "Entire array again"
                    ],
                    "a": 1,
                    "ex": "Since array is sorted, if target < middle, it can only be in the left half of current search space."
                },
                {
                    "q": "What happens in linear search when the element is not found?",
                    "options": [
                        "Returns first element",
                        "Returns -1 or null",
                        "Throws exception",
                        "Returns middle element"
                    ],
                    "a": 1,
                    "ex": "Linear search typically returns -1 or null/None to indicate the element was not found in the array."
                },
                {
                    "q": "How many comparisons are needed in binary search for an array of 1000 elements in worst case?",
                    "options": [
                        "10",
                        "⌈log₂ 1000⌉",
                        "1000",
                        "500"
                    ],
                    "a": 1,
                    "ex": "Binary search worst case is ⌈log₂ n⌉ comparisons. For 1000 elements: ⌈log₂ 1000⌉ ≈ 10."
                },
                {
                    "q": "Which search algorithm is better for unsorted arrays?",
                    "options": [
                        "Binary search",
                        "Linear search",
                        "Both are equal",
                        "Neither works"
                    ],
                    "a": 1,
                    "ex": "Binary search requires sorted array, so linear search is the only option for unsorted arrays."
                },
                {
                    "q": "What is the average case time complexity of linear search?",
                    "options": [
                        "O(1)",
                        "O(n/2)",
                        "O(n)",
                        "O(log n)"
                    ],
                    "a": 2,
                    "ex": "Average case still has O(n) complexity as we expect to find element around middle position (n/2 comparisons)."
                },
                {
                    "q": "In binary search, what is the initial value of 'high' pointer for array of size n?",
                    "options": [
                        "n",
                        "n-1",
                        "n/2",
                        "0"
                    ],
                    "a": 1,
                    "ex": "For 0-indexed array of size n, valid indices are 0 to n-1, so high is initialized to n-1."
                },
                {
                    "q": "What is the space complexity of recursive binary search?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Recursive binary search uses call stack with maximum depth of log n, requiring O(log n) space."
                },
                {
                    "q": "Linear search is also known as:",
                    "options": [
                        "Binary search",
                        "Sequential search",
                        "Random search",
                        "Parallel search"
                    ],
                    "a": 1,
                    "ex": "Linear search is called sequential search because it checks elements one by one in sequence."
                },
                {
                    "q": "When is linear search preferred over binary search?",
                    "options": [
                        "Array is sorted",
                        "Array is large",
                        "Array is small or unsorted",
                        "Never"
                    ],
                    "a": 2,
                    "ex": "Linear search is preferred for small arrays or when array is unsorted and sorting cost is high."
                },
                {
                    "q": "What is the termination condition for binary search?",
                    "options": [
                        "low > high",
                        "low = high",
                        "mid = target",
                        "Array is empty"
                    ],
                    "a": 0,
                    "ex": "Binary search terminates when low > high, indicating the search space is exhausted."
                },
                {
                    "q": "In binary search, how is the middle index calculated?",
                    "options": [
                        "(low + high) / 2",
                        "low + (high - low) / 2",
                        "Both A and B",
                        "high / 2"
                    ],
                    "a": 2,
                    "ex": "Both formulas work, but low + (high - low) / 2 prevents integer overflow for large indices."
                },
                {
                    "q": "What is the maximum number of elements that can be eliminated in one comparison in binary search?",
                    "options": [
                        "1",
                        "n/2",
                        "n-1",
                        "Depends on array"
                    ],
                    "a": 1,
                    "ex": "Binary search eliminates approximately half of the remaining elements in each comparison."
                },
                {
                    "q": "Which search is more suitable for linked lists?",
                    "options": [
                        "Binary search",
                        "Linear search",
                        "Both equal",
                        "Neither"
                    ],
                    "a": 1,
                    "ex": "Linked lists don't support random access needed for binary search, so linear search is used."
                },
                {
                    "q": "What is interpolation search?",
                    "options": [
                        "Modified linear search",
                        "Modified binary search",
                        "Parallel search",
                        "Random search"
                    ],
                    "a": 1,
                    "ex": "Interpolation search is an improved binary search that estimates position based on value distribution."
                },
                {
                    "q": "In binary search, if array has duplicate elements, which occurrence is typically found?",
                    "options": [
                        "First",
                        "Last",
                        "Any occurrence",
                        "Middle occurrence"
                    ],
                    "a": 2,
                    "ex": "Standard binary search finds any occurrence of duplicate elements, not necessarily first or last."
                },
                {
                    "q": "What is the time complexity of finding all occurrences of an element using linear search?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "To find all occurrences, we must check every element in the array, taking O(n) time."
                },
                {
                    "q": "Binary search can be applied to:",
                    "options": [
                        "Only arrays",
                        "Only sorted arrays",
                        "Sorted arrays and other sorted data structures",
                        "Any data structure"
                    ],
                    "a": 2,
                    "ex": "Binary search works on any sorted data structure that supports random access (arrays, sorted lists)."
                },
                {
                    "q": "What is the lower bound for comparison-based searching in sorted array?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n log n)"
                    ],
                    "a": 1,
                    "ex": "Information-theoretic lower bound for comparison-based search in sorted array is Ω(log n)."
                },
                {
                    "q": "In exponential search, what is the first step?",
                    "options": [
                        "Binary search",
                        "Find range where element exists",
                        "Linear search",
                        "Sort the array"
                    ],
                    "a": 1,
                    "ex": "Exponential search first finds a range [2^i, 2^(i+1)] where element might exist, then applies binary search."
                },
                {
                    "q": "What is the advantage of binary search over linear search?",
                    "options": [
                        "Works on unsorted arrays",
                        "Uses less space",
                        "Much faster for large datasets",
                        "Simpler implementation"
                    ],
                    "a": 2,
                    "ex": "Binary search is significantly faster (O(log n) vs O(n)) for large sorted datasets."
                },
                {
                    "q": "Which search algorithm has better worst-case performance?",
                    "options": [
                        "Linear search",
                        "Binary search",
                        "Both are equal",
                        "Depends on data"
                    ],
                    "a": 1,
                    "ex": "Binary search has O(log n) worst-case time compared to O(n) for linear search."
                },
                {
                    "q": "What is ternary search?",
                    "options": [
                        "Search in 3 arrays",
                        "Divide array into 3 parts",
                        "Search for 3 elements",
                        "Use 3 pointers"
                    ],
                    "a": 1,
                    "ex": "Ternary search divides array into three parts instead of two, comparing with two middle elements."
                },
                {
                    "q": "In jump search, what is the optimal jump size for array of size n?",
                    "options": [
                        "n/2",
                        "√n",
                        "log n",
                        "n/3"
                    ],
                    "a": 1,
                    "ex": "Jump search uses optimal jump size of √n to balance between jumps and linear search within block."
                },
                {
                    "q": "What is the time complexity of jump search?",
                    "options": [
                        "O(√n)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Jump search performs √n jumps and √n linear comparisons in worst case, giving O(√n) complexity."
                },
                {
                    "q": "Binary search is an example of which algorithm design technique?",
                    "options": [
                        "Greedy",
                        "Dynamic Programming",
                        "Divide and Conquer",
                        "Backtracking"
                    ],
                    "a": 2,
                    "ex": "Binary search uses divide and conquer by splitting problem into smaller subproblems recursively."
                }
            ]
        },
        {
            "id": "sorting-algorithms",
            "title": "Sorting Algorithms (Bubble, Merge, Quick)",
            "questions": [
                {
                    "q": "What is the time complexity of bubble sort in the worst case?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "O(2ⁿ)"
                    ],
                    "a": 2,
                    "ex": "Bubble sort makes n-1 passes, each comparing up to n-1 elements, resulting in O(n²) worst-case complexity."
                },
                {
                    "q": "What is the best case time complexity of bubble sort?",
                    "options": [
                        "O(1)",
                        "O(n)",
                        "O(n log n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "Best case occurs when array is already sorted, requiring only one pass to verify: O(n)."
                },
                {
                    "q": "Which sorting algorithm is stable?",
                    "options": [
                        "Quick sort",
                        "Heap sort",
                        "Merge sort",
                        "Selection sort"
                    ],
                    "a": 2,
                    "ex": "Merge sort maintains relative order of equal elements, making it a stable sorting algorithm."
                },
                {
                    "q": "What is the space complexity of merge sort?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Merge sort requires O(n) auxiliary space for temporary arrays during the merging process."
                },
                {
                    "q": "In quick sort, what is the purpose of the pivot element?",
                    "options": [
                        "To sort the array",
                        "To partition the array",
                        "To find minimum",
                        "To count elements"
                    ],
                    "a": 1,
                    "ex": "Pivot partitions array so that elements smaller than pivot are on left, larger ones on right."
                },
                {
                    "q": "What is the worst case time complexity of quick sort?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "O(2ⁿ)"
                    ],
                    "a": 2,
                    "ex": "Worst case occurs when pivot is always smallest/largest element, leading to unbalanced partitions: O(n²)."
                },
                {
                    "q": "What is the average case time complexity of quick sort?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "O(log n)"
                    ],
                    "a": 1,
                    "ex": "Average case assumes balanced partitions, leading to O(n log n) time complexity."
                },
                {
                    "q": "Which sorting algorithm uses divide and conquer approach?",
                    "options": [
                        "Bubble sort",
                        "Insertion sort",
                        "Merge sort",
                        "Selection sort"
                    ],
                    "a": 2,
                    "ex": "Merge sort divides array into halves, sorts them recursively, then merges sorted halves."
                },
                {
                    "q": "What is the space complexity of bubble sort?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 0,
                    "ex": "Bubble sort sorts in-place, using only constant extra space for temporary variables: O(1)."
                },
                {
                    "q": "In bubble sort, after k passes, what can we guarantee?",
                    "options": [
                        "First k elements are sorted",
                        "Last k elements are in correct position",
                        "Array is partially sorted",
                        "Nothing specific"
                    ],
                    "a": 1,
                    "ex": "After k passes, the k largest elements 'bubble up' to their correct positions at the end."
                },
                {
                    "q": "What is the time complexity of merge sort in all cases?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "Varies"
                    ],
                    "a": 1,
                    "ex": "Merge sort consistently divides array into halves and merges in O(n), giving O(n log n) in all cases."
                },
                {
                    "q": "Which pivot selection strategy helps avoid quick sort's worst case?",
                    "options": [
                        "Always first element",
                        "Always last element",
                        "Random element",
                        "Always middle element"
                    ],
                    "a": 2,
                    "ex": "Random pivot selection reduces probability of consistently poor partitions, improving average performance."
                },
                {
                    "q": "What is an adaptive sorting algorithm?",
                    "options": [
                        "Changes strategy based on input",
                        "Performs better on partially sorted input",
                        "Uses multiple algorithms",
                        "Adapts to memory constraints"
                    ],
                    "a": 1,
                    "ex": "Adaptive algorithms like insertion sort perform better when input is already partially sorted."
                },
                {
                    "q": "Is bubble sort an adaptive algorithm?",
                    "options": [
                        "Yes",
                        "No",
                        "Sometimes",
                        "Depends on implementation"
                    ],
                    "a": 3,
                    "ex": "Standard bubble sort is not adaptive, but optimized version that stops early when no swaps occur is adaptive."
                },
                {
                    "q": "What is the recurrence relation for merge sort?",
                    "options": [
                        "T(n) = T(n-1) + O(n)",
                        "T(n) = 2T(n/2) + O(n)",
                        "T(n) = T(n/2) + O(1)",
                        "T(n) = nT(n/2) + O(1)"
                    ],
                    "a": 1,
                    "ex": "Merge sort divides into 2 subproblems of size n/2 and merges in O(n): T(n) = 2T(n/2) + O(n)."
                },
                {
                    "q": "Which sorting algorithm is NOT comparison-based?",
                    "options": [
                        "Bubble sort",
                        "Merge sort",
                        "Quick sort",
                        "Counting sort"
                    ],
                    "a": 3,
                    "ex": "Counting sort uses key values as indices rather than comparing elements directly."
                },
                {
                    "q": "What is the minimum number of swaps needed in bubble sort for array [3,2,1]?",
                    "options": [
                        "2",
                        "3",
                        "4",
                        "6"
                    ],
                    "a": 1,
                    "ex": "Array [3,2,1]: Pass 1: swap(3,2)→[2,3,1], swap(3,1)→[2,1,3]. Pass 2: swap(2,1)→[1,2,3]. Total: 3 swaps."
                },
                {
                    "q": "In quick sort, what is partitioning?",
                    "options": [
                        "Dividing array into equal parts",
                        "Rearranging elements around pivot",
                        "Sorting subarrays",
                        "Finding median"
                    ],
                    "a": 1,
                    "ex": "Partitioning rearranges array so elements ≤ pivot are on left, elements > pivot are on right."
                },
                {
                    "q": "What is the space complexity of in-place quick sort?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 1,
                    "ex": "In-place quick sort uses recursion stack which can go O(log n) deep in average case."
                },
                {
                    "q": "Which algorithm is best for sorting linked lists?",
                    "options": [
                        "Bubble sort",
                        "Quick sort",
                        "Merge sort",
                        "Heap sort"
                    ],
                    "a": 2,
                    "ex": "Merge sort works well with linked lists as it doesn't require random access and can merge efficiently."
                },
                {
                    "q": "What is the invariant maintained by bubble sort?",
                    "options": [
                        "Array is always sorted",
                        "Largest elements move to end",
                        "Smallest elements move to beginning",
                        "No specific invariant"
                    ],
                    "a": 1,
                    "ex": "Bubble sort maintains invariant that after i passes, the i largest elements are in correct positions."
                },
                {
                    "q": "What is 3-way partitioning in quick sort?",
                    "options": [
                        "Divide into 3 equal parts",
                        "Handle duplicates efficiently",
                        "Use 3 pivots",
                        "Sort 3 elements"
                    ],
                    "a": 1,
                    "ex": "3-way partitioning creates three sections: <pivot, =pivot, >pivot, handling duplicates efficiently."
                },
                {
                    "q": "What is the lower bound for comparison-based sorting?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "O(log n)"
                    ],
                    "a": 1,
                    "ex": "Information-theoretic lower bound for comparison-based sorting is Ω(n log n)."
                },
                {
                    "q": "Which sorting algorithm has the best space complexity?",
                    "options": [
                        "Merge sort",
                        "Quick sort",
                        "Bubble sort",
                        "Heap sort"
                    ],
                    "a": 2,
                    "ex": "Bubble sort uses O(1) space as it sorts in-place with only constant extra variables."
                },
                {
                    "q": "What is external sorting?",
                    "options": [
                        "Sorting outside main memory",
                        "Sorting external files",
                        "Sorting using external libraries",
                        "Sorting with external help"
                    ],
                    "a": 0,
                    "ex": "External sorting handles datasets too large for main memory, using disk storage and merge techniques."
                },
                {
                    "q": "In merge sort, what is the merge operation's time complexity?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Merging two sorted arrays of total size n requires examining each element once: O(n)."
                }
            ]
        },
        {
            "id": "recursion",
            "title": "Recursion",
            "questions": [
                {
                    "q": "What is the essential component that prevents infinite recursion?",
                    "options": [
                        "Recursive case",
                        "Base case",
                        "Return statement",
                        "Loop condition"
                    ],
                    "a": 1,
                    "ex": "Base case provides termination condition for recursion, preventing infinite recursive calls."
                },
                {
                    "q": "What happens when a recursive function lacks a proper base case?",
                    "options": [
                        "Compilation error",
                        "Stack overflow",
                        "Infinite loop",
                        "Memory leak"
                    ],
                    "a": 1,
                    "ex": "Without base case, recursive calls continue indefinitely until call stack is exhausted, causing stack overflow."
                },
                {
                    "q": "What is the space complexity of a recursive function with maximum depth d?",
                    "options": [
                        "O(1)",
                        "O(d)",
                        "O(2^d)",
                        "O(d²)"
                    ],
                    "a": 1,
                    "ex": "Each recursive call uses stack space, so maximum depth d requires O(d) space for call stack."
                },
                {
                    "q": "What is tail recursion?",
                    "options": [
                        "Recursion at the end of program",
                        "Recursive call is the last operation",
                        "Recursion with multiple base cases",
                        "Recursion using tail pointer"
                    ],
                    "a": 1,
                    "ex": "Tail recursion occurs when recursive call is the last operation in the function, allowing optimization."
                },
                {
                    "q": "What is the time complexity of calculating factorial using recursion?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Factorial recursion makes n recursive calls: fact(n) → fact(n-1) → ... → fact(1), giving O(n)."
                },
                {
                    "q": "Which data structure is implicitly used in recursion?",
                    "options": [
                        "Queue",
                        "Stack",
                        "Array",
                        "Linked List"
                    ],
                    "a": 1,
                    "ex": "System call stack stores function calls, parameters, and return addresses for recursive functions."
                },
                {
                    "q": "What is the base case for calculating factorial of n?",
                    "options": [
                        "n = 0",
                        "n = 1",
                        "n = 0 or n = 1",
                        "n < 0"
                    ],
                    "a": 2,
                    "ex": "Factorial base cases: 0! = 1 and 1! = 1, both return 1 to terminate recursion."
                },
                {
                    "q": "What is direct recursion?",
                    "options": [
                        "Function calls itself",
                        "Function calls another recursive function",
                        "Recursion with single base case",
                        "Linear recursion"
                    ],
                    "a": 0,
                    "ex": "Direct recursion occurs when a function calls itself directly within its own definition."
                },
                {
                    "q": "What is indirect recursion?",
                    "options": [
                        "Function calls itself indirectly through other functions",
                        "Recursion with multiple parameters",
                        "Recursion without base case",
                        "Non-linear recursion"
                    ],
                    "a": 0,
                    "ex": "Indirect recursion occurs when function A calls function B, which eventually calls function A."
                },
                {
                    "q": "What is the time complexity of naive recursive Fibonacci calculation?",
                    "options": [
                        "O(n)",
                        "O(n²)",
                        "O(2^n)",
                        "O(log n)"
                    ],
                    "a": 2,
                    "ex": "Naive Fibonacci recursion creates binary tree of calls with exponential growth: O(2^n)."
                },
                {
                    "q": "How can we optimize recursive Fibonacci calculation?",
                    "options": [
                        "Use iteration",
                        "Use memoization",
                        "Use dynamic programming",
                        "All of the above"
                    ],
                    "a": 3,
                    "ex": "All approaches can optimize Fibonacci: iteration (O(n)), memoization (O(n)), and DP (O(n))."
                },
                {
                    "q": "What is the recursive case in binary search?",
                    "options": [
                        "Search entire array",
                        "Search left or right half",
                        "Search both halves",
                        "Return middle element"
                    ],
                    "a": 1,
                    "ex": "Binary search recursively searches either left half (if target < mid) or right half (if target > mid)."
                },
                {
                    "q": "What is tree recursion?",
                    "options": [
                        "Recursion on trees only",
                        "Function makes multiple recursive calls",
                        "Recursion with tree structure",
                        "Binary recursion"
                    ],
                    "a": 1,
                    "ex": "Tree recursion occurs when function makes multiple recursive calls, creating tree-like call structure."
                },
                {
                    "q": "What is the advantage of tail recursion?",
                    "options": [
                        "Easier to understand",
                        "Can be optimized to iteration",
                        "Uses less memory",
                        "Both B and C"
                    ],
                    "a": 3,
                    "ex": "Tail recursion can be optimized by compilers to iteration, eliminating stack overhead and using less memory."
                },
                {
                    "q": "What is the recursive relation for Tower of Hanoi with n disks?",
                    "options": [
                        "T(n) = T(n-1) + 1",
                        "T(n) = 2T(n-1) + 1",
                        "T(n) = T(n-1) + T(n-2)",
                        "T(n) = nT(n-1)"
                    ],
                    "a": 1,
                    "ex": "Tower of Hanoi: move n-1 disks, move largest disk, move n-1 disks again: T(n) = 2T(n-1) + 1."
                },
                {
                    "q": "What is the minimum number of moves for Tower of Hanoi with n disks?",
                    "options": [
                        "n",
                        "2n",
                        "2^n - 1",
                        "n²"
                    ],
                    "a": 2,
                    "ex": "Tower of Hanoi requires minimum 2^n - 1 moves to transfer n disks following the rules."
                },
                {
                    "q": "What is memoization in recursive functions?",
                    "options": [
                        "Storing function parameters",
                        "Caching results of function calls",
                        "Optimizing base cases",
                        "Reducing recursive depth"
                    ],
                    "a": 1,
                    "ex": "Memoization stores results of expensive function calls to avoid redundant calculations in recursion."
                },
                {
                    "q": "Which traversal algorithms use recursion naturally?",
                    "options": [
                        "BFS",
                        "DFS",
                        "Level order",
                        "Iterative deepening"
                    ],
                    "a": 1,
                    "ex": "Depth-First Search (DFS) naturally uses recursion to explore deeper levels before backtracking."
                },
                {
                    "q": "What is the base case for recursive binary search?",
                    "options": [
                        "Array is empty",
                        "Element found",
                        "low > high",
                        "All of the above"
                    ],
                    "a": 3,
                    "ex": "Binary search base cases: element found (return index), low > high (element not found), empty array."
                },
                {
                    "q": "What is linear recursion?",
                    "options": [
                        "Recursion in linear time",
                        "Function makes single recursive call",
                        "Recursion on linear data structures",
                        "Iterative recursion"
                    ],
                    "a": 1,
                    "ex": "Linear recursion occurs when function makes at most one recursive call, creating linear call sequence."
                },
                {
                    "q": "What is the space complexity of recursive factorial calculation?",
                    "options": [
                        "O(1)",
                        "O(log n)",
                        "O(n)",
                        "O(n²)"
                    ],
                    "a": 2,
                    "ex": "Recursive factorial creates n stack frames for calls fact(n) to fact(1), requiring O(n) space."
                },
                {
                    "q": "What is mutual recursion?",
                    "options": [
                        "Two functions calling each other",
                        "Function calling itself twice",
                        "Recursive functions sharing variables",
                        "Parallel recursion"
                    ],
                    "a": 0,
                    "ex": "Mutual recursion occurs when two or more functions call each other recursively."
                },
                {
                    "q": "What happens during the 'unwinding' phase of recursion?",
                    "options": [
                        "Making recursive calls",
                        "Returning from recursive calls",
                        "Processing base case",
                        "Stack overflow"
                    ],
                    "a": 1,
                    "ex": "Unwinding occurs when base case is reached and control returns through previous recursive calls."
                },
                {
                    "q": "What is the recursive definition of GCD using Euclidean algorithm?",
                    "options": [
                        "gcd(a,b) = gcd(b, a%b)",
                        "gcd(a,b) = gcd(a-b, b)",
                        "gcd(a,b) = gcd(a/2, b/2)",
                        "gcd(a,b) = a + b"
                    ],
                    "a": 0,
                    "ex": "Euclidean algorithm: gcd(a,b) = gcd(b, a mod b) with base case gcd(a,0) = a."
                },
                {
                    "q": "Which problem is NOT typically solved using recursion?",
                    "options": [
                        "Tree traversal",
                        "Factorial calculation",
                        "Linear search",
                        "Divide and conquer algorithms"
                    ],
                    "a": 2,
                    "ex": "Linear search is typically implemented iteratively as it doesn't benefit from recursive structure."
                },
                {
                    "q": "What is the call stack in recursion?",
                    "options": [
                        "Stack data structure in program",
                        "System stack storing function calls",
                        "User-defined stack",
                        "Stack of parameters"
                    ],
                    "a": 1,
                    "ex": "Call stack is system-maintained stack that stores function call information including parameters and return addresses."
                },
                {
                    "q": "What is backtracking?",
                    "options": [
                        "Reversing recursion",
                        "Algorithmic technique using recursion",
                        "Error in recursion",
                        "Tail recursion optimization"
                    ],
                    "a": 1,
                    "ex": "Backtracking is algorithmic approach that uses recursion to explore solutions and backtracks when path fails."
                },
                {
                    "q": "What is the time complexity of recursive merge sort?",
                    "options": [
                        "O(n)",
                        "O(n log n)",
                        "O(n²)",
                        "O(2^n)"
                    ],
                    "a": 1,
                    "ex": "Merge sort recursion: T(n) = 2T(n/2) + O(n), which solves to O(n log n)."
                },
                {
                    "q": "What is primitive recursion?",
                    "options": [
                        "Simple recursion",
                        "Recursion with guaranteed termination",
                        "Basic recursive functions",
                        "Elementary recursion"
                    ],
                    "a": 1,
                    "ex": "Primitive recursion is class of recursive functions guaranteed to terminate, following specific structural rules."
                },
                {
                    "q": "What is the recursive case for calculating power(x, n)?",
                    "options": [
                        "power(x, n-1) * x",
                        "power(x*x, n/2)",
                        "Both A and B are valid",
                        "power(x, n) = x^n"
                    ],
                    "a": 2,
                    "ex": "Both approaches work: linear recursion power(x, n-1) * x and efficient power(x*x, n/2) for even n."
                }
            ]
        },
        {
            "id": "intro-databases",
            "title": "Introduction to Databases",
            "questions": [
                {
                    "q": "What is a database?",
                    "options": [
                        "Collection of programs",
                        "Collection of related data",
                        "Collection of files",
                        "Collection of applications"
                    ],
                    "a": 1,
                    "ex": "Database is an organized collection of related data stored and accessed electronically."
                },
                {
                    "q": "What does DBMS stand for?",
                    "options": [
                        "Database Management System",
                        "Data Base Management Software",
                        "Database Manipulation System",
                        "Data Management System"
                    ],
                    "a": 0,
                    "ex": "DBMS stands for Database Management System - software that manages database operations."
                },
                {
                    "q": "What is the main advantage of using a database over file systems?",
                    "options": [
                        "Faster access",
                        "Data redundancy elimination",
                        "Simpler structure",
                        "Less storage space"
                    ],
                    "a": 1,
                    "ex": "Databases eliminate data redundancy by storing each piece of data only once and providing controlled access."
                },
                {
                    "q": "What is data redundancy?",
                    "options": [
                        "Data backup",
                        "Duplicate data storage",
                        "Data security",
                        "Data compression"
                    ],
                    "a": 1,
                    "ex": "Data redundancy occurs when same data is stored in multiple places, leading to inconsistency and waste."
                },
                {
                    "q": "What is data integrity?",
                    "options": [
                        "Data security",
                        "Data accuracy and consistency",
                        "Data backup",
                        "Data compression"
                    ],
                    "a": 1,
                    "ex": "Data integrity ensures data accuracy, consistency, and reliability throughout its lifecycle."
                },
                {
                    "q": "What is a Database Administrator (DBA)?",
                    "options": [
                        "Database user",
                        "Person who manages database systems",
                        "Database programmer",
                        "Database analyst"
                    ],
                    "a": 1,
                    "ex": "DBA is responsible for managing, maintaining, securing, and optimizing database systems."
                },
                {
                    "q": "What is metadata?",
                    "options": [
                        "Data about data",
                        "Large data",
                        "Encrypted data",
                        "Compressed data"
                    ],
                    "a": 0,
                    "ex": "Metadata is data that describes other data, including structure, constraints, and relationships."
                },
                {
                    "q": "What is data independence?",
                    "options": [
                        "Data security",
                        "Ability to change data structure without affecting applications",
                        "Data backup",
                        "Data encryption"
                    ],
                    "a": 1,
                    "ex": "Data independence allows changes to data storage or structure without modifying application programs."
                },
                {
                    "q": "What are the main components of a DBMS?",
                    "options": [
                        "Hardware only",
                        "Software only",
                        "Hardware, software, data, and users",
                        "Data and applications"
                    ],
                    "a": 2,
                    "ex": "DBMS components include hardware, software, data, procedures, and people (users and administrators)."
                },
                {
                    "q": "What is concurrent access in databases?",
                    "options": [
                        "Single user access",
                        "Multiple users accessing simultaneously",
                        "Sequential access",
                        "Random access"
                    ],
                    "a": 1,
                    "ex": "Concurrent access allows multiple users to access and modify database simultaneously while maintaining consistency."
                },
                {
                    "q": "What is data security in databases?",
                    "options": [
                        "Data backup",
                        "Protection against unauthorized access",
                        "Data compression",
                        "Data sorting"
                    ],
                    "a": 1,
                    "ex": "Data security involves protecting database from unauthorized access, modification, or destruction."
                },
                {
                    "q": "What is the difference between data and information?",
                    "options": [
                        "No difference",
                        "Data is processed information",
                        "Information is processed data",
                        "Data is larger than information"
                    ],
                    "a": 2,
                    "ex": "Data consists of raw facts, while information is processed data that provides meaningful insights."
                },
                {
                    "q": "What is a database schema?",
                    "options": [
                        "Database data",
                        "Database structure and organization",
                        "Database queries",
                        "Database users"
                    ],
                    "a": 1,
                    "ex": "Database schema defines the logical structure, organization, and constraints of database elements."
                },
                {
                    "q": "What is data abstraction in databases?",
                    "options": [
                        "Data encryption",
                        "Hiding complex implementation details",
                        "Data compression",
                        "Data sorting"
                    ],
                    "a": 1,
                    "ex": "Data abstraction hides complex physical storage details and provides simplified logical view to users."
                },
                {
                    "q": "What are the levels of data abstraction?",
                    "options": [
                        "Physical and logical",
                        "Internal, conceptual, and external",
                        "User and system",
                        "Application and database"
                    ],
                    "a": 1,
                    "ex": "Three levels: Internal (physical storage), Conceptual (logical structure), External (user views)."
                },
                {
                    "q": "What is a database instance?",
                    "options": [
                        "Database structure",
                        "Database at a particular moment",
                        "Database backup",
                        "Database query"
                    ],
                    "a": 1,
                    "ex": "Database instance is the actual data stored in database at a specific point in time."
                },
                {
                    "q": "What is the primary purpose of a database?",
                    "options": [
                        "Data storage only",
                        "Data processing only",
                        "Efficient data storage, retrieval, and management",
                        "Data display only"
                    ],
                    "a": 2,
                    "ex": "Databases provide efficient storage, retrieval, management, and sharing of data with integrity and security."
                },
                {
                    "q": "What is data consistency?",
                    "options": [
                        "Data backup",
                        "Data remains accurate across all copies",
                        "Data compression",
                        "Data encryption"
                    ],
                    "a": 1,
                    "ex": "Data consistency ensures all copies of data are identical and accurate throughout the system."
                },
                {
                    "q": "What is a database transaction?",
                    "options": [
                        "Database query",
                        "Unit of database operations",
                        "Database backup",
                        "Database connection"
                    ],
                    "a": 1,
                    "ex": "Transaction is a logical unit of database operations that must be completed entirely or not at all."
                },
                {
                    "q": "What is data sharing in databases?",
                    "options": [
                        "Data backup",
                        "Multiple users accessing same data",
                        "Data transfer",
                        "Data duplication"
                    ],
                    "a": 1,
                    "ex": "Data sharing allows multiple users and applications to access the same data simultaneously."
                },
                {
                    "q": "What is the main disadvantage of file-based systems?",
                    "options": [
                        "Slow access",
                        "Data redundancy and inconsistency",
                        "Complex structure",
                        "High cost"
                    ],
                    "a": 1,
                    "ex": "File systems suffer from data redundancy, inconsistency, and difficulty in data sharing and maintenance."
                },
                {
                    "q": "What is database recovery?",
                    "options": [
                        "Data backup",
                        "Restoring database after failure",
                        "Data compression",
                        "Data migration"
                    ],
                    "a": 1,
                    "ex": "Database recovery involves restoring database to consistent state after system failure or corruption."
                },
                {
                    "q": "What is data dictionary?",
                    "options": [
                        "Database queries",
                        "Repository of metadata",
                        "Database backup",
                        "User manual"
                    ],
                    "a": 1,
                    "ex": "Data dictionary is centralized repository containing metadata about database structure and constraints."
                },
                {
                    "q": "What is database scalability?",
                    "options": [
                        "Database size",
                        "Ability to handle growing workload",
                        "Database speed",
                        "Database security"
                    ],
                    "a": 1,
                    "ex": "Scalability refers to database's ability to handle increasing amounts of work or users efficiently."
                },
                {
                    "q": "What is the role of database in modern applications?",
                    "options": [
                        "Data storage only",
                        "Central component for data management",
                        "User interface",
                        "Network communication"
                    ],
                    "a": 1,
                    "ex": "Databases serve as central component managing data storage, retrieval, and consistency for applications."
                },
                {
                    "q": "What is database backup?",
                    "options": [
                        "Data compression",
                        "Copy of database for recovery",
                        "Data encryption",
                        "Data sorting"
                    ],
                    "a": 1,
                    "ex": "Database backup is a copy of database data and structure used for recovery in case of failure."
                },
                {
                    "q": "What is data mining?",
                    "options": [
                        "Data extraction",
                        "Discovering patterns in large datasets",
                        "Data storage",
                        "Data backup"
                    ],
                    "a": 1,
                    "ex": "Data mining involves discovering hidden patterns, relationships, and insights from large datasets."
                },
                {
                    "q": "What is database performance?",
                    "options": [
                        "Database size",
                        "Speed and efficiency of operations",
                        "Database security",
                        "Database backup"
                    ],
                    "a": 1,
                    "ex": "Database performance measures speed, efficiency, and responsiveness of database operations."
                },
                {
                    "q": "What is the main goal of database design?",
                    "options": [
                        "Minimize storage",
                        "Maximize speed",
                        "Minimize redundancy and ensure integrity",
                        "Maximize users"
                    ],
                    "a": 2,
                    "ex": "Good database design minimizes redundancy, ensures data integrity, and supports efficient operations."
                },
                {
                    "q": "What is database middleware?",
                    "options": [
                        "Database software",
                        "Software connecting applications to databases",
                        "Database hardware",
                        "Database queries"
                    ],
                    "a": 1,
                    "ex": "Database middleware provides connectivity and communication layer between applications and database systems."
                }
            ]
        },
        {
            "id": "dbms-vs-rdbms",
            "title": "DBMS vs RDBMS",
            "questions": [
                {
                    "q": "What does RDBMS stand for?",
                    "options": [
                        "Relational Database Management System",
                        "Rapid Database Management System",
                        "Remote Database Management System",
                        "Real Database Management System"
                    ],
                    "a": 0,
                    "ex": "RDBMS stands for Relational Database Management System, based on relational model."
                },
                {
                    "q": "What is the main difference between DBMS and RDBMS?",
                    "options": [
                        "DBMS is faster",
                        "RDBMS stores data in tables with relationships",
                        "DBMS is newer",
                        "No difference"
                    ],
                    "a": 1,
                    "ex": "RDBMS organizes data in tables (relations) with defined relationships, while DBMS may use various data models."
                },
                {
                    "q": "Which of the following is an example of RDBMS?",
                    "options": [
                        "MongoDB",
                        "MySQL",
                        "Redis",
                        "Cassandra"
                    ],
                    "a": 1,
                    "ex": "MySQL is a relational database management system that stores data in tables with relationships."
                },
                {
                    "q": "What is a table in RDBMS?",
                    "options": [
                        "Collection of databases",
                        "Collection of rows and columns",
                        "Collection of queries",
                        "Collection of users"
                    ],
                    "a": 1,
                    "ex": "Table (relation) in RDBMS is a collection of rows (tuples) and columns (attributes) storing related data."
                },
                {
                    "q": "What is normalization in RDBMS?",
                    "options": [
                        "Data backup process",
                        "Process of organizing data to reduce redundancy",
                        "Data encryption",
                        "Data compression"
                    ],
                    "a": 1,
                    "ex": "Normalization organizes data in tables to minimize redundancy and dependency issues."
                },
                {
                    "q": "Which language is primarily used with RDBMS?",
                    "options": [
                        "Java",
                        "SQL",
                        "Python",
                        "C++"
                    ],
                    "a": 1,
                    "ex": "SQL (Structured Query Language) is the standard language for managing and querying relational databases."
                },
                {
                    "q": "What is ACID compliance in RDBMS?",
                    "options": [
                        "Database security feature",
                        "Set of properties ensuring reliable transactions",
                        "Data compression technique",
                        "Backup strategy"
                    ],
                    "a": 1,
                    "ex": "ACID (Atomicity, Consistency, Isolation, Durability) ensures reliable database transaction processing."
                },
                {
                    "q": "Can DBMS handle complex relationships between data?",
                    "options": [
                        "Yes, better than RDBMS",
                        "No, limited capability",
                        "Only simple relationships",
                        "Same as RDBMS"
                    ],
                    "a": 1,
                    "ex": "Traditional DBMS has limited capability to handle complex relationships compared to RDBMS."
                },
                {
                    "q": "What is a primary key in RDBMS?",
                    "options": [
                        "First column in table",
                        "Unique identifier for table rows",
                        "Most important data",
                        "Table name"
                    ],
                    "a": 1,
                    "ex": "Primary key uniquely identifies each row in a table and cannot contain NULL values."
                },
                {
                    "q": "Which provides better data integrity?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "Neither"
                    ],
                    "a": 1,
                    "ex": "RDBMS provides better data integrity through constraints, referential integrity, and ACID properties."
                },
                {
                    "q": "What is a foreign key in RDBMS?",
                    "options": [
                        "Key from another database",
                        "Field that links to primary key of another table",
                        "Encrypted key",
                        "Backup key"
                    ],
                    "a": 1,
                    "ex": "Foreign key is a field that creates link between two tables by referencing primary key of another table."
                },
                {
                    "q": "Which system is more suitable for complex queries?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS with SQL support is better suited for complex queries involving multiple tables and relationships."
                },
                {
                    "q": "What is referential integrity in RDBMS?",
                    "options": [
                        "Data backup",
                        "Ensuring foreign key references valid primary key",
                        "Data encryption",
                        "Data compression"
                    ],
                    "a": 1,
                    "ex": "Referential integrity ensures foreign key values always reference existing primary key values."
                },
                {
                    "q": "Which is more structured in data organization?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS is more structured with predefined schema, tables, and relationships."
                },
                {
                    "q": "What is a relation in RDBMS?",
                    "options": [
                        "Connection between databases",
                        "Table with rows and columns",
                        "Query result",
                        "User relationship"
                    ],
                    "a": 1,
                    "ex": "Relation is the formal term for table in RDBMS, consisting of tuples (rows) and attributes (columns)."
                },
                {
                    "q": "Which supports better concurrent access?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS typically provides better concurrent access control with sophisticated locking mechanisms."
                },
                {
                    "q": "What is the main advantage of RDBMS over DBMS?",
                    "options": [
                        "Faster performance",
                        "Better data relationships and integrity",
                        "Less storage space",
                        "Simpler design"
                    ],
                    "a": 1,
                    "ex": "RDBMS provides better data relationships, integrity constraints, and standardized query language (SQL)."
                },
                {
                    "q": "Which follows Codd's rules?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both",
                        "Neither"
                    ],
                    "a": 1,
                    "ex": "RDBMS follows Codd's 12 rules that define the relational model for database management."
                },
                {
                    "q": "What is data redundancy control better in?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS provides better redundancy control through normalization and referential integrity."
                },
                {
                    "q": "Which system requires more storage space?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "Depends on data"
                    ],
                    "a": 1,
                    "ex": "RDBMS typically requires more storage due to metadata, indexes, and relationship information."
                },
                {
                    "q": "What is schema in RDBMS?",
                    "options": [
                        "Database data",
                        "Database structure definition",
                        "Database queries",
                        "Database users"
                    ],
                    "a": 1,
                    "ex": "Schema defines the structure of database including tables, columns, data types, and constraints."
                },
                {
                    "q": "Which provides better backup and recovery?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS typically provides more sophisticated backup and recovery mechanisms with transaction logs."
                },
                {
                    "q": "What is tuple in RDBMS?",
                    "options": [
                        "Column in table",
                        "Row in table",
                        "Table relationship",
                        "Database connection"
                    ],
                    "a": 1,
                    "ex": "Tuple is the formal term for row in RDBMS, representing a single record in a table."
                },
                {
                    "q": "Which is more suitable for large-scale applications?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS is generally more suitable for large-scale applications due to better scalability and features."
                },
                {
                    "q": "What is attribute in RDBMS?",
                    "options": [
                        "Row in table",
                        "Column in table",
                        "Table name",
                        "Database name"
                    ],
                    "a": 1,
                    "ex": "Attribute is the formal term for column in RDBMS, representing a property of the relation."
                },
                {
                    "q": "Which provides better security features?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS typically provides more comprehensive security features including user roles and access control."
                },
                {
                    "q": "What is domain in RDBMS?",
                    "options": [
                        "Database name",
                        "Set of allowable values for attribute",
                        "Table relationship",
                        "User group"
                    ],
                    "a": 1,
                    "ex": "Domain defines the set of allowable values that an attribute can take in RDBMS."
                },
                {
                    "q": "Which has better standardization?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS has better standardization with SQL as universal query language and relational model standards."
                },
                {
                    "q": "What is cardinality in RDBMS?",
                    "options": [
                        "Number of tables",
                        "Number of rows in table",
                        "Number of columns",
                        "Number of relationships"
                    ],
                    "a": 1,
                    "ex": "Cardinality refers to the number of tuples (rows) in a relation (table) in RDBMS."
                },
                {
                    "q": "Which is more complex to implement?",
                    "options": [
                        "DBMS",
                        "RDBMS",
                        "Both are equal",
                        "File system"
                    ],
                    "a": 1,
                    "ex": "RDBMS is more complex to implement due to relational model, constraints, and additional features."
                }
            ]
        },
        {
            "id": "sql-queries",
            "title": "SQL Queries (SELECT, INSERT, UPDATE, DELETE)",
            "questions": [
                {
                    "q": "Which SQL statement is used to extract data from a database?",
                    "options": [
                        "UPDATE",
                        "DELETE",
                        "SELECT",
                        "INSERT"
                    ],
                    "a": 2,
                    "ex": "The SELECT statement is used to query the database and retrieve data that matches specified criteria."
                },
                {
                    "q": "Which SQL statement is used to add new records to a database table?",
                    "options": [
                        "ADD",
                        "INSERT INTO",
                        "NEW",
                        "UPDATE"
                    ],
                    "a": 1,
                    "ex": "The INSERT INTO statement is used to add new rows (records) of data into a table."
                },
                {
                    "q": "Which SQL statement is used to modify existing records in a database table?",
                    "options": [
                        "CREATE",
                        "ALTER",
                        "MODIFY",
                        "UPDATE"
                    ],
                    "a": 3,
                    "ex": "The UPDATE statement is used to change existing data within one or more rows of a table."
                },
                {
                    "q": "Which SQL statement is used to delete existing records from a database table?",
                    "options": [
                        "REMOVE",
                        "DELETE FROM",
                        "DROP",
                        "ERASE"
                    ],
                    "a": 1,
                    "ex": "The DELETE FROM statement is used to remove one or more rows from a table."
                },
                {
                    "q": "Which clause is used to filter records in a SELECT statement?",
                    "options": [
                        "ORDER BY",
                        "GROUP BY",
                        "WHERE",
                        "HAVING"
                    ],
                    "a": 2,
                    "ex": "The WHERE clause is used to specify a condition for filtering the rows to be retrieved by a SELECT statement."
                },
                {
                    "q": "Which operator is used to select values within a range in SQL?",
                    "options": [
                        "LIKE",
                        "IN",
                        "BETWEEN",
                        "AND"
                    ],
                    "a": 2,
                    "ex": "The BETWEEN operator is used to filter results within a specified range (inclusive) in a WHERE clause."
                },
                {
                    "q": "Which keyword is used to sort the result set in ascending or descending order?",
                    "options": [
                        "SORT",
                        "ARRANGE",
                        "ORDER BY",
                        "GROUP BY"
                    ],
                    "a": 2,
                    "ex": "The ORDER BY clause is used to sort the rows in the result set based on one or more columns."
                },
                {
                    "q": "Which aggregate function is used to count the number of rows in a table?",
                    "options": [
                        "SUM()",
                        "AVG()",
                        "COUNT()",
                        "MAX()"
                    ],
                    "a": 2,
                    "ex": "The COUNT() function is used to return the number of rows that match a specified criterion."
                },
                {
                    "q": "Which keyword is used to return only unique values in a SELECT statement?",
                    "options": [
                        "UNIQUE",
                        "DISTINCT",
                        "SINGLE",
                        "PRIMARY"
                    ],
                    "a": 1,
                    "ex": "The DISTINCT keyword is used with SELECT to eliminate duplicate rows from the result set."
                },
                {
                    "q": "What is the correct syntax for inserting a new record into a table called 'Customers' with columns 'Name' and 'City'?",
                    "options": [
                        "INSERT INTO Customers (Name, City) VALUES ('John Doe', 'New York');",
                        "INSERT Customers VALUES ('John Doe', 'New York');",
                        "ADD ROW INTO Customers ('John Doe', 'New York');",
                        "NEW RECORD Customers (Name, City) ('John Doe', 'New York');"
                    ],
                    "a": 0,
                    "ex": "The correct syntax for inserting specific column values is INSERT INTO table_name (column1, column2, ...) VALUES (value1, value2, ...);"
                },
                {
                    "q": "What is the correct syntax for updating the 'City' to 'London' for a customer named 'Peter' in the 'Customers' table?",
                    "options": [
                        "UPDATE Customers SET City = 'London' WHERE Name = 'Peter';",
                        "MODIFY Customers SET City = 'London' WHERE Name = 'Peter';",
                        "UPDATE Customers WHERE Name = 'Peter' SET City = 'London';",
                        "CHANGE Customers City = 'London' WHERE Name = 'Peter';"
                    ],
                    "a": 0,
                    "ex": "The correct syntax for updating records is UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;"
                },
                {
                    "q": "What is the correct syntax for deleting all records from the 'Orders' table?",
                    "options": [
                        "DELETE ALL FROM Orders;",
                        "REMOVE * FROM Orders;",
                        "DELETE FROM Orders;",
                        "ERASE TABLE Orders;"
                    ],
                    "a": 2,
                    "ex": "The DELETE FROM statement without a WHERE clause will delete all rows from the specified table."
                },
                {
                    "q": "Which SQL operator is used for pattern matching?",
                    "options": [
                        "MATCH",
                        "LIKE",
                        "CONTAINS",
                        "PATTERN"
                    ],
                    "a": 1,
                    "ex": "The LIKE operator is used in a WHERE clause to search for a specified pattern in a column."
                },
                {
                    "q": "Which wildcard character represents zero or more characters in a LIKE clause?",
                    "options": [
                        "_",
                        "%",
                        "#",
                        "?"
                    ],
                    "a": 1,
                    "ex": "The '%' wildcard represents any sequence of zero or more characters."
                },
                {
                    "q": "Which wildcard character represents a single character in a LIKE clause?",
                    "options": [
                        "*",
                        "_",
                        "?",
                        "#"
                    ],
                    "a": 1,
                    "ex": "The '_' wildcard represents any single character."
                },
                {
                    "q": "Which operator is used to combine the result sets of two or more SELECT statements?",
                    "options": [
                        "JOIN",
                        "MERGE",
                        "COMBINE",
                        "UNION"
                    ],
                    "a": 3,
                    "ex": "The UNION operator is used to combine the result sets of two or more SELECT statements into a single result set."
                },
                {
                    "q": "Which clause is used to group rows that have the same values in specified columns into summary rows?",
                    "options": [
                        "ORDER BY",
                        "WHERE",
                        "HAVING",
                        "GROUP BY"
                    ],
                    "a": 3,
                    "ex": "The GROUP BY clause is used to group rows with the same values in specified columns, often used with aggregate functions."
                },
                {
                    "q": "Which clause is used to filter the results of a GROUP BY clause?",
                    "options": [
                        "WHERE",
                        "FILTER BY",
                        "HAVING",
                        "GROUP FILTER"
                    ],
                    "a": 2,
                    "ex": "The HAVING clause is used to filter groups created by the GROUP BY clause, similar to how WHERE filters rows."
                },
                {
                    "q": "What is the purpose of the AS keyword in SQL?",
                    "options": [
                        "To perform arithmetic operations",
                        "To create aliases for columns or tables",
                        "To specify data types",
                        "To define constraints"
                    ],
                    "a": 1,
                    "ex": "The AS keyword is used to assign a temporary name (alias) to a column or a table in a query."
                },
                {
                    "q": "Which of the following is NOT a valid SQL data type?",
                    "options": [
                        "INT",
                        "VARCHAR",
                        "DECIMAL",
                        "COMPLEX"
                    ],
                    "a": 3,
                    "ex": "INT, VARCHAR, and DECIMAL are common SQL data types. COMPLEX is not a standard SQL data type."
                },
                {
                    "q": "What does SQL stand for?",
                    "options": [
                        "Structured Query Language",
                        "Simple Query Language",
                        "Sequential Query Language",
                        "System Query Language"
                    ],
                    "a": 0,
                    "ex": "SQL stands for Structured Query Language, the standard language for relational database management systems."
                },
                {
                    "q": "Which constraint ensures that a column cannot have NULL values?",
                    "options": [
                        "UNIQUE",
                        "PRIMARY KEY",
                        "NOT NULL",
                        "DEFAULT"
                    ],
                    "a": 2,
                    "ex": "The NOT NULL constraint ensures that a column must contain a value and cannot be left empty."
                },
                {
                    "q": "Which constraint ensures that all values in a column are different?",
                    "options": [
                        "PRIMARY KEY",
                        "FOREIGN KEY",
                        "UNIQUE",
                        "CHECK"
                    ],
                    "a": 2,
                    "ex": "The UNIQUE constraint ensures that all values in a column (or a combination of columns) are distinct."
                },
                {
                    "q": "What is the default order when using ORDER BY?",
                    "options": [
                        "Descending",
                        "Random",
                        "Ascending",
                        "Depends on the database"
                    ],
                    "a": 2,
                    "ex": "By default, ORDER BY sorts the results in ascending order (ASC)."
                },
                {
                    "q": "Which operator is used to test for empty values (NULL values)?",
                    "options": [
                        "=",
                        "IS NULL",
                        "LIKE",
                        "IN"
                    ],
                    "a": 1,
                    "ex": "The IS NULL and IS NOT NULL operators are used to check for NULL values in a column, as NULL is not equal to anything, including itself."
                },
                {
                    "q": "Which SQL statement is used to define the database schema?",
                    "options": [
                        "DML (Data Manipulation Language)",
                        "DDL (Data Definition Language)",
                        "DCL (Data Control Language)",
                        "TCL (Transaction Control Language)"
                    ],
                    "a": 1,
                    "ex": "DDL (Data Definition Language) statements like CREATE, ALTER, and DROP are used to define and manage the database schema."
                },
                {
                    "q": "Which of the following is a DML statement?",
                    "options": [
                        "CREATE TABLE",
                        "ALTER TABLE",
                        "DROP TABLE",
                        "INSERT INTO"
                    ],
                    "a": 3,
                    "ex": "INSERT INTO is a DML (Data Manipulation Language) statement used for adding data to a table."
                },
                {
                    "q": "Which operator is used to compare a value to a list of literal values or results of a subquery?",
                    "options": [
                        "BETWEEN",
                        "LIKE",
                        "IN",
                        "EXISTS"
                    ],
                    "a": 2,
                    "ex": "The IN operator is used to specify multiple possible values for a column in a WHERE clause."
                },
                {
                    "q": "What is the purpose of the LIMIT clause in a SELECT statement?",
                    "options": [
                        "To filter rows based on a condition",
                        "To group rows with the same values",
                        "To restrict the number of rows returned",
                        "To sort the result set"
                    ],
                    "a": 2,
                    "ex": "The LIMIT clause is used to constrain the number of rows returned by a SELECT statement."
                },
                {
                    "q": "Which statement is used to remove a table from the database?",
                    "options": [
                        "DELETE TABLE",
                        "REMOVE TABLE",
                        "DROP TABLE",
                        "ALTER TABLE"
                    ],
                    "a": 2,
                    "ex": "The DROP TABLE statement is used to completely remove a table definition and all its data from the database."
                }
            ]
        },
        {
            "id": "er-diagrams-relational-models",
            "title": "ER Diagrams and Relational Models",
            "questions": [
                {
                    "q": "What does ER in ER Diagram stand for?",
                    "options": [
                        "Element Relationship",
                        "Entity Relationship",
                        "Essential Relation",
                        "Extended Relationship"
                    ],
                    "a": 1,
                    "ex": "ER stands for Entity Relationship, a high-level conceptual data model."
                },
                {
                    "q": "In an ER Diagram, what is represented by a rectangle?",
                    "options": [
                        "Attribute",
                        "Relationship",
                        "Entity Set",
                        "Weak Entity Set"
                    ],
                    "a": 2,
                    "ex": "Rectangles in an ER Diagram represent entity sets, which are collections of entities of the same type."
                },
                {
                    "q": "In an ER Diagram, what is represented by an oval?",
                    "options": [
                        "Entity Set",
                        "Relationship",
                        "Attribute",
                        "Key Attribute"
                    ],
                    "a": 2,
                    "ex": "Ovals (or ellipses) in an ER Diagram represent attributes, which are properties of an entity or a relationship."
                },
                {
                    "q": "In an ER Diagram, what is represented by a diamond?",
                    "options": [
                        "Entity Set",
                        "Relationship Set",
                        "Attribute",
                        "Weak Entity Set"
                    ],
                    "a": 1,
                    "ex": "Diamonds in an ER Diagram represent relationship sets, which are associations among two or more entity sets."
                },
                {
                    "q": "What is an entity in the context of ER Diagrams?",
                    "options": [
                        "A property of an object",
                        "A connection between objects",
                        "A real-world object or concept",
                        "A table in a database"
                    ],
                    "a": 2,
                    "ex": "An entity is a distinguishable real-world object or concept, such as a person, place, or event."
                },
                {
                    "q": "What is an attribute in the context of ER Diagrams?",
                    "options": [
                        "A link between entities",
                        "A characteristic or property of an entity or relationship",
                        "A collection of entities",
                        "A unique identifier for an entity"
                    ],
                    "a": 1,
                    "ex": "An attribute is a descriptive property possessed by all members of an entity set or a relationship set."
                },
                {
                    "q": "What is a relationship in the context of ER Diagrams?",
                    "options": [
                        "A property of an entity",
                        "An association among two or more entities",
                        "A unique identifier for an entity",
                        "A collection of attributes"
                    ],
                    "a": 1,
                    "ex": "A relationship is an association among two or more entities, representing how they are connected."
                },
                {
                    "q": "What does cardinality represent in an ER Diagram?",
                    "options": [
                        "The number of attributes in an entity",
                        "The number of relationships an entity participates in",
                        "The number of entities in an entity set",
                        "The number of instances of one entity that can be associated with an instance of another entity"
                    ],
                    "a": 3,
                    "ex": "Cardinality describes the number of instances of one entity that can be associated with an instance of another entity in a relationship."
                },
                {
                    "q": "Which type of relationship is represented by a diamond with a double border in some ER notation?",
                    "options": [
                        "Identifying Relationship",
                        "Many-to-Many Relationship",
                        "Weak Entity Relationship",
                        "Recursive Relationship"
                    ],
                    "a": 0,
                    "ex": "A double-bordered diamond represents an identifying relationship, which connects a weak entity set to its identifying owner entity set."
                },
                {
                    "q": "What is a weak entity set?",
                    "options": [
                        "An entity set with many attributes",
                        "An entity set that does not have enough attributes to form a primary key on its own",
                        "An entity set with no relationships",
                        "An entity set that is less important than others"
                    ],
                    "a": 1,
                    "ex": "A weak entity set is an entity set that does not have a primary key of its own and depends on another entity set (the identifying owner) for its existence."
                },
                {
                    "q": "What is the purpose of a primary key in the Relational Model?",
                    "options": [
                        "To sort data in a table",
                        "To uniquely identify each row in a table",
                        "To establish relationships between tables",
                        "To ensure data privacy"
                    ],
                    "a": 1,
                    "ex": "A primary key is a set of one or more attributes that uniquely identifies each tuple (row) in a relation (table)."
                },
                {
                    "q": "What is a foreign key in the Relational Model?",
                    "options": [
                        "A key from another database",
                        "An attribute in one table that refers to the primary key of another table",
                        "A key used for encryption",
                        "A backup key for the primary key"
                    ],
                    "a": 1,
                    "ex": "A foreign key is an attribute or set of attributes in one relation that refers to the primary key of another relation, establishing a link between the tables."
                },
                {
                    "q": "What is a relation in the Relational Model equivalent to?",
                    "options": [
                        "Database",
                        "Table",
                        "Row",
                        "Column"
                    ],
                    "a": 1,
                    "ex": "In the Relational Model, a relation is equivalent to a table, which is a collection of tuples (rows) and attributes (columns)."
                },
                {
                    "q": "What is a tuple in the Relational Model equivalent to?",
                    "options": [
                        "Column",
                        "Table",
                        "Row",
                        "Database"
                    ],
                    "a": 2,
                    "ex": "In the Relational Model, a tuple is equivalent to a row or a record in a table."
                },
                {
                    "q": "What is an attribute in the Relational Model equivalent to?",
                    "options": [
                        "Row",
                        "Table",
                        "Column",
                        "Database"
                    ],
                    "a": 2,
                    "ex": "In the Relational Model, an attribute is equivalent to a column or a field in a table."
                },
                {
                    "q": "What does the degree of a relation refer to?",
                    "options": [
                        "The number of rows",
                        "The number of tables",
                        "The number of attributes",
                        "The number of relationships"
                    ],
                    "a": 2,
                    "ex": "The degree of a relation is the number of attributes (columns) in the relation."
                },
                {
                    "q": "What does the cardinality of a relation refer to?",
                    "options": [
                        "The number of attributes",
                        "The number of tables",
                        "The number of rows",
                        "The number of relationships"
                    ],
                    "a": 2,
                    "ex": "The cardinality of a relation is the number of tuples (rows) in the relation."
                },
                {
                    "q": "What is the purpose of mapping an ER Diagram to a Relational Model?",
                    "options": [
                        "To improve the visual representation",
                        "To translate the conceptual design into a logical database schema",
                        "To add more entities and relationships",
                        "To simplify the diagram"
                    ],
                    "a": 1,
                    "ex": "Mapping an ER Diagram to a Relational Model is the process of converting the conceptual design into a set of tables with attributes, primary keys, and foreign keys, suitable for implementation in a relational database."
                },
                {
                    "q": "Which type of relationship typically requires an intermediate table when mapping to a Relational Model?",
                    "options": [
                        "One-to-One",
                        "One-to-Many",
                        "Many-to-One",
                        "Many-to-Many"
                    ],
                    "a": 3,
                    "ex": "A Many-to-Many relationship between two entity sets is typically represented by creating a new intermediate table (often called a junction or linking table) that includes the primary keys of both related entity sets as foreign keys."
                },
                {
                    "q": "What is a superkey in the Relational Model?",
                    "options": [
                        "Any key that can uniquely identify a row",
                        "The primary key of a table",
                        "A foreign key referencing another table",
                        "A key used for sorting"
                    ],
                    "a": 0,
                    "ex": "A superkey is any set of attributes that can uniquely identify a tuple in a relation. A primary key is a minimal superkey."
                },
                {
                    "q": "What is a candidate key in the Relational Model?",
                    "options": [
                        "Any attribute that is part of a foreign key",
                        "A minimal superkey that can uniquely identify a row",
                        "Any attribute with unique values",
                        "The primary key chosen for a table"
                    ],
                    "a": 1,
                    "ex": "A candidate key is a minimal superkey, meaning it is a superkey such that no proper subset of its attributes is also a superkey. A primary key is chosen from the set of candidate keys."
                },
                {
                    "q": "In an ER Diagram, what does a double oval represent?",
                    "options": [
                        "Multivalued Attribute",
                        "Composite Attribute",
                        "Derived Attribute",
                        "Key Attribute"
                    ],
                    "a": 0,
                    "ex": "A double oval represents a multivalued attribute, which can have multiple values for a single entity instance (e.g., multiple phone numbers for a person)."
                },
                {
                    "q": "In an ER Diagram, what does an oval divided into smaller ovals represent?",
                    "options": [
                        "Multivalued Attribute",
                        "Composite Attribute",
                        "Derived Attribute",
                        "Key Attribute"
                    ],
                    "a": 1,
                    "ex": "An oval divided into smaller ovals represents a composite attribute, which can be divided into smaller sub-attributes (e.g., an Address attribute composed of Street, City, and Zip)."
                },
                {
                    "q": "In an ER Diagram, what does a dashed oval represent?",
                    "options": [
                        "Multivalued Attribute",
                        "Composite Attribute",
                        "Derived Attribute",
                        "Key Attribute"
                    ],
                    "a": 2,
                    "ex": "A dashed oval represents a derived attribute, which can be computed from other attributes (e.g., Age derived from Date of Birth)."
                },
                {
                    "q": "What is participation constraint in an ER Diagram?",
                    "options": [
                        "The number of attributes in an entity",
                        "The number of entities in a set",
                        "Whether the existence of an entity depends on its being related to another entity via a relationship set",
                        "The number of relationships between entities"
                    ],
                    "a": 2,
                    "ex": "Participation constraint specifies whether the existence of an entity is dependent on its participation in a relationship. Total participation (double line) means every entity in the set must participate, while partial participation (single line) means some entities may not."
                },
                {
                    "q": "What is the main principle of the Relational Model?",
                    "options": [
                        "Data is stored in a hierarchical structure",
                        "Data is stored in a network structure",
                        "Data is stored in tables (relations) with relationships defined by foreign keys",
                        "Data is stored as key-value pairs"
                    ],
                    "a": 2,
                    "ex": "The Relational Model is based on the concept of storing data in two-dimensional tables (relations) and defining relationships between these tables using shared attributes, primarily foreign keys."
                },
                {
                    "q": "What is a schema in the context of the Relational Model?",
                    "options": [
                        "The actual data stored in the tables",
                        "The structure of the database, including table definitions, attributes, and constraints",
                        "The queries used to access the data",
                        "The user interface for the database"
                    ],
                    "a": 1,
                    "ex": "The schema in the Relational Model defines the logical structure of the database, specifying the tables, their attributes, data types, and constraints."
                },
                {
                    "q": "Which of the following is NOT a component of the Relational Model?",
                    "options": [
                        "Relations (Tables)",
                        "Tuples (Rows)",
                        "Attributes (Columns)",
                        "Pointers"
                    ],
                    "a": 3,
                    "ex": "The Relational Model does not rely on pointers to connect data. Relationships are established through shared attribute values (foreign keys)."
                },
                {
                    "q": "What is a relationship set in an ER Diagram?",
                    "options": [
                        "A collection of entities",
                        "A collection of attributes",
                        "A collection of relationships of the same type",
                        "A unique identifier for a relationship"
                    ],
                    "a": 2,
                    "ex": "A relationship set is a collection of relationships of the same type among instances of one or more entity sets."
                }
            ]
        },
        {
            "id": "normalization",
            "title": "Normalization",
            "questions": [
                {
                    "q": "What is the primary goal of database normalization?",
                    "options": [
                        "To speed up query execution",
                        "To reduce data redundancy and improve data integrity",
                        "To increase the size of the database",
                        "To complicate the database design"
                    ],
                    "a": 1,
                    "ex": "The main goal of normalization is to minimize data redundancy and eliminate undesirable data anomalies (insertion, update, and deletion anomalies)."
                },
                {
                    "q": "Which of the following is NOT a data anomaly that normalization helps to avoid?",
                    "options": [
                        "Insertion Anomaly",
                        "Deletion Anomaly",
                        "Update Anomaly",
                        "Query Anomaly"
                    ],
                    "a": 3,
                    "ex": "Normalization primarily addresses insertion, deletion, and update anomalies, which occur due to data redundancy. Query anomaly is not a standard term related to normalization."
                },
                {
                    "q": "What is the first normal form (1NF)?",
                    "options": [
                        "All attributes are atomic and there are no repeating groups",
                        "Every non-key attribute is fully functionally dependent on the primary key",
                        "Every non-key attribute is non-transitively dependent on the primary key",
                        "Every determinant is a candidate key"
                    ],
                    "a": 0,
                    "ex": "A relation is in 1NF if all attribute values are atomic (indivisible) and there are no repeating groups (multiple values in a single cell)."
                },
                {
                    "q": "What is the second normal form (2NF)?",
                    "options": [
                        "All attributes are atomic and there are no repeating groups",
                        "Every non-key attribute is fully functionally dependent on the primary key",
                        "Every non-key attribute is non-transitively dependent on the primary key",
                        "Every determinant is a candidate key"
                    ],
                    "a": 1,
                    "ex": "A relation is in 2NF if it is in 1NF and every non-key attribute is fully functionally dependent on the primary key (no partial dependencies)."
                },
                {
                    "q": "What is the third normal form (3NF)?",
                    "options": [
                        "All attributes are atomic and there are no repeating groups",
                        "Every non-key attribute is fully functionally dependent on the primary key",
                        "Every non-key attribute is non-transitively dependent on the primary key",
                        "Every determinant is a candidate key"
                    ],
                    "a": 2,
                    "ex": "A relation is in 3NF if it is in 2NF and every non-key attribute is non-transitively dependent on the primary key (no transitive dependencies)."
                },
                {
                    "q": "What is a functional dependency?",
                    "options": [
                        "A relationship between two tables",
                        "A constraint that describes the relationship between attributes",
                        "A rule for sorting data",
                        "A method for encrypting data"
                    ],
                    "a": 1,
                    "ex": "A functional dependency is a constraint between two sets of attributes in a relation. If A functionally determines B (A -> B), it means that for any two tuples in the relation, if they have the same value for A, they must also have the same value for B."
                },
                {
                    "q": "What is a partial dependency?",
                    "options": [
                        "A dependency where a non-key attribute is dependent on only part of a composite primary key",
                        "A dependency between two non-key attributes",
                        "A dependency where a key attribute is dependent on a non-key attribute",
                        "A dependency that involves all attributes in the relation"
                    ],
                    "a": 0,
                    "ex": "A partial dependency occurs when a non-key attribute is functionally dependent on only a part of a composite primary key."
                },
                {
                    "q": "What is a transitive dependency?",
                    "options": [
                        "A dependency where a non-key attribute is dependent on another non-key attribute",
                        "A dependency where a non-key attribute is dependent on the primary key",
                        "A dependency where a key attribute is dependent on a non-key attribute",
                        "A dependency that involves only two attributes"
                    ],
                    "a": 0,
                    "ex": "A transitive dependency occurs when a non-key attribute is indirectly dependent on the primary key through another non-key attribute (A -> B and B -> C, where A is the primary key and B and C are non-key attributes)."
                },
                {
                    "q": "Boyce-Codd Normal Form (BCNF) is stricter than which normal form?",
                    "options": [
                        "1NF",
                        "2NF",
                        "3NF",
                        "Both 1NF and 2NF"
                    ],
                    "a": 2,
                    "ex": "BCNF is a stricter version of 3NF. A relation is in BCNF if for every non-trivial functional dependency X -> Y, X is a superkey."
                },
                {
                    "q": "When is a relation in BCNF?",
                    "options": [
                        "If it is in 3NF and every non-key attribute is fully functionally dependent on the primary key",
                        "If every determinant is a candidate key",
                        "If there are no partial dependencies",
                        "If there are no transitive dependencies"
                    ],
                    "a": 1,
                    "ex": "A relation is in BCNF if for every non-trivial functional dependency X -> Y, X is a superkey. This means that every determinant (the left side of a functional dependency) must be a candidate key."
                },
                {
                    "q": "Which normal form eliminates partial dependencies?",
                    "options": [
                        "1NF",
                        "2NF",
                        "3NF",
                        "BCNF"
                    ],
                    "a": 1,
                    "ex": "The second normal form (2NF) eliminates partial dependencies by requiring that every non-key attribute be fully functionally dependent on the primary key."
                },
                {
                    "q": "Which normal form eliminates transitive dependencies?",
                    "options": [
                        "1NF",
                        "2NF",
                        "3NF",
                        "BCNF"
                    ],
                    "a": 2,
                    "ex": "The third normal form (3NF) eliminates transitive dependencies by requiring that every non-key attribute be non-transitively dependent on the primary key."
                },
                {
                    "q": "Which normal form is considered desirable for most database designs?",
                    "options": [
                        "1NF",
                        "2NF",
                        "3NF",
                        "BCNF"
                    ],
                    "a": 2,
                    "ex": "Third normal form (3NF) is generally considered a good balance between reducing redundancy and maintaining performance for most database applications."
                },
                {
                    "q": "What can be a disadvantage of excessive normalization?",
                    "options": [
                        "Increased data redundancy",
                        "More complex queries due to joins",
                        "Increased data anomalies",
                        "Slower updates"
                    ],
                    "a": 1,
                    "ex": "Excessive normalization (going beyond what is necessary) can lead to a large number of tables, requiring more complex queries with multiple joins, which can sometimes impact performance."
                },
                {
                    "q": "If a relation is in BCNF, is it also in 3NF?",
                    "options": [
                        "Yes",
                        "No",
                        "Only if it has a single primary key",
                        "Only if it has no non-key attributes"
                    ],
                    "a": 0,
                    "ex": "Yes, BCNF is a stricter form of 3NF. If a relation is in BCNF, it automatically satisfies the conditions for 3NF."
                },
                {
                    "q": "If a relation is in 3NF, is it always in BCNF?",
                    "options": [
                        "Yes",
                        "No",
                        "Only if there are no overlapping candidate keys",
                        "Only if there are no non-key attributes"
                    ],
                    "a": 1,
                    "ex": "No, a relation in 3NF is not necessarily in BCNF. A relation might be in 3NF but not BCNF if there are overlapping candidate keys and a non-key attribute is functionally dependent on a determinant that is not a candidate key."
                },
                {
                    "q": "Which normal form is characterized by the rule 'Every non-key attribute is dependent on the key, the whole key, and nothing but the key'?",
                    "options": [
                        "1NF",
                        "2NF",
                        "3NF",
                        "BCNF"
                    ],
                    "a": 2,
                    "ex": "This phrase is a mnemonic for 3NF, addressing the elimination of partial and transitive dependencies. 'Dependent on the key' relates to 1NF, 'the whole key' relates to 2NF (full functional dependency), and 'nothing but the key' relates to 3NF (non-transitive dependency)."
                },
                {
                    "q": "Denormalization is sometimes performed for what reason?",
                    "options": [
                        "To increase data redundancy",
                        "To improve query performance",
                        "To make the database design more complex",
                        "To eliminate all data anomalies"
                    ],
                    "a": 1,
                    "ex": "Denormalization is the process of intentionally introducing redundancy or grouping data to improve query performance, often by reducing the number of joins required."
                },
                {
                    "q": "What is the definition of a superkey?",
                    "options": [
                        "An attribute that uniquely identifies a tuple",
                        "A set of attributes that uniquely identifies a tuple",
                        "The primary key of a relation",
                        "A foreign key referencing another relation"
                    ],
                    "a": 1,
                    "ex": "A superkey is any set of attributes that uniquely identifies each tuple in a relation."
                },
                {
                    "q": "What is the definition of a candidate key?",
                    "options": [
                        "An attribute that is part of a foreign key",
                        "A minimal superkey",
                        "Any attribute with unique values",
                        "The primary key chosen for a table"
                    ],
                    "a": 1,
                    "ex": "A candidate key is a minimal superkey, meaning it is a superkey from which no attribute can be removed without losing the uniqueness property."
                },
                {
                    "q": "Which normal form deals with multi-valued dependencies?",
                    "options": [
                        "3NF",
                        "BCNF",
                        "4NF",
                        "5NF"
                    ],
                    "a": 2,
                    "ex": "Fourth Normal Form (4NF) addresses multi-valued dependencies."
                },
                {
                    "q": "Which normal form deals with join dependencies?",
                    "options": [
                        "3NF",
                        "BCNF",
                        "4NF",
                        "5NF"
                    ],
                    "a": 3,
                    "ex": "Fifth Normal Form (5NF), also known as Project-Join Normal Form (PJNF), addresses join dependencies."
                },
                {
                    "q": "What is the update anomaly?",
                    "options": [
                        "Difficulty inserting new data without having related data",
                        "Difficulty deleting data without losing related data",
                        "Inconsistency in data when updating redundant information",
                        "Inability to query the database correctly"
                    ],
                    "a": 2,
                    "ex": "An update anomaly occurs when redundant data is not updated consistently across all its occurrences, leading to data inconsistency."
                },
                {
                    "q": "What is the insertion anomaly?",
                    "options": [
                        "Difficulty inserting new data without having related data",
                        "Difficulty deleting data without losing related data",
                        "Inconsistency in data when updating redundant information",
                        "Inability to query the database correctly"
                    ],
                    "a": 0,
                    "ex": "An insertion anomaly occurs when it is not possible to insert data about a new entity without having data about another related entity."
                },
                {
                    "q": "What is the deletion anomaly?",
                    "options": [
                        "Difficulty inserting new data without having related data",
                        "Difficulty deleting data without losing related data",
                        "Inconsistency in data when updating redundant information",
                        "Inability to query the database correctly"
                    ],
                    "a": 1,
                    "ex": "A deletion anomaly occurs when deleting data about one entity unintentionally deletes data about another related entity because the data is stored together."
                },
                {
                    "q": "Which of the following is a property of a relation in any normal form (including 1NF)?",
                    "options": [
                        "Every determinant is a candidate key",
                        "All attributes are atomic",
                        "There are no partial dependencies",
                        "There are no transitive dependencies"
                    ],
                    "a": 1,
                    "ex": "The fundamental requirement for a relation to be in First Normal Form (1NF) is that all its attribute values must be atomic and there should be no repeating groups."
                }
            ]
        },
        {
            "id": "keys-indexes",
            "title": "Keys and Indexes",
            "questions": [
                {
                    "q": "Which key is used to uniquely identify each row in a database table?",
                    "options": [
                        "Foreign Key",
                        "Superkey",
                        "Primary Key",
                        "Candidate Key"
                    ],
                    "a": 2,
                    "ex": "The primary key is a special type of candidate key chosen to uniquely identify each tuple (row) in a relation (table)."
                },
                {
                    "q": "Which key is an attribute or set of attributes in one table that refers to the primary key of another table?",
                    "options": [
                        "Primary Key",
                        "Candidate Key",
                        "Foreign Key",
                        "Superkey"
                    ],
                    "a": 2,
                    "ex": "A foreign key is used to establish and enforce a link between data in two tables, referencing the primary key of the related table."
                },
                {
                    "q": "Which of the following is a set of one or more attributes that can uniquely identify a tuple in a relation?",
                    "options": [
                        "Primary Key",
                        "Foreign Key",
                        "Superkey",
                        "Secondary Key"
                    ],
                    "a": 2,
                    "ex": "A superkey is any set of attributes that, taken together, can uniquely identify a record in a table."
                },
                {
                    "q": "Which of the following is a minimal superkey?",
                    "options": [
                        "Primary Key",
                        "Foreign Key",
                        "Secondary Key",
                        "Candidate Key"
                    ],
                    "a": 3,
                    "ex": "A candidate key is a superkey such that no proper subset of its attributes is also a superkey. It is a minimal set of attributes that can uniquely identify a tuple."
                },
                {
                    "q": "Can a primary key contain NULL values?",
                    "options": [
                        "Yes",
                        "No",
                        "Only if it's a composite key",
                        "Depends on the database system"
                    ],
                    "a": 1,
                    "ex": "A primary key constraint enforces both uniqueness and NOT NULL constraints. Therefore, a primary key cannot contain NULL values."
                },
                {
                    "q": "Can a foreign key contain NULL values?",
                    "options": [
                        "Yes",
                        "No",
                        "Only if the referenced primary key is NULL",
                        "Depends on the database system"
                    ],
                    "a": 0,
                    "ex": "Yes, a foreign key can contain NULL values, unless the foreign key column is also defined with a NOT NULL constraint."
                },
                {
                    "q": "What is the purpose of an index in a database?",
                    "options": [
                        "To store data in a sorted order",
                        "To improve the speed of data retrieval operations",
                        "To enforce data integrity constraints",
                        "To reduce data redundancy"
                    ],
                    "a": 1,
                    "ex": "Indexes are data structures that improve the speed of data retrieval operations on a database table, similar to an index in a book."
                },
                {
                    "q": "Which type of index physically orders the data in the table according to the index key?",
                    "options": [
                        "Non-clustered Index",
                        "Clustered Index",
                        "Full-text Index",
                        "Bitmap Index"
                    ],
                    "a": 1,
                    "ex": "A clustered index determines the physical order of data in a table. A table can have only one clustered index."
                },
                {
                    "q": "Which type of index does NOT affect the physical order of data in the table but stores the index data separately from the actual data?",
                    "options": [
                        "Clustered Index",
                        "Non-clustered Index",
                        "Primary Index",
                        "Unique Index"
                    ],
                    "a": 1,
                    "ex": "A non-clustered index stores the index structure (key values and pointers to data rows) separately from the table data. A table can have multiple non-clustered indexes."
                },
                {
                    "q": "Which key is used to enforce uniqueness on a column or set of columns, but unlike a primary key, it can allow one NULL value?",
                    "options": [
                        "Primary Key",
                        "Foreign Key",
                        "Unique Key",
                        "Candidate Key"
                    ],
                    "a": 2,
                    "ex": "A unique key constraint ensures that all values in a column or set of columns are unique. In most SQL implementations, a unique key allows one NULL value."
                },
                {
                    "q": "Which of the following statements about indexes is generally true?",
                    "options": [
                        "Indexes speed up both data retrieval and data modification operations",
                        "Indexes speed up data retrieval but can slow down data modification operations",
                        "Indexes slow down data retrieval but speed up data modification operations",
                        "Indexes have no impact on data retrieval or modification speed"
                    ],
                    "a": 1,
                    "ex": "Indexes significantly speed up SELECT queries (data retrieval). However, they can slow down INSERT, UPDATE, and DELETE operations because the index structure must also be updated."
                },
                {
                    "q": "What is a composite key?",
                    "options": [
                        "A key that consists of a single attribute",
                        "A key that consists of two or more attributes",
                        "A key that is used to establish relationships between tables",
                        "A key that uniquely identifies a foreign table"
                    ],
                    "a": 1,
                    "ex": "A composite key is a key (primary, unique, or foreign) that is made up of two or more attributes."
                },
                {
                    "q": "Which key is used to establish relationships between tables and maintain referential integrity?",
                    "options": [
                        "Primary Key",
                        "Candidate Key",
                        "Superkey",
                        "Foreign Key"
                    ],
                    "a": 3,
                    "ex": "Foreign keys are crucial for linking related tables and enforcing referential integrity, ensuring that relationships between data are valid."
                },
                {
                    "q": "What is a secondary key?",
                    "options": [
                        "A key used to uniquely identify a row",
                        "A key used to establish relationships between tables",
                        "An attribute or set of attributes that can be used for retrieval purposes, but does not necessarily uniquely identify a row",
                        "The primary key of a related table"
                    ],
                    "a": 2,
                    "ex": "A secondary key (or alternate key) is a candidate key that is not chosen as the primary key. It can still be used for indexing and searching, but it is not the main unique identifier."
                },
                {
                    "q": "When is it generally beneficial to create an index on a column?",
                    "options": [
                        "When the column is rarely used in WHERE clauses",
                        "When the column has a small number of distinct values",
                        "When the column is frequently used in WHERE clauses or for sorting",
                        "When the table is very small"
                    ],
                    "a": 2,
                    "ex": "Indexes are most beneficial on columns that are frequently used in filtering (WHERE clauses), joining tables, or sorting results (ORDER BY clauses)."
                },
                {
                    "q": "What happens when you define a Primary Key on a column?",
                    "options": [
                        "A foreign key is automatically created",
                        "A clustered index is typically created automatically (though this can vary by RDBMS)",
                        "The column can contain NULL values",
                        "The column is automatically encrypted"
                    ],
                    "a": 1,
                    "ex": "In most relational database management systems (RDBMS), defining a primary key constraint automatically creates a clustered index on that column(s), which physically orders the data."
                },
                {
                    "q": "What is the purpose of referential integrity, enforced by foreign keys?",
                    "options": [
                        "To ensure that all data is unique",
                        "To prevent actions that would destroy links between tables",
                        "To improve the performance of joins",
                        "To encrypt data in related tables"
                    ],
                    "a": 1,
                    "ex": "Referential integrity ensures that relationships between tables are maintained. For example, it prevents deleting a row in a parent table if there are dependent rows in a child table (unless specified otherwise)."
                },
                {
                    "q": "Which of the following is a key that is chosen from the set of candidate keys to be the main unique identifier for a relation?",
                    "options": [
                        "Superkey",
                        "Foreign Key",
                        "Unique Key",
                        "Primary Key"
                    ],
                    "a": 3,
                    "ex": "The primary key is the selected candidate key that serves as the principal means of identifying tuples in a relation."
                },
                {
                    "q": "What is an index scan?",
                    "options": [
                        "Reading every row in the table",
                        "Reading only the rows that match the index key",
                        "Reading the entire index structure",
                        "Updating the index after data modification"
                    ],
                    "a": 1,
                    "ex": "An index scan involves reading entries from the index to locate the relevant data rows, which is typically much faster than scanning the entire table (table scan)."
                },
                {
                    "q": "What is the role of a surrogate key?",
                    "options": [
                        "To link two tables together",
                        "A system-generated key with no intrinsic meaning, used as a primary key",
                        "A key composed of multiple attributes",
                        "A key used for encryption"
                    ],
                    "a": 1,
                    "ex": "A surrogate key is an artificial key, typically a system-generated number, used as a primary key when natural keys are complex, unstable, or non-existent. It has no business meaning."
                },
                {
                    "q": "Which type of index is best suited for columns with a low cardinality (few distinct values)?",
                    "options": [
                        "B-tree Index",
                        "Hash Index",
                        "Bitmap Index",
                        "Clustered Index"
                    ],
                    "a": 2,
                    "ex": "Bitmap indexes are efficient for columns with low cardinality because they use bitmaps (sequences of bits) to represent the presence or absence of values, which is space-efficient for few distinct values."
                },
                {
                    "q": "What is an index seek?",
                    "options": [
                        "Reading every row in the table",
                        "Scanning through the index sequentially",
                        "Directly locating specific rows using the index structure",
                        "Updating the index"
                    ],
                    "a": 2,
                    "ex": "An index seek is the most efficient way to use an index. It involves directly navigating the index structure (like a tree) to find the location of specific data rows based on the search key."
                },
                {
                    "q": "Which type of index is the most common and is implemented as a balanced tree structure?",
                    "options": [
                        "Hash Index",
                        "Bitmap Index",
                        "B-tree Index",
                        "Full-text Index"
                    ],
                    "a": 2,
                    "ex": "B-tree indexes are the most widely used type of index in relational databases due to their efficiency in handling a wide range of queries, including exact matches and range queries."
                },
                {
                    "q": "What is a covering index?",
                    "options": [
                        "An index that includes all columns in the table",
                        "An index that includes all columns required to satisfy a query, so the database does not need to access the table data",
                        "An index that covers multiple tables",
                        "An index that is automatically created"
                    ],
                    "a": 1,
                    "ex": "A covering index is an index that includes all the columns needed for a specific query, allowing the database to retrieve all required data directly from the index without having to access the base table, which can significantly improve performance."
                },
                {
                    "q": "Which key is used to uniquely identify a record within a table, and is often the same as the primary key?",
                    "options": [
                        "Foreign Key",
                        "Candidate Key",
                        "Unique Key",
                        "Primary Key"
                    ],
                    "a": 3,
                    "ex": "While a candidate key can uniquely identify a record, the primary key is the specific candidate key designated as the principal identifier for the table."
                }
            ]
        },
        {
            "id": "transactions-concurrency",
            "title": "Transactions and Concurrency",
            "questions": [
                {
                    "q": "What is a database transaction?",
                    "options": [
                        "A single database operation",
                        "A collection of database operations that are treated as a single logical unit of work",
                        "A database query",
                        "A connection to the database"
                    ],
                    "a": 1,
                    "ex": "A transaction is a sequence of one or more database operations (like SELECT, INSERT, UPDATE, DELETE) that are executed as a single, indivisible unit. Either all operations in a transaction are completed successfully, or none of them are."
                },
                {
                    "q": "What does the 'A' in ACID properties stand for?",
                    "options": [
                        "Availability",
                        "Atomicity",
                        "Access",
                        "Authentication"
                    ],
                    "a": 1,
                    "ex": "ACID is an acronym for Atomicity, Consistency, Isolation, and Durability, which are properties guaranteeing reliable transaction processing."
                },
                {
                    "q": "What does the 'C' in ACID properties stand for?",
                    "options": [
                        "Concurrency",
                        "Commitment",
                        "Consistency",
                        "Control"
                    ],
                    "a": 2,
                    "ex": "Consistency ensures that a transaction brings the database from one valid state to another, maintaining all data integrity rules."
                },
                {
                    "q": "What does the 'I' in ACID properties stand for?",
                    "options": [
                        "Indexing",
                        "Integrity",
                        "Isolation",
                        "Interface"
                    ],
                    "a": 2,
                    "ex": "Isolation ensures that concurrent transactions do not interfere with each other. The outcome of concurrent transactions should be the same as if they were executed sequentially."
                },
                {
                    "q": "What does the 'D' in ACID properties stand for?",
                    "options": [
                        "Data",
                        "Dependency",
                        "Durability",
                        "Distribution"
                    ],
                    "a": 2,
                    "ex": "Durability ensures that once a transaction is committed, its changes are permanent and will survive system failures."
                },
                {
                    "q": "Which ACID property ensures that either all operations of a transaction are completed, or none are?",
                    "options": [
                        "Consistency",
                        "Isolation",
                        "Durability",
                        "Atomicity"
                    ],
                    "a": 3,
                    "ex": "Atomicity means that a transaction is treated as an atomic unit. If any part of the transaction fails, the entire transaction is rolled back, leaving the database unchanged."
                },
                {
                    "q": "What is concurrency control in databases?",
                    "options": [
                        "Managing simultaneous access to the database by multiple users or applications",
                        "Controlling the flow of data in the network",
                        "Ensuring that transactions are executed quickly",
                        "Securing the database from unauthorized access"
                    ],
                    "a": 0,
                    "ex": "Concurrency control is the management of simultaneous operations on a database to ensure data consistency and isolation among concurrent transactions."
                },
                {
                    "q": "Which of the following is a common technique used for concurrency control?",
                    "options": [
                        "Indexing",
                        "Normalization",
                        "Locking",
                        "Encryption"
                    ],
                    "a": 2,
                    "ex": "Locking is a widely used concurrency control mechanism where transactions acquire locks on data items to prevent other transactions from accessing or modifying them simultaneously."
                },
                {
                    "q": "What is a deadlock in the context of database concurrency?",
                    "options": [
                        "A transaction that fails to commit",
                        "A situation where two or more transactions are blocked indefinitely, waiting for each other to release resources",
                        "A performance issue caused by too many concurrent transactions",
                        "A failure to connect to the database"
                    ],
                    "a": 1,
                    "ex": "A deadlock occurs when two or more transactions are in a circular waiting state, each holding a resource that the others need."
                },
                {
                    "q": "Which isolation level allows a transaction to read data that has been modified by another transaction but not yet committed?",
                    "options": [
                        "Read Uncommitted",
                        "Read Committed",
                        "Repeatable Read",
                        "Serializable"
                    ],
                    "a": 0,
                    "ex": "Read Uncommitted is the lowest isolation level and allows transactions to see uncommitted changes made by other transactions, leading to dirty reads."
                },
                {
                    "q": "Which isolation level ensures that a transaction only reads data that has been committed?",
                    "options": [
                        "Read Uncommitted",
                        "Read Committed",
                        "Repeatable Read",
                        "Serializable"
                    ],
                    "a": 1,
                    "ex": "Read Committed ensures that a transaction only reads data that has been committed by other transactions, preventing dirty reads."
                },
                {
                    "q": "Which isolation level prevents non-repeatable reads?",
                    "options": [
                        "Read Uncommitted",
                        "Read Committed",
                        "Repeatable Read",
                        "Serializable"
                    ],
                    "a": 2,
                    "ex": "Repeatable Read ensures that if a transaction reads a row multiple times, it will always see the same data, preventing non-repeatable reads."
                },
                {
                    "q": "Which isolation level provides the highest level of isolation, preventing dirty reads, non-repeatable reads, and phantom reads?",
                    "options": [
                        "Read Uncommitted",
                        "Read Committed",
                        "Repeatable Read",
                        "Serializable"
                    ],
                    "a": 3,
                    "ex": "Serializable is the highest isolation level and ensures that concurrent transactions produce the same result as if they were executed sequentially, preventing all types of read anomalies."
                },
                {
                    "q": "What is a phantom read?",
                    "options": [
                        "Reading uncommitted data",
                        "Reading the same data multiple times and getting different values",
                        "Reading a set of rows and then re-reading the same query and getting a different set of rows (due to insertions or deletions by other transactions)",
                        "Reading corrupted data"
                    ],
                    "a": 2,
                    "ex": "A phantom read occurs when a transaction reads a set of rows based on a condition, and then another transaction inserts or deletes rows that match the condition, so a subsequent read by the first transaction returns a different set of rows."
                },
                {
                    "q": "What is a dirty read?",
                    "options": [
                        "Reading committed data",
                        "Reading data that has been modified by another transaction but not yet committed",
                        "Reading data that has been deleted",
                        "Reading duplicate data"
                    ],
                    "a": 1,
                    "ex": "A dirty read occurs when a transaction reads data that has been written by another transaction that has not yet committed. If the other transaction is rolled back, the first transaction will have read invalid data."
                },
                {
                    "q": "What is a non-repeatable read?",
                    "options": [
                        "Reading uncommitted data",
                        "Reading the same data multiple times within the same transaction and getting different values (due to updates by other committed transactions)",
                        "Reading a set of rows and then re-reading the same query and getting a different set of rows",
                        "Reading corrupted data"
                    ],
                    "a": 1,
                    "ex": "A non-repeatable read occurs when a transaction reads a row, and then another transaction updates or deletes that row and commits. A subsequent read of the same row by the first transaction will yield different data or indicate the row is deleted."
                },
                {
                    "q": "Which concurrency control protocol requires transactions to obtain all locks before starting any operations?",
                    "options": [
                        "Two-Phase Locking (2PL)",
                        "Timestamp Ordering",
                        "Validation-Based Protocol",
                        "Optimistic Concurrency Control"
                    ],
                    "a": 0,
                    "ex": "Two-Phase Locking (2PL) is a concurrency control protocol that ensures serializability by dividing transaction execution into two phases: a growing phase (acquiring locks) and a shrinking phase (releasing locks)."
                },
                {
                    "q": "What is the growing phase in Two-Phase Locking (2PL)?",
                    "options": [
                        "The phase where a transaction releases locks",
                        "The phase where a transaction acquires locks",
                        "The phase where a transaction performs data modifications",
                        "The phase where a transaction reads data"
                    ],
                    "a": 1,
                    "ex": "In the growing phase of 2PL, a transaction can acquire locks but cannot release any locks."
                },
                {
                    "q": "What is the shrinking phase in Two-Phase Locking (2PL)?",
                    "options": [
                        "The phase where a transaction acquires locks",
                        "The phase where a transaction releases locks",
                        "The phase where a transaction performs data modifications",
                        "The phase where a transaction reads data"
                    ],
                    "a": 1,
                    "ex": "In the shrinking phase of 2PL, a transaction can release locks but cannot acquire any new locks."
                },
                {
                    "q": "Which concurrency control technique assigns a unique timestamp to each transaction to order their execution?",
                    "options": [
                        "Locking",
                        "Serialization",
                        "Timestamp Ordering",
                        "Validation-Based Protocol"
                    ],
                    "a": 2,
                    "ex": "Timestamp Ordering is a concurrency control technique that uses timestamps assigned to transactions to determine the order in which they should be executed to ensure serializability."
                },
                {
                    "q": "What is a distributed transaction?",
                    "options": [
                        "A transaction that accesses data in multiple tables",
                        "A transaction that involves multiple users",
                        "A transaction that accesses data stored across multiple databases or locations",
                        "A transaction that uses distributed processing"
                    ],
                    "a": 2,
                    "ex": "A distributed transaction is a transaction that performs operations on data located in multiple, geographically separated databases or data sources."
                },
                {
                    "q": "Which protocol is commonly used to ensure atomicity in distributed transactions?",
                    "options": [
                        "Two-Phase Locking (2PL)",
                        "Timestamp Ordering",
                        "Two-Phase Commit (2PC)",
                        "Three-Phase Commit (3PC)"
                    ],
                    "a": 2,
                    "ex": "Two-Phase Commit (2PC) is a distributed consensus algorithm used to ensure that all participants in a distributed transaction either commit or abort the transaction together, guaranteeing atomicity."
                },
                {
                    "q": "What is the role of the coordinator in a Two-Phase Commit (2PC) protocol?",
                    "options": [
                        "To execute the transaction operations",
                        "To manage the locks for all participants",
                        "To orchestrate the commit or abort decision among all participants",
                        "To store the transaction log"
                    ],
                    "a": 2,
                    "ex": "The coordinator in 2PC is responsible for initiating the commit process and coordinating with all participating nodes to reach a unanimous decision on whether to commit or abort the transaction."
                },
                {
                    "q": "In the context of transactions, what does 'rollback' mean?",
                    "options": [
                        "To save the changes made by a transaction",
                        "To undo all changes made by a transaction and restore the database to its state before the transaction started",
                        "To apply the changes made by a transaction",
                        "To log the transaction operations"
                    ],
                    "a": 1,
                    "ex": "Rolling back a transaction means undoing all the operations performed by that transaction, effectively canceling its effects and restoring the database to its state before the transaction began."
                },
                {
                    "q": "In the context of transactions, what does 'commit' mean?",
                    "options": [
                        "To undo all changes made by a transaction",
                        "To save the changes made by a transaction permanently to the database",
                        "To log the transaction operations",
                        "To start a new transaction"
                    ],
                    "a": 1,
                    "ex": "Committing a transaction means making all the changes performed by the transaction permanent in the database. Once a transaction is committed, its changes are visible to other transactions and are guaranteed to be durable."
                }
            ]
        },
        {
            "id": "network-types",
            "title": "Types of Networks (LAN, WAN, MAN)",
            "questions": [
                {
                    "q": "What does LAN stand for?",
                    "options": [
                        "Large Area Network",
                        "Local Area Network",
                        "Long Access Network",
                        "Limited Area Network"
                    ],
                    "a": 1,
                    "ex": "LAN stands for Local Area Network, which covers a small geographical area."
                },
                {
                    "q": "What does WAN stand for?",
                    "options": [
                        "Wireless Area Network",
                        "Wide Area Network",
                        "Web Access Network",
                        "Work Area Network"
                    ],
                    "a": 1,
                    "ex": "WAN stands for Wide Area Network, which covers a large geographical area, often connecting multiple LANs."
                },
                {
                    "q": "What does MAN stand for?",
                    "options": [
                        "Mobile Area Network",
                        "Metropolitan Area Network",
                        "Medium Access Network",
                        "Managed Area Network"
                    ],
                    "a": 1,
                    "ex": "MAN stands for Metropolitan Area Network, which typically covers the area of a city or a large campus."
                },
                {
                    "q": "Which type of network typically covers a single building or a small campus?",
                    "options": [
                        "WAN",
                        "MAN",
                        "LAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "A Local Area Network (LAN) is designed to cover a limited geographical area, such as an office building, school, or home."
                },
                {
                    "q": "Which type of network typically covers a large geographical area, spanning across cities, states, or even countries?",
                    "options": [
                        "LAN",
                        "MAN",
                        "WAN",
                        "CAN"
                    ],
                    "a": 2,
                    "ex": "A Wide Area Network (WAN) connects devices over vast distances and is often used to link multiple LANs together."
                },
                {
                    "q": "Which type of network typically covers the area of a city or a large metropolitan region?",
                    "options": [
                        "LAN",
                        "WAN",
                        "MAN",
                        "SAN"
                    ],
                    "a": 2,
                    "ex": "A Metropolitan Area Network (MAN) is designed to cover a metropolitan area, providing connectivity within a city or a large campus."
                },
                {
                    "q": "Which type of network is often privately owned and managed?",
                    "options": [
                        "WAN",
                        "MAN",
                        "LAN",
                        "All of the above"
                    ],
                    "a": 2,
                    "ex": "LANs are typically privately owned and managed by the organization or individual using them."
                },
                {
                    "q": "Which type of network often utilizes public telecommunication lines or services?",
                    "options": [
                        "LAN",
                        "MAN",
                        "WAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "WANs often rely on public infrastructure like telephone lines, fiber optic cables, or satellite links to connect distant locations."
                },
                {
                    "q": "Which type of network typically has the highest data transfer rates and lowest latency?",
                    "options": [
                        "WAN",
                        "MAN",
                        "LAN",
                        "All are equal"
                    ],
                    "a": 2,
                    "ex": "Due to their limited geographical scope and dedicated infrastructure, LANs generally offer higher bandwidth and lower latency compared to MANs and WANs."
                },
                {
                    "q": "The Internet is an example of which type of network?",
                    "options": [
                        "LAN",
                        "MAN",
                        "WAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "The Internet is the largest example of a Wide Area Network (WAN), connecting networks globally."
                },
                {
                    "q": "A network connecting different buildings within a university campus is an example of which type of network?",
                    "options": [
                        "LAN",
                        "WAN",
                        "MAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "A campus network, connecting multiple buildings within a limited geographical area, often falls under the definition of a Metropolitan Area Network (MAN)."
                },
                {
                    "q": "A network in a home connecting computers, printers, and other devices is an example of which type of network?",
                    "options": [
                        "WAN",
                        "MAN",
                        "LAN",
                        "SAN"
                    ],
                    "a": 2,
                    "ex": "A home network, connecting devices within a residence, is a typical example of a Local Area Network (LAN)."
                },
                {
                    "q": "Which network type is characterized by its use over a metropolitan area, connecting multiple LANs together?",
                    "options": [
                        "LAN",
                        "WAN",
                        "MAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "A Metropolitan Area Network (MAN) serves as an intermediate network type, connecting LANs within a city or a large area, often utilizing high-speed links."
                },
                {
                    "q": "Which type of network typically requires routers to connect different segments or networks?",
                    "options": [
                        "LAN",
                        "WAN",
                        "Both WAN and MAN",
                        "Only WAN"
                    ],
                    "a": 2,
                    "ex": "Both WANs and MANs often involve connecting different networks (like LANs) over larger distances, and routers are essential devices for directing traffic between these networks."
                },
                {
                    "q": "Which type of network is typically associated with technologies like Ethernet and Wi-Fi?",
                    "options": [
                        "WAN",
                        "MAN",
                        "LAN",
                        "All of the above"
                    ],
                    "a": 2,
                    "ex": "Ethernet and Wi-Fi are common technologies used to build Local Area Networks (LANs) for wired and wireless connectivity within a limited area."
                },
                {
                    "q": "Which type of network is generally more expensive to set up and maintain due to the larger distances and infrastructure involved?",
                    "options": [
                        "LAN",
                        "MAN",
                        "WAN",
                        "All are equally expensive"
                    ],
                    "a": 2,
                    "ex": "WANs require significant infrastructure and often involve leasing lines from telecommunication providers, making them generally more expensive than LANs and MANs."
                },
                {
                    "q": "What is the primary purpose of a LAN?",
                    "options": [
                        "To connect networks globally",
                        "To provide connectivity within a limited geographical area for resource sharing",
                        "To connect cities together",
                        "To provide internet access to a single device"
                    ],
                    "a": 1,
                    "ex": "The main purpose of a LAN is to enable devices within a small area to share resources like files, printers, and internet connections."
                },
                {
                    "q": "What is the primary purpose of a WAN?",
                    "options": [
                        "To provide high-speed connectivity within a building",
                        "To connect multiple LANs over a large geographical area",
                        "To manage network traffic within a city",
                        "To connect personal devices wirelessly"
                    ],
                    "a": 1,
                    "ex": "WANs are designed to connect geographically dispersed networks (like LANs) to allow communication and resource sharing across long distances."
                },
                {
                    "q": "What is the primary purpose of a MAN?",
                    "options": [
                        "To connect devices within a single room",
                        "To connect multiple LANs within a metropolitan area",
                        "To connect networks globally",
                        "To provide internet access to mobile devices"
                    ],
                    "a": 1,
                    "ex": "MANs bridge the gap between LANs and WANs, providing high-speed connectivity within a city or large campus by connecting various local networks."
                },
                {
                    "q": "Which network topology is commonly used in LANs?",
                    "options": [
                        "Mesh",
                        "Star",
                        "Ring",
                        "Bus"
                    ],
                    "a": 1,
                    "ex": "The Star topology, where all devices connect to a central hub or switch, is a very common and popular topology for LANs due to its ease of management and fault isolation."
                },
                {
                    "q": "Which network type would be most suitable for connecting branches of a large corporation located in different cities?",
                    "options": [
                        "LAN",
                        "MAN",
                        "WAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "A Wide Area Network (WAN) is required to connect geographically dispersed locations like branch offices of a large corporation."
                },
                {
                    "q": "What is the typical transmission medium used in older LANs?",
                    "options": [
                        "Fiber Optic Cable",
                        "Coaxial Cable",
                        "Twisted Pair Cable",
                        "Wireless (Wi-Fi)"
                    ],
                    "a": 2,
                    "ex": "Twisted pair cable (like Cat 5e or Cat 6) has been a very common and cost-effective transmission medium for wired LANs for many years."
                },
                {
                    "q": "Which network type is often owned and operated by a single organization but covers a larger area than a typical LAN?",
                    "options": [
                        "LAN",
                        "WAN",
                        "MAN",
                        "PAN"
                    ],
                    "a": 2,
                    "ex": "While WANs are often leased from service providers, a large organization might own and operate its own private MAN to connect its facilities within a city."
                },
                {
                    "q": "What is the key differentiating factor between a MAN and a WAN?",
                    "options": [
                        "Speed",
                        "Cost",
                        "Geographical Area Covered",
                        "Protocols Used"
                    ],
                    "a": 2,
                    "ex": "The primary difference between a MAN and a WAN is the geographical area they cover. A MAN is limited to a metropolitan area, while a WAN covers a much larger region."
                },
                {
                    "q": "Which of the following is an example of a public WAN?",
                    "options": [
                        "A home Wi-Fi network",
                        "A corporate intranet",
                        "The Internet",
                        "A network connecting devices within a single office"
                    ],
                    "a": 2,
                    "ex": "The Internet is a global network of interconnected networks, representing the largest example of a public Wide Area Network."
                }
            ]
        },
        {
            "id": "osi-tcp-ip-models",
            "title": "OSI and TCP/IP Models",
            "questions": [
                {
                    "q": "How many layers are in the OSI model?",
                    "options": [
                        "4",
                        "5",
                        "7",
                        "8"
                    ],
                    "a": 2,
                    "ex": "The Open Systems Interconnection (OSI) model has seven distinct layers."
                },
                {
                    "q": "How many layers are typically discussed in the TCP/IP model?",
                    "options": [
                        "3",
                        "4",
                        "5",
                        "6"
                    ],
                    "a": 1,
                    "ex": "The TCP/IP model is commonly described with four layers: Application, Transport, Internet, and Network Access (or Link)."
                },
                {
                    "q": "Which layer in the OSI model is responsible for providing network services directly to end-user applications?",
                    "options": [
                        "Presentation Layer",
                        "Session Layer",
                        "Transport Layer",
                        "Application Layer"
                    ],
                    "a": 3,
                    "ex": "The Application Layer is the top layer in the OSI model and interacts directly with software applications that need to communicate over the network."
                },
                {
                    "q": "Which layer in the OSI model is responsible for data encryption, decryption, compression, and translation?",
                    "options": [
                        "Application Layer",
                        "Presentation Layer",
                        "Session Layer",
                        "Transport Layer"
                    ],
                    "a": 1,
                    "ex": "The Presentation Layer is responsible for formatting and transforming data to ensure that it can be understood by the receiving application. This includes handling syntax, encryption, compression, and translation."
                },
                {
                    "q": "Which layer in the OSI model is responsible for establishing, managing, and terminating communication sessions between applications?",
                    "options": [
                        "Application Layer",
                        "Presentation Layer",
                        "Session Layer",
                        "Transport Layer"
                    ],
                    "a": 2,
                    "ex": "The Session Layer manages the dialogue between applications, establishing, coordinating, and terminating conversations (sessions)."
                },
                {
                    "q": "Which layer in the OSI model is responsible for reliable or unreliable data transfer between end systems, including segmentation, flow control, and error control?",
                    "options": [
                        "Network Layer",
                        "Data Link Layer",
                        "Transport Layer",
                        "Session Layer"
                    ],
                    "a": 2,
                    "ex": "The Transport Layer provides end-to-end data transfer services. TCP (Transmission Control Protocol) provides reliable, connection-oriented service, while UDP (User Datagram Protocol) provides unreliable, connectionless service."
                },
                {
                    "q": "Which layer in the OSI model is responsible for logical addressing and routing of data packets across different networks?",
                    "options": [
                        "Transport Layer",
                        "Network Layer",
                        "Data Link Layer",
                        "Physical Layer"
                    ],
                    "a": 1,
                    "ex": "The Network Layer is responsible for determining the best path for data packets to travel from source to destination, using logical addresses like IP addresses."
                },
                {
                    "q": "Which layer in the OSI model is responsible for physical addressing (MAC addresses) and error detection within a local network segment?",
                    "options": [
                        "Network Layer",
                        "Data Link Layer",
                        "Physical Layer",
                        "Transport Layer"
                    ],
                    "a": 1,
                    "ex": "The Data Link Layer handles communication within a local network segment. It is responsible for framing data, physical addressing (MAC addresses), and detecting errors on the link."
                },
                {
                    "q": "Which layer in the OSI model is responsible for the physical transmission of raw bits over the network medium?",
                    "options": [
                        "Data Link Layer",
                        "Network Layer",
                        "Physical Layer",
                        "Transport Layer"
                    ],
                    "a": 2,
                    "ex": "The Physical Layer deals with the physical characteristics of the network medium (cables, connectors, etc.) and transmits raw data bits."
                },
                {
                    "q": "Which layer in the TCP/IP model corresponds to the OSI model's Application, Presentation, and Session Layers?",
                    "options": [
                        "Transport Layer",
                        "Internet Layer",
                        "Application Layer",
                        "Network Access Layer"
                    ],
                    "a": 2,
                    "ex": "The Application Layer in the TCP/IP model combines the functions of the Application, Presentation, and Session Layers of the OSI model."
                },
                {
                    "q": "Which layer in the TCP/IP model is responsible for providing reliable and unreliable data transfer services?",
                    "options": [
                        "Application Layer",
                        "Transport Layer",
                        "Internet Layer",
                        "Network Access Layer"
                    ],
                    "a": 1,
                    "ex": "The Transport Layer in the TCP/IP model (corresponding to the OSI Transport Layer) provides end-to-end communication services using protocols like TCP and UDP."
                },
                {
                    "q": "Which layer in the TCP/IP model is responsible for logical addressing and routing?",
                    "options": [
                        "Transport Layer",
                        "Internet Layer",
                        "Network Access Layer",
                        "Application Layer"
                    ],
                    "a": 1,
                    "ex": "The Internet Layer in the TCP/IP model (corresponding to the OSI Network Layer) handles logical addressing (IP addresses) and routing of packets across networks."
                },
                {
                    "q": "Which layer in the TCP/IP model is responsible for physical addressing and data transmission over the local network?",
                    "options": [
                        "Internet Layer",
                        "Transport Layer",
                        "Application Layer",
                        "Network Access Layer"
                    ],
                    "a": 3,
                    "ex": "The Network Access Layer (also called the Link Layer or Network Interface Layer) in the TCP/IP model combines the functions of the OSI Data Link and Physical Layers, dealing with physical addressing and data transmission on the local network."
                },
                {
                    "q": "Which protocol operates at the Transport Layer of the TCP/IP model and provides reliable, connection-oriented communication?",
                    "options": [
                        "IP",
                        "UDP",
                        "TCP",
                        "HTTP"
                    ],
                    "a": 2,
                    "ex": "TCP (Transmission Control Protocol) is a Transport Layer protocol that provides reliable, ordered, and error-checked delivery of a stream of octets between applications."
                },
                {
                    "q": "Which protocol operates at the Transport Layer of the TCP/IP model and provides unreliable, connectionless communication?",
                    "options": [
                        "IP",
                        "TCP",
                        "UDP",
                        "FTP"
                    ],
                    "a": 2,
                    "ex": "UDP (User Datagram Protocol) is a Transport Layer protocol that provides a simple, connectionless service with no guarantees of delivery, order, or duplicate protection."
                },
                {
                    "q": "Which protocol operates at the Internet Layer of the TCP/IP model and is responsible for addressing and routing packets?",
                    "options": [
                        "TCP",
                        "UDP",
                        "IP",
                        "ARP"
                    ],
                    "a": 2,
                    "ex": "IP (Internet Protocol) is the primary protocol at the Internet Layer, responsible for the logical addressing and routing of data packets across interconnected networks."
                },
                {
                    "q": "What is the primary function of the Network Layer in the OSI model?",
                    "options": [
                        "Providing end-to-end reliable delivery",
                        "Managing physical connections",
                        "Logical addressing and routing",
                        "Formatting and encrypting data"
                    ],
                    "a": 2,
                    "ex": "The core function of the Network Layer is to provide logical addressing (IP addresses) and determine the best path for packets to reach their destination across networks."
                },
                {
                    "q": "What is the primary function of the Data Link Layer in the OSI model?",
                    "options": [
                        "Establishing communication sessions",
                        "Error detection and correction within a link",
                        "Routing packets between networks",
                        "Providing user interface"
                    ],
                    "a": 1,
                    "ex": "The Data Link Layer focuses on reliable data transfer between two directly connected nodes, handling framing, physical addressing (MAC addresses), and error detection on the link."
                },
                {
                    "q": "Which layer of the OSI model is concerned with the physical characteristics of the transmission medium?",
                    "options": [
                        "Data Link Layer",
                        "Network Layer",
                        "Physical Layer",
                        "Transport Layer"
                    ],
                    "a": 2,
                    "ex": "The Physical Layer deals with the hardware aspects of networking, including cables, connectors, voltage levels, and data transmission rates."
                },
                {
                    "q": "In the TCP/IP model, which layer is responsible for putting data into packets and adding header information for routing?",
                    "options": [
                        "Transport Layer",
                        "Internet Layer",
                        "Network Access Layer",
                        "Application Layer"
                    ],
                    "a": 1,
                    "ex": "The Internet Layer encapsulates data segments from the Transport Layer into IP packets, adding IP headers that contain source and destination IP addresses for routing."
                },
                {
                    "q": "Which layer of the OSI model is responsible for managing dialogue control and synchronization?",
                    "options": [
                        "Presentation Layer",
                        "Session Layer",
                        "Transport Layer",
                        "Application Layer"
                    ],
                    "a": 1,
                    "ex": "The Session Layer is responsible for establishing, managing, and terminating communication sessions between applications, including managing dialogue control (who sends when) and synchronization."
                },
                {
                    "q": "Which layer of the OSI model defines protocols for end-to-end error recovery and flow control?",
                    "options": [
                        "Network Layer",
                        "Data Link Layer",
                        "Transport Layer",
                        "Session Layer"
                    ],
                    "a": 2,
                    "ex": "The Transport Layer, particularly TCP, provides mechanisms for end-to-end error detection, recovery, and flow control to ensure reliable data delivery."
                },
                {
                    "q": "Which layer of the OSI model would a router primarily operate at?",
                    "options": [
                        "Physical Layer",
                        "Data Link Layer",
                        "Network Layer",
                        "Transport Layer"
                    ],
                    "a": 2,
                    "ex": "Routers operate at the Network Layer, using IP addresses to make forwarding decisions and route packets between different networks."
                },
                {
                    "q": "Which layer of the OSI model would a switch primarily operate at?",
                    "options": [
                        "Physical Layer",
                        "Data Link Layer",
                        "Network Layer",
                        "Transport Layer"
                    ],
                    "a": 1,
                    "ex": "Switches typically operate at the Data Link Layer, using MAC addresses to forward frames within a local network segment."
                },
                {
                    "q": "Which layer of the OSI model would a hub primarily operate at?",
                    "options": [
                        "Physical Layer",
                        "Data Link Layer",
                        "Network Layer",
                        "Transport Layer"
                    ],
                    "a": 0,
                    "ex": "Hubs are simple network devices that operate at the Physical Layer, broadcasting incoming data to all connected devices without reading physical addresses."
                },
                {
                    "q": "What is the unit of data at the Network Layer?",
                    "options": [
                        "Segment",
                        "Frame",
                        "Packet",
                        "Bit"
                    ],
                    "a": 2,
                    "ex": "The unit of data at the Network Layer is called a packet (or datagram in the context of IP)."
                },
                {
                    "q": "What is the unit of data at the Transport Layer?",
                    "options": [
                        "Packet",
                        "Frame",
                        "Segment",
                        "Bit"
                    ],
                    "a": 2,
                    "ex": "The unit of data at the Transport Layer is called a segment (for TCP) or a datagram (for UDP)."
                },
                {
                    "q": "What is the unit of data at the Data Link Layer?",
                    "options": [
                        "Packet",
                        "Frame",
                        "Segment",
                        "Bit"
                    ],
                    "a": 1,
                    "ex": "The unit of data at the Data Link Layer is called a frame."
                },
                {
                    "q": "What is the unit of data at the Physical Layer?",
                    "options": [
                        "Packet",
                        "Frame",
                        "Segment",
                        "Bit"
                    ],
                    "a": 3,
                    "ex": "The Physical Layer deals with the transmission of raw bits over the network medium."
                },
                {
                    "q": "Which model was developed first?",
                    "options": [
                        "OSI Model",
                        "TCP/IP Model",
                        "They were developed simultaneously",
                        "Neither was formally developed, they evolved"
                    ],
                    "a": 1,
                    "ex": "The TCP/IP model was developed earlier as part of the ARPANET project, while the OSI model was developed later as a more theoretical and standardized model."
                }
            ]
        },
        {
            "id": "ip-addressing-subnetting",
            "title": "IP Addressing and Subnetting",
            "questions": [
                {
                    "q": "What is an IP address primarily used for?",
                    "options": [
                        "Physical addressing of network devices",
                        "Logical addressing and routing of data packets",
                        "Translating domain names to IP addresses",
                        "Encrypting data transmission"
                    ],
                    "a": 1,
                    "ex": "IP addresses are logical addresses used at the Network Layer (Internet Layer in TCP/IP) to identify devices on a network and enable routing of data packets."
                },
                {
                    "q": "How many bits are in an IPv4 address?",
                    "options": [
                        "32",
                        "64",
                        "128",
                        "256"
                    ],
                    "a": 0,
                    "ex": "An IPv4 address is a 32-bit number, typically represented in dotted-decimal notation (e.g., 192.168.1.1)."
                },
                {
                    "q": "How many bits are in an IPv6 address?",
                    "options": [
                        "32",
                        "64",
                        "128",
                        "256"
                    ],
                    "a": 2,
                    "ex": "An IPv6 address is a 128-bit number, typically represented in hexadecimal notation with colons (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334)."
                },
                {
                    "q": "What is the purpose of a subnet mask?",
                    "options": [
                        "To identify the type of network protocol being used",
                        "To separate the network portion from the host portion of an IP address",
                        "To specify the default gateway address",
                        "To encrypt the IP address"
                    ],
                    "a": 1,
                    "ex": "A subnet mask is used in conjunction with an IP address to determine which part of the IP address represents the network and which part represents the host."
                },
                {
                    "q": "In a network with IP address 192.168.1.0 and subnet mask 255.255.255.0, what is the network address?",
                    "options": [
                        "192.168.1.1",
                        "192.168.1.255",
                        "192.168.1.0",
                        "192.168.0.0"
                    ],
                    "a": 2,
                    "ex": "The network address is obtained by performing a bitwise AND operation between the IP address and the subnet mask. In this case, the network address is 192.168.1.0."
                },
                {
                    "q": "In a network with IP address 192.168.1.0 and subnet mask 255.255.255.0, what is the broadcast address?",
                    "options": [
                        "192.168.1.1",
                        "192.168.1.255",
                        "192.168.1.0",
                        "192.168.0.255"
                    ],
                    "a": 1,
                    "ex": "The broadcast address is the last usable address in a subnet. It is obtained by setting all the host bits to 1. In this case, it's 192.168.1.255."
                },
                {
                    "q": "What is the maximum number of usable host addresses in a subnet with a /24 CIDR notation?",
                    "options": [
                        "254",
                        "255",
                        "256",
                        "512"
                    ],
                    "a": 0,
                    "ex": "A /24 CIDR notation corresponds to a subnet mask of 255.255.255.0. This leaves 8 bits for the host portion (32 - 24 = 8). The number of possible host addresses is 2^8 = 256. However, the network address and broadcast address are not usable for hosts, so the number of usable host addresses is 256 - 2 = 254."
                },
                {
                    "q": "What does CIDR stand for?",
                    "options": [
                        "Classless Internet Data Routing",
                        "Classful Internet Data Routing",
                        "Classless Inter-Domain Routing",
                        "Classful Inter-Domain Routing"
                    ],
                    "a": 2,
                    "ex": "CIDR stands for Classless Inter-Domain Routing, a method for allocating IP addresses and routing IP packets more efficiently than the older classful addressing system."
                },
                {
                    "q": "Which of the following is a private IPv4 address range?",
                    "options": [
                        "11.0.0.0 - 11.255.255.255",
                        "172.16.0.0 - 172.31.255.255",
                        "200.0.0.0 - 200.255.255.255",
                        "224.0.0.0 - 239.255.255.255"
                    ],
                    "a": 1,
                    "ex": "The 172.16.0.0 to 172.31.255.255 range is one of the designated private IPv4 address ranges, used for internal networks and not routable on the public internet. The other private ranges are 10.0.0.0 to 10.255.255.255 and 192.168.0.0 to 192.168.255.255."
                },
                {
                    "q": "What is the loopback IPv4 address?",
                    "options": [
                        "0.0.0.0",
                        "127.0.0.1",
                        "255.255.255.255",
                        "1.1.1.1"
                    ],
                    "a": 1,
                    "ex": "The loopback address (127.0.0.1) is a special IP address used to test the network configuration of the local machine."
                },
                {
                    "q": "What is subnetting?",
                    "options": [
                        "Dividing a single network into smaller, more manageable subnetworks",
                        "Combining multiple networks into a single large network",
                        "Assigning IP addresses to devices manually",
                        "Translating private IP addresses to public IP addresses"
                    ],
                    "a": 0,
                    "ex": "Subnetting is the process of dividing a larger IP network into smaller subnetworks (subnets) to improve network efficiency, security, and manageability."
                },
                {
                    "q": "What is the purpose of a default gateway?",
                    "options": [
                        "To assign IP addresses to devices",
                        "To filter network traffic",
                        "To route traffic to destinations outside the local network",
                        "To resolve domain names"
                    ],
                    "a": 2,
                    "ex": "The default gateway is the IP address of the router or device that allows devices on a local network to send traffic to destinations outside that network."
                },
                {
                    "q": "Which class of IPv4 addresses was historically used for large networks with many hosts?",
                    "options": [
                        "Class A",
                        "Class B",
                        "Class C",
                        "Class D"
                    ],
                    "a": 0,
                    "ex": "Historically, Class A addresses were designed for very large networks. They had a network portion of 8 bits and a host portion of 24 bits."
                },
                {
                    "q": "Which class of IPv4 addresses was historically used for medium-sized networks?",
                    "options": [
                        "Class A",
                        "Class B",
                        "Class C",
                        "Class D"
                    ],
                    "a": 1,
                    "ex": "Historically, Class B addresses were designed for medium-sized networks. They had a network portion of 16 bits and a host portion of 16 bits."
                },
                {
                    "q": "Which class of IPv4 addresses was historically used for small networks with fewer hosts?",
                    "options": [
                        "Class A",
                        "Class B",
                        "Class C",
                        "Class D"
                    ],
                    "a": 2,
                    "ex": "Historically, Class C addresses were designed for small networks. They had a network portion of 24 bits and a host portion of 8 bits."
                },
                {
                    "q": "Which class of IPv4 addresses is reserved for multicast?",
                    "options": [
                        "Class A",
                        "Class B",
                        "Class C",
                        "Class D"
                    ],
                    "a": 3,
                    "ex": "Class D addresses are reserved for multicast communication, where data is sent to a group of destinations simultaneously."
                },
                {
                    "q": "What is the binary representation of the IPv4 subnet mask 255.255.255.0?",
                    "options": [
                        "11111111.11111111.11111111.00000000",
                        "00000000.00000000.00000000.11111111",
                        "11111111.11111111.00000000.00000000",
                        "00000000.11111111.11111111.11111111"
                    ],
                    "a": 0,
                    "ex": "The decimal value 255 in binary is 11111111, and 0 in binary is 00000000. So, 255.255.255.0 in binary is 11111111.11111111.11111111.00000000."
                },
                {
                    "q": "What is the purpose of using private IP addresses?",
                    "options": [
                        "To provide public internet access to devices",
                        "To conserve public IPv4 address space and provide internal network addressing",
                        "To encrypt network traffic",
                        "To identify devices globally"
                    ],
                    "a": 1,
                    "ex": "Private IP addresses are used within internal networks to allow communication between devices without consuming scarce public IPv4 addresses. Network Address Translation (NAT) is used to allow devices with private IP addresses to access the public internet."
                },
                {
                    "q": "Which of the following is NOT a private IPv4 address range?",
                    "options": [
                        "10.0.0.0 - 10.255.255.255",
                        "172.16.0.0 - 172.31.255.255",
                        "192.168.0.0 - 192.168.255.255",
                        "11.0.0.0 - 11.255.255.255"
                    ],
                    "a": 3,
                    "ex": "The 11.0.0.0 - 11.255.255.255 range is a public IPv4 address range, historically part of Class A."
                },
                {
                    "q": "What is the primary reason for the development of IPv6?",
                    "options": [
                        "To improve network security",
                        "To increase the number of available IP addresses",
                        "To provide faster data transfer rates",
                        "To simplify network configuration"
                    ],
                    "a": 1,
                    "ex": "The most significant reason for developing IPv6 was the exhaustion of available IPv4 addresses due to the rapid growth of the internet."
                },
                {
                    "q": "What is the format of an IPv6 address?",
                    "options": [
                        "Dotted-decimal notation",
                        "Hexadecimal notation separated by dots",
                        "Hexadecimal notation separated by colons",
                        "Binary notation"
                    ],
                    "a": 2,
                    "ex": "IPv6 addresses are written as eight groups of four hexadecimal digits, separated by colons (e.g., 2001:0db8:85a3:0000:0000:8a2e:0370:7334)."
                },
                {
                    "q": "In IPv6, what is a subnet ID?",
                    "options": [
                        "The host portion of the address",
                        "The network portion of the address",
                        "A part of the address used for subnetting within a network",
                        "The broadcast address"
                    ],
                    "a": 2,
                    "ex": "In IPv6, the subnet ID is a part of the address that is used for subnetting within a larger network prefix. It allows for the creation of multiple subnets."
                },
                {
                    "q": "What is the prefix length in CIDR notation?",
                    "options": [
                        "The number of bits in the host portion",
                        "The number of bits in the network portion",
                        "The total number of bits in the IP address",
                        "The subnet mask in dotted-decimal form"
                    ],
                    "a": 1,
                    "ex": "In CIDR notation (e.g., /24), the number after the slash represents the prefix length, which indicates the number of bits in the network portion of the IP address."
                },
                {
                    "q": "What is the primary benefit of using CIDR?",
                    "options": [
                        "Improved network security",
                        "More efficient allocation and routing of IP addresses",
                        "Faster network connections",
                        "Simpler network troubleshooting"
                    ],
                    "a": 1,
                    "ex": "CIDR replaced the rigid classful addressing system with a more flexible system that allows for more efficient allocation of IP addresses and reduces the size of routing tables."
                },
                {
                    "q": "What is the range of the first octet in a Class A IPv4 address (in decimal)?",
                    "options": [
                        "1-126",
                        "128-191",
                        "192-223",
                        "224-239"
                    ],
                    "a": 0,
                    "ex": "In the historical classful addressing system, Class A networks had the first octet in the range of 1 to 126."
                },
                {
                    "q": "What is the range of the first octet in a Class B IPv4 address (in decimal)?",
                    "options": [
                        "1-126",
                        "128-191",
                        "192-223",
                        "224-239"
                    ],
                    "a": 1,
                    "ex": "In the historical classful addressing system, Class B networks had the first octet in the range of 128 to 191."
                }
            ]
        },
        {
            "id": "network-devices",
            "title": "Network Devices (Router, Switch, Hub)",
            "questions": [
                {
                    "q": "Which network device operates at the Network Layer (Layer 3) of the OSI model and is used to connect different networks?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Modem"
                    ],
                    "a": 2,
                    "ex": "Routers use IP addresses to determine the best path for data packets and forward them between different networks."
                },
                {
                    "q": "Which network device operates at the Data Link Layer (Layer 2) of the OSI model and is used to connect devices within a local network segment?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 1,
                    "ex": "Switches use MAC addresses to forward data frames to the intended destination device within the same network segment."
                },
                {
                    "q": "Which network device operates at the Physical Layer (Layer 1) of the OSI model and simply broadcasts incoming data to all connected devices?",
                    "options": [
                        "Switch",
                        "Router",
                        "Hub",
                        "Bridge"
                    ],
                    "a": 2,
                    "ex": "Hubs are basic devices that operate at the physical level, repeating incoming signals to all ports without inspecting the data."
                },
                {
                    "q": "Which network device creates separate collision domains for each port?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 1,
                    "ex": "Each port on a switch is typically its own collision domain, reducing collisions and improving network performance."
                },
                {
                    "q": "Which network device connects different broadcast domains?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Bridge"
                    ],
                    "a": 2,
                    "ex": "Routers separate broadcast domains. Broadcast traffic is not forwarded by a router to other networks."
                },
                {
                    "q": "Which network device forwards data based on MAC addresses?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Modem"
                    ],
                    "a": 1,
                    "ex": "Switches maintain a MAC address table to learn which devices are connected to which ports and forward frames accordingly."
                },
                {
                    "q": "Which network device forwards data based on IP addresses?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 2,
                    "ex": "Routers use IP addresses and routing tables to determine the next hop for a data packet on its way to the destination network."
                },
                {
                    "q": "What is the primary function of a router?",
                    "options": [
                        "To amplify network signals",
                        "To connect devices within a single network segment",
                        "To connect different networks and route traffic between them",
                        "To filter network traffic based on MAC addresses"
                    ],
                    "a": 2,
                    "ex": "Routers are responsible for interconnecting networks and directing data traffic across them based on IP addresses."
                },
                {
                    "q": "What is the primary function of a switch?",
                    "options": [
                        "To broadcast data to all devices",
                        "To connect devices within a single network segment and forward traffic intelligently based on MAC addresses",
                        "To connect different networks",
                        "To translate domain names to IP addresses"
                    ],
                    "a": 1,
                    "ex": "Switches provide efficient communication within a local network by forwarding frames only to the intended recipient based on MAC addresses."
                },
                {
                    "q": "What is the primary function of a hub?",
                    "options": [
                        "To forward data intelligently based on addresses",
                        "To connect different networks",
                        "To broadcast incoming data to all connected devices",
                        "To filter network traffic"
                    ],
                    "a": 2,
                    "ex": "Hubs are simple and unintelligent devices that simply repeat the signal received on one port to all other ports."
                },
                {
                    "q": "Which network device is typically used as the default gateway for devices on a local network?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Modem"
                    ],
                    "a": 2,
                    "ex": "The router that connects a local network to other networks (like the internet) serves as the default gateway for devices on the local network."
                },
                {
                    "q": "Which network device has a single collision domain for all its ports?",
                    "options": [
                        "Switch",
                        "Router",
                        "Hub",
                        "Bridge"
                    ],
                    "a": 2,
                    "ex": "In a network connected by a hub, all devices share the same collision domain. If multiple devices transmit simultaneously, a collision occurs."
                },
                {
                    "q": "Which network device is generally more expensive?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 2,
                    "ex": "Routers are typically more complex and expensive than switches and hubs due to their routing capabilities and advanced features."
                },
                {
                    "q": "Which network device operates at the Data Link Layer and connects segments of a LAN, forwarding frames based on MAC addresses but typically having fewer ports than a switch?",
                    "options": [
                        "Hub",
                        "Router",
                        "Repeater",
                        "Bridge"
                    ],
                    "a": 3,
                    "ex": "A bridge is a device that operates at the Data Link Layer and connects two or more network segments, forwarding frames based on MAC addresses. Bridges are often considered predecessors to switches."
                },
                {
                    "q": "What is the primary difference between a switch and a hub?",
                    "options": [
                        "A switch is faster than a hub",
                        "A switch forwards data intelligently to the intended device, while a hub broadcasts data to all devices",
                        "A switch operates at Layer 3, while a hub operates at Layer 1",
                        "A switch has fewer ports than a hub"
                    ],
                    "a": 1,
                    "ex": "The key difference is that switches are intelligent and forward data based on MAC addresses, while hubs are unintelligent repeaters that broadcast data."
                },
                {
                    "q": "What is the primary difference between a router and a switch?",
                    "options": [
                        "A router connects different networks, while a switch connects devices within a single network",
                        "A router operates at Layer 2, while a switch operates at Layer 3",
                        "A router forwards data based on MAC addresses, while a switch forwards data based on IP addresses",
                        "A router has fewer ports than a switch"
                    ],
                    "a": 0,
                    "ex": "Routers are used to connect different networks and route traffic between them, while switches are used to connect devices within a single network segment."
                },
                {
                    "q": "Which network device can help reduce network congestion in a busy local network?",
                    "options": [
                        "Hub",
                        "Repeater",
                        "Switch",
                        "Modem"
                    ],
                    "a": 2,
                    "ex": "Switches reduce congestion by creating separate collision domains for each port and forwarding traffic only to the intended recipient, preventing unnecessary traffic on other ports."
                },
                {
                    "q": "Which network device would you use to connect your home network to the internet?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 2,
                    "ex": "A router is essential for connecting a home network (a LAN) to the internet (a WAN), performing routing and often Network Address Translation (NAT)."
                },
                {
                    "q": "What is a collision domain?",
                    "options": [
                        "A group of devices that can communicate simultaneously without collisions",
                        "A network segment where data packets can collide if multiple devices transmit at the same time",
                        "The area covered by a wireless network",
                        "A group of networks connected by a router"
                    ],
                    "a": 1,
                    "ex": "A collision domain is a part of a network where data packets can collide if multiple devices attempt to transmit simultaneously on the same shared medium."
                },
                {
                    "q": "What is a broadcast domain?",
                    "options": [
                        "A group of devices that receive broadcast messages",
                        "A network segment where data packets can collide",
                        "The area covered by a wireless network",
                        "A group of networks connected by a router"
                    ],
                    "a": 0,
                    "ex": "A broadcast domain is a logical division of a computer network in which all nodes can reach each other by broadcast at the data link layer."
                },
                {
                    "q": "Which network device typically has the most advanced features for network management and security?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 2,
                    "ex": "Routers often include advanced features for network management, security (like firewalls), Quality of Service (QoS), and VPN connectivity."
                },
                {
                    "q": "Which type of switch provides advanced features like VLANs, Spanning Tree Protocol, and Quality of Service?",
                    "options": [
                        "Unmanaged Switch",
                        "Managed Switch",
                        "Hub",
                        "Repeater"
                    ],
                    "a": 1,
                    "ex": "Managed switches offer a wide range of configuration options and advanced features for greater control and flexibility over the network."
                },
                {
                    "q": "Which network device is often used to extend the range of a wireless network?",
                    "options": [
                        "Router",
                        "Switch",
                        "Hub",
                        "Wireless Repeater/Extender"
                    ],
                    "a": 3,
                    "ex": "Wireless repeaters or extenders are used to amplify the wireless signal and extend the coverage area of a Wi-Fi network."
                },
                {
                    "q": "What is the primary purpose of a modem?",
                    "options": [
                        "To connect different networks",
                        "To convert digital signals to analog and vice versa for transmission over telephone lines or cable",
                        "To connect devices within a local network",
                        "To filter network traffic"
                    ],
                    "a": 1,
                    "ex": "A modem (modulator-demodulator) is used to convert digital data into a signal suitable for transmission over analog communication channels (like telephone lines or cable TV lines) and vice versa."
                },
                {
                    "q": "Which network device is essential for enabling communication between devices on different subnets?",
                    "options": [
                        "Hub",
                        "Switch",
                        "Router",
                        "Repeater"
                    ],
                    "a": 2,
                    "ex": "Routers are necessary to route traffic between different IP subnets, allowing devices on one subnet to communicate with devices on another subnet or the internet."
                }
            ]
        },
        {
            "id": "cyber-threats",
            "title": "Cyber Threats (Viruses, Phishing, Hacking)",
            "questions": [
                {
                    "q": "What is a computer virus?",
                    "options": [
                        "A type of hardware failure",
                        "A program that replicates itself and can spread to other computers",
                        "A physical device that protects against cyber attacks",
                        "A type of network protocol"
                    ],
                    "a": 1,
                    "ex": "A computer virus is a type of malicious software (malware) that, when executed, replicates itself by modifying other computer programs and inserting its own code."
                },
                {
                    "q": "What is phishing?",
                    "options": [
                        "A technique for filtering network traffic",
                        "An attempt to obtain sensitive information (like usernames, passwords, and credit card details) by impersonating a trustworthy entity in electronic communication",
                        "A method for encrypting data",
                        "A type of physical security measure"
                    ],
                    "a": 1,
                    "ex": "Phishing is a form of social engineering where attackers attempt to trick individuals into revealing sensitive information by pretending to be a legitimate organization or person."
                },
                {
                    "q": "What is hacking?",
                    "options": [
                        "Developing software programs",
                        "Building network infrastructure",
                        "Unauthorized access to computer systems or networks",
                        "Creating secure passwords"
                    ],
                    "a": 2,
                    "ex": "Hacking refers to gaining unauthorized access to or control over computer systems, networks, or data."
                },
                {
                    "q": "Which type of malware can replicate itself without user intervention and spread rapidly across networks?",
                    "options": [
                        "Virus",
                        "Trojan Horse",
                        "Worm",
                        "Spyware"
                    ],
                    "a": 2,
                    "ex": "A worm is a standalone malware program that replicates itself to spread to other computers, often without any human interaction."
                },
                {
                    "q": "Which type of malware is disguised as legitimate software but performs malicious actions when executed?",
                    "options": [
                        "Virus",
                        "Trojan Horse",
                        "Worm",
                        "Adware"
                    ],
                    "a": 1,
                    "ex": "A Trojan Horse is a type of malware that appears to be harmless or useful software but contains hidden malicious code that is executed when the user runs the program."
                },
                {
                    "q": "What is ransomware?",
                    "options": [
                        "Software that encrypts data and demands a ransom for its release",
                        "Software that speeds up computer performance",
                        "Software that creates backups of data",
                        "Software that protects against viruses"
                    ],
                    "a": 0,
                    "ex": "Ransomware is a type of malware that encrypts a victim's files, making them inaccessible, and demands a ransom payment (usually in cryptocurrency) in exchange for the decryption key."
                },
                {
                    "q": "What is a Denial-of-Service (DoS) attack?",
                    "options": [
                        "An attempt to gain unauthorized access to data",
                        "An attack that floods a system or network with traffic to make it unavailable to legitimate users",
                        "An attack that steals sensitive information",
                        "An attack that installs malware on a system"
                    ],
                    "a": 1,
                    "ex": "A DoS attack aims to disrupt the normal functioning of a server, service, or network by overwhelming it with a flood of malicious traffic, preventing legitimate users from accessing it."
                },
                {
                    "q": "What is a Distributed Denial-of-Service (DDoS) attack?",
                    "options": [
                        "A DoS attack launched from a single source",
                        "A DoS attack launched from multiple compromised systems simultaneously",
                        "A type of malware that performs DoS attacks",
                        "An attack that targets distributed systems"
                    ],
                    "a": 1,
                    "ex": "A DDoS attack is a more powerful version of a DoS attack, using a botnet (a network of compromised computers) to launch a coordinated attack from multiple sources, making it harder to mitigate."
                },
                {
                    "q": "What is social engineering in the context of cybersecurity?",
                    "options": [
                        "Using technology to connect with people",
                        "Manipulating people into divulging confidential information or performing actions that benefit the attacker",
                        "Designing social media platforms securely",
                        "Analyzing social network data"
                    ],
                    "a": 1,
                    "ex": "Social engineering is the art of manipulating people to bypass security measures and gain access to systems or information, often through psychological manipulation and deception."
                },
                {
                    "q": "Which of the following is a common sign of a phishing email?",
                    "options": [
                        "Perfect grammar and spelling",
                        "Generic greetings instead of personalized ones",
                        "Official-looking sender email address",
                        "Asking for personal information (like passwords or credit card numbers)"
                    ],
                    "a": 1,
                    "ex": "Phishing emails often use generic greetings like 'Dear Customer' instead of addressing you by name. They may also contain grammatical errors and suspicious links or attachments."
                },
                {
                    "q": "What is spyware?",
                    "options": [
                        "Software that protects against viruses",
                        "Software that monitors a user's computer activity and sends the information to a remote attacker",
                        "Software that encrypts data",
                        "Software that optimizes system performance"
                    ],
                    "a": 1,
                    "ex": "Spyware is malware that secretly observes the user's activities on the computer without their knowledge or consent and transmits this information to an external party."
                },
                {
                    "q": "What is adware?",
                    "options": [
                        "Software that displays unwanted advertisements",
                        "Software that protects against malicious ads",
                        "Software that blocks advertisements",
                        "Software that creates advertisements"
                    ],
                    "a": 0,
                    "ex": "Adware is software that automatically displays or downloads advertising material (often in the form of pop-up windows) when a user is online."
                },
                {
                    "q": "What is a data breach?",
                    "options": [
                        "A backup of data",
                        "The unauthorized access to and retrieval of sensitive or confidential data",
                        "The process of encrypting data",
                        "The process of storing data in the cloud"
                    ],
                    "a": 1,
                    "ex": "A data breach occurs when unauthorized individuals gain access to sensitive, protected, or confidential data."
                },
                {
                    "q": "What is the purpose of a strong password?",
                    "options": [
                        "To make it easier to remember your password",
                        "To prevent unauthorized access to your accounts and data",
                        "To speed up login times",
                        "To encrypt your data"
                    ],
                    "a": 1,
                    "ex": "A strong password, typically a combination of uppercase and lowercase letters, numbers, and symbols, makes it significantly more difficult for attackers to guess or crack."
                },
                {
                    "q": "Which of the following is an example of two-factor authentication (2FA)?",
                    "options": [
                        "Logging in with a username and password",
                        "Logging in with a password and a security question",
                        "Logging in with a password and a code sent to your mobile phone",
                        "Logging in with a fingerprint scan"
                    ],
                    "a": 2,
                    "ex": "Two-factor authentication requires two different methods of verification to log in, such as something you know (password) and something you have (phone to receive a code), adding an extra layer of security."
                },
                {
                    "q": "What is the principle of least privilege in cybersecurity?",
                    "options": [
                        "Giving all users full access to all resources",
                        "Giving users only the minimum level of access necessary to perform their job duties",
                        "Allowing users to choose their own access levels",
                        "Restricting access to administrators only"
                    ],
                    "a": 1,
                    "ex": "The principle of least privilege dictates that users and systems should be granted only the minimum permissions needed to perform their required tasks, reducing the potential impact of a security breach."
                },
                {
                    "q": "What is encryption?",
                    "options": [
                        "Converting data into an unreadable format to protect its confidentiality",
                        "Making data publicly available",
                        "Compressing data to save storage space",
                        "Organizing data in a database"
                    ],
                    "a": 0,
                    "ex": "Encryption is the process of converting readable data (plaintext) into an unreadable format (ciphertext) using an algorithm and a key, so only authorized individuals with the key can decrypt and read the data."
                },
                {
                    "q": "What is the primary goal of a white-hat hacker?",
                    "options": [
                        "To gain unauthorized access for malicious purposes",
                        "To identify security vulnerabilities with permission to help improve security",
                        "To steal sensitive information",
                        "To disrupt network services"
                    ],
                    "a": 1,
                    "ex": "White-hat hackers (ethical hackers) use their skills to test systems for vulnerabilities with the owner's consent, helping organizations identify and fix security weaknesses before malicious attackers can exploit them."
                },
                {
                    "q": "What is the primary goal of a black-hat hacker?",
                    "options": [
                        "To identify security vulnerabilities to help improve security",
                        "To gain unauthorized access for malicious purposes (e.g., data theft, system damage)",
                        "To develop security software",
                        "To provide cybersecurity training"
                    ],
                    "a": 1,
                    "ex": "Black-hat hackers (malicious hackers) gain unauthorized access to systems for illegal or malicious purposes, such as stealing data, disrupting services, or causing damage."
                },
                {
                    "q": "What is a firewall?",
                    "options": [
                        "A software program that creates backups",
                        "A physical barrier that prevents access to a building",
                        "A network security device that monitors and controls incoming and outgoing network traffic based on predefined security rules",
                        "A device that amplifies network signals"
                    ],
                    "a": 2,
                    "ex": "A firewall acts as a barrier between a network and the outside world, filtering traffic to prevent unauthorized access and protect against various cyber threats."
                },
                {
                    "q": "What is patching in the context of cybersecurity?",
                    "options": [
                        "Creating backups of system files",
                        "Applying updates to software and operating systems to fix vulnerabilities",
                        "Encrypting sensitive data",
                        "Scanning for viruses"
                    ],
                    "a": 1,
                    "ex": "Patching involves applying software updates (patches) released by vendors to fix known security vulnerabilities, which attackers could otherwise exploit."
                },
                {
                    "q": "What is spear phishing?",
                    "options": [
                        "A general phishing attack sent to many recipients",
                        "A phishing attack specifically targeted at a particular individual or organization",
                        "A type of DoS attack",
                        "A method for encrypting emails"
                    ],
                    "a": 1,
                    "ex": "Spear phishing is a highly targeted phishing attack that is tailored to a specific individual or organization, often using information gathered about the target to make the email appear more legitimate."
                },
                {
                    "q": "What is a botnet?",
                    "options": [
                        "A network of friendly robots",
                        "A network of compromised computers controlled by an attacker",
                        "A type of network protocol",
                        "A security system that detects bots"
                    ],
                    "a": 1,
                    "ex": "A botnet is a collection of internet-connected devices (computers, servers, IoT devices) that have been infected with malware and are controlled by a single attacker, often used to launch DDoS attacks or send spam."
                },
                {
                    "q": "What is malware?",
                    "options": [
                        "Software used for data analysis",
                        "Any software designed to cause harm, disrupt operations, or gain unauthorized access",
                        "Software used for creating presentations",
                        "Software that helps in project management"
                    ],
                    "a": 1,
                    "ex": "Malware (malicious software) is a general term that includes viruses, worms, Trojan horses, ransomware, spyware, adware, and other types of harmful software."
                },
                {
                    "q": "Which type of cyber threat is often spread through malicious email attachments or infected websites?",
                    "options": [
                        "Phishing",
                        "DoS attacks",
                        "Viruses and Worms",
                        "Social Engineering"
                    ],
                    "a": 2,
                    "ex": "Viruses and worms are frequently spread through users opening infected email attachments, downloading malicious files, or visiting compromised websites."
                },
                {
                    "q": "What is the primary defense against most malware infections?",
                    "options": [
                        "Using complex passwords",
                        "Regularly backing up your data",
                        "Installing and keeping antivirus software updated",
                        "Using a firewall"
                    ],
                    "a": 2,
                    "ex": "Up-to-date antivirus software is a crucial defense against malware, as it can detect and remove viruses, worms, Trojan horses, and other malicious programs."
                },
                {
                    "q": "What is the purpose of a security update or patch?",
                    "options": [
                        "To add new features to software",
                        "To improve the user interface",
                        "To fix known security vulnerabilities in software",
                        "To increase the speed of the software"
                    ],
                    "a": 2,
                    "ex": "Security updates and patches are specifically released by software vendors to address weaknesses or bugs in their software that could be exploited by attackers."
                },
                {
                    "q": "What is tailgating (or piggybacking) in physical security, often related to social engineering?",
                    "options": [
                        "Following someone through a secured door without using your own access credentials",
                        "Using someone's computer without permission",
                        "Stealing someone's password",
                        "Listening in on someone's phone conversation"
                    ],
                    "a": 0,
                    "ex": "Tailgating (or piggybacking) is a physical social engineering tactic where an unauthorized person follows closely behind an authorized person to gain access to a restricted area."
                },
                {
                    "q": "What is the best way to protect yourself from phishing attacks?",
                    "options": [
                        "Clicking on all links in emails to check where they go",
                        "Sharing your password with trusted friends",
                        "Being cautious of unsolicited emails and not clicking on suspicious links or attachments",
                        "Disabling your firewall"
                    ],
                    "a": 2,
                    "ex": "The most effective way to avoid phishing attacks is to be skeptical of unexpected emails, verify the sender's identity, and avoid clicking on links or downloading attachments from suspicious sources."
                }
            ]
        },
        {
            "id": "firewalls-antivirus",
            "title": "Firewalls and Antivirus",
            "questions": [
                {
                    "q": "What is the primary purpose of a firewall?",
                    "options": [
                        "To speed up internet connection",
                        "To prevent unauthorized access to a network or computer",
                        "To encrypt data transmission",
                        "To manage network traffic prioritization"
                    ],
                    "a": 1,
                    "ex": "A firewall acts as a security barrier, controlling incoming and outgoing network traffic to protect against unauthorized access and various cyber threats."
                },
                {
                    "q": "What is the primary purpose of antivirus software?",
                    "options": [
                        "To block unwanted advertisements",
                        "To protect against physical theft of computers",
                        "To detect, prevent, and remove malware (viruses, worms, Trojans, etc.)",
                        "To manage user accounts and permissions"
                    ],
                    "a": 2,
                    "ex": "Antivirus software is designed to scan, detect, and eliminate malicious software programs from a computer or network."
                },
                {
                    "q": "Which type of firewall examines the header of data packets to determine whether to allow or block them based on rules?",
                    "options": [
                        "Packet-filtering firewall",
                        "Stateful inspection firewall",
                        "Proxy firewall",
                        "Next-generation firewall"
                    ],
                    "a": 0,
                    "ex": "A packet-filtering firewall examines network packets individually and makes decisions based on information in the packet headers (like source/destination IP addresses and port numbers)."
                },
                {
                    "q": "Which type of firewall keeps track of the state of active network connections and makes decisions based on the context of the traffic?",
                    "options": [
                        "Packet-filtering firewall",
                        "Stateful inspection firewall",
                        "Proxy firewall",
                        "Network Address Translation (NAT) firewall"
                    ],
                    "a": 1,
                    "ex": "A stateful inspection firewall monitors the state of connections and can make more intelligent decisions about whether to allow or block traffic based on whether it is part of an established, legitimate session."
                },
                {
                    "q": "Which type of firewall acts as an intermediary between internal and external networks, inspecting all traffic before allowing it through?",
                    "options": [
                        "Packet-filtering firewall",
                        "Stateful inspection firewall",
                        "Proxy firewall",
                        "Host-based firewall"
                    ],
                    "a": 2,
                    "ex": "A proxy firewall acts as a gateway, intercepting traffic and performing deep packet inspection and application-level filtering."
                },
                {
                    "q": "Where is a host-based firewall typically installed?",
                    "options": [
                        "On the network router",
                        "On a dedicated firewall appliance",
                        "On individual computers or servers",
                        "In the cloud"
                    ],
                    "a": 2,
                    "ex": "A host-based firewall is installed and runs on an individual host (computer or server) to protect it from network threats."
                },
                {
                    "q": "Where is a network-based firewall typically deployed?",
                    "options": [
                        "On individual computers or servers",
                        "At the boundary between different network segments or between a network and the internet",
                        "Within specific applications",
                        "On mobile devices"
                    ],
                    "a": 1,
                    "ex": "A network-based firewall is a dedicated hardware appliance or software placed at network ingress/egress points to protect an entire network segment or the entire network."
                },
                {
                    "q": "Antivirus software uses signature-based detection to identify malware. What does this mean?",
                    "options": [
                        "It analyzes the behavior of programs to detect malware",
                        "It compares file content to a database of known malware signatures (patterns)",
                        "It uses artificial intelligence to predict malware",
                        "It relies on user feedback to identify malware"
                    ],
                    "a": 1,
                    "ex": "Signature-based detection involves comparing the code or characteristics of a file to a database of known malware signatures. If a match is found, the file is identified as malware."
                },
                {
                    "q": "Antivirus software uses heuristic analysis to identify malware. What does this mean?",
                    "options": [
                        "It compares file content to a database of known malware signatures",
                        "It analyzes the behavior and characteristics of a program to identify suspicious activity",
                        "It relies on cloud-based databases for malware detection",
                        "It requires manual scanning by the user"
                    ],
                    "a": 1,
                    "ex": "Heuristic analysis involves examining the structure, behavior, and instructions within a program to determine if it exhibits characteristics of known malware, even if an exact signature is not found."
                },
                {
                    "q": "What is a false positive in the context of antivirus software?",
                    "options": [
                        "Antivirus software fails to detect actual malware",
                        "Antivirus software incorrectly identifies a legitimate file or program as malware",
                        "Antivirus software detects malware but fails to remove it",
                        "Antivirus software detects a threat that is not relevant"
                    ],
                    "a": 1,
                    "ex": "A false positive occurs when antivirus software flags a harmless file or program as malicious, leading to unnecessary alerts or actions."
                },
                {
                    "q": "What is a false negative in the context of antivirus software?",
                    "options": [
                        "Antivirus software incorrectly identifies a legitimate file or program as malware",
                        "Antivirus software fails to detect actual malware",
                        "Antivirus software detects malware and removes it successfully",
                        "Antivirus software detects a threat that is not relevant"
                    ],
                    "a": 1,
                    "ex": "A false negative is a failure of the antivirus software to detect actual malware that is present on the system."
                },
                {
                    "q": "Why is it important to keep both your firewall and antivirus software updated?",
                    "options": [
                        "To improve their user interface",
                        "To ensure they have the latest definitions and rules to protect against new threats",
                        "To make your computer run faster",
                        "To reduce the amount of data they use"
                    ],
                    "a": 1,
                    "ex": "Cyber threats are constantly evolving. Keeping firewall rules and antivirus definitions updated ensures that the security software can recognize and protect against the latest known malware and attack techniques."
                },
                {
                    "q": "Can a firewall protect against all types of cyber threats?",
                    "options": [
                        "Yes, a firewall is a complete security solution",
                        "No, firewalls are only effective against network-based attacks",
                        "No, firewalls are a crucial part of security but cannot protect against all threats (e.g., malware delivered via infected USB drives or sophisticated social engineering)",
                        "Yes, as long as it is properly configured"
                    ],
                    "a": 2,
                    "ex": "While firewalls are essential for network security, they are not a silver bullet. They primarily protect against network-based threats but may not prevent malware infections from other sources or protect against attacks like phishing or insider threats."
                },
                {
                    "q": "Can antivirus software protect against all types of cyber threats?",
                    "options": [
                        "Yes, antivirus software is a complete security solution",
                        "No, antivirus primarily focuses on detecting and removing malware but may not protect against network-based attacks, phishing, or social engineering",
                        "Yes, as long as it is kept updated",
                        "No, antivirus is only effective against viruses"
                    ],
                    "a": 1,
                    "ex": "Antivirus software is highly effective against malware, but it typically does not provide comprehensive protection against network intrusions, phishing scams, or other forms of cyber attacks that don't involve traditional malware."
                },
                {
                    "q": "What is the role of intrusion detection systems (IDS) in conjunction with firewalls?",
                    "options": [
                        "IDEs replace firewalls",
                        "IDEs primarily focus on preventing access, while IDSs monitor network traffic for suspicious activity",
                        "IDEs are used for managing firewall rules",
                        "IDEs are used for encrypting data"
                    ],
                    "a": 1,
                    "ex": "Firewalls are preventative controls that block traffic based on rules. Intrusion Detection Systems (IDSs) are detective controls that monitor network traffic for signs of malicious activity or policy violations and alert administrators."
                },
                {
                    "q": "What is the concept of a 'whitelist' in firewall rules?",
                    "options": [
                        "Allowing all traffic except what is explicitly denied",
                        "Denying all traffic except what is explicitly allowed",
                        "Blocking traffic from known malicious IP addresses",
                        "Prioritizing traffic based on application type"
                    ],
                    "a": 1,
                    "ex": "A whitelist approach in firewall rules means that all network traffic is denied by default, and only traffic explicitly allowed by a rule is permitted."
                },
                {
                    "q": "What is the concept of a 'blacklist' in firewall rules?",
                    "options": [
                        "Allowing all traffic except what is explicitly denied",
                        "Denying all traffic except what is explicitly allowed",
                        "Blocking traffic from known malicious IP addresses or sources",
                        "Prioritizing traffic based on application type"
                    ],
                    "a": 0,
                    "ex": "A blacklist approach in firewall rules means that all network traffic is allowed by default, except for traffic from sources or destinations that are explicitly denied (blacklisted)."
                },
                {
                    "q": "What is a common method used by antivirus software to quarantine suspected malware?",
                    "options": [
                        "Deleting the file immediately",
                        "Encrypting the file",
                        "Moving the suspected file to a secure, isolated location to prevent it from causing harm",
                        "Renaming the file"
                    ],
                    "a": 2,
                    "ex": "Quarantining moves a suspected malicious file to a secure area where it cannot be executed or interact with the rest of the system, allowing for further analysis or safe deletion."
                },
                {
                    "q": "What is a personal firewall?",
                    "options": [
                        "A firewall for large organizations",
                        "A firewall implemented in hardware devices only",
                        "A software firewall installed on an individual computer",
                        "A firewall that protects against physical threats"
                    ],
                    "a": 2,
                    "ex": "A personal firewall is a software application that runs on a single computer to control the traffic entering and leaving that specific device."
                },
                {
                    "q": "What is a network firewall?",
                    "options": [
                        "A software firewall installed on an individual computer",
                        "A firewall designed to protect an entire network or network segment",
                        "A firewall used only for wireless networks",
                        "A firewall that only filters email traffic"
                    ],
                    "a": 1,
                    "ex": "A network firewall is typically a hardware or software appliance deployed at the edge of a network to control traffic between the internal network and external networks (like the internet) or between different internal network segments."
                },
                {
                    "q": "Which type of antivirus scanning checks files and programs that are currently running in the system's memory?",
                    "options": [
                        "Full System Scan",
                        "Quick Scan",
                        "Real-time Scan",
                        "Boot-time Scan"
                    ],
                    "a": 2,
                    "ex": "Real-time scanning (or on-access scanning) constantly monitors files and processes as they are being accessed or executed to detect and block malware before it can cause harm."
                },
                {
                    "q": "What is the benefit of using a combination of firewall and antivirus software?",
                    "options": [
                        "It makes your computer run faster",
                        "It provides a layered security approach, protecting against a wider range of threats",
                        "It is less expensive than using a single security solution",
                        "It is easier to manage"
                    ],
                    "a": 1,
                    "ex": "Combining firewall and antivirus provides defense-in-depth. The firewall blocks malicious network traffic, while antivirus detects and removes malware that might enter through other means."
                },
                {
                    "q": "What is a stateful firewall able to do that a stateless packet filter cannot?",
                    "options": [
                        "Filter traffic based on source/destination IP",
                        "Filter traffic based on port numbers",
                        "Keep track of the context of network connections and allow return traffic automatically",
                        "Block traffic based on application type"
                    ],
                    "a": 2,
                    "ex": "Stateful firewalls maintain a state table that tracks active connections, allowing them to automatically permit legitimate response traffic without needing a specific rule for it, making them more secure and efficient than stateless filters."
                },
                {
                    "q": "What is the purpose of a signature database in antivirus software?",
                    "options": [
                        "To store user preferences",
                        "To store a list of known malware patterns (signatures)",
                        "To store encrypted files",
                        "To store network configuration settings"
                    ],
                    "a": 1,
                    "ex": "The signature database contains a collection of unique patterns or characteristics of known malware. Antivirus software compares files against this database during scanning."
                },
                {
                    "q": "Which type of firewall is most effective at preventing application-layer attacks?",
                    "options": [
                        "Packet-filtering firewall",
                        "Stateful inspection firewall",
                        "Proxy firewall / Application Gateway",
                        "Network Address Translation (NAT) firewall"
                    ],
                    "a": 2,
                    "ex": "Proxy firewalls (or application gateways) operate at the Application Layer and can understand and inspect the content of specific application protocols, providing better protection against attacks targeting applications."
                }
            ]
        },
        {
            "id": "data-encryption-decryption",
            "title": "Data Encryption and Decryption",
            "questions": [
                {
                    "q": "What is encryption?",
                    "options": [
                        "Converting data into an unreadable format",
                        "Converting unreadable data into a readable format",
                        "Making data publicly accessible",
                        "Storing data in a database"
                    ],
                    "a": 0,
                    "ex": "Encryption is the process of transforming readable data (plaintext) into an unreadable format (ciphertext) to protect its confidentiality."
                },
                {
                    "q": "What is decryption?",
                    "options": [
                        "Converting data into an unreadable format",
                        "Converting unreadable data (ciphertext) back into its original readable format (plaintext)",
                        "Making data publicly accessible",
                        "Storing data in a database"
                    ],
                    "a": 1,
                    "ex": "Decryption is the process of converting encrypted data (ciphertext) back into its original readable format (plaintext) using a key."
                },
                {
                    "q": "What is plaintext?",
                    "options": [
                        "Encrypted data",
                        "The original readable data before encryption",
                        "A key used for encryption",
                        "A type of encryption algorithm"
                    ],
                    "a": 1,
                    "ex": "Plaintext is the original, unencrypted data that is readable and understandable."
                },
                {
                    "q": "What is ciphertext?",
                    "options": [
                        "The original readable data before encryption",
                        "The unreadable data produced by encryption",
                        "A key used for encryption",
                        "A type of encryption algorithm"
                    ],
                    "a": 1,
                    "ex": "Ciphertext is the output of the encryption process; it is the scrambled or unreadable version of the plaintext."
                },
                {
                    "q": "In symmetric encryption, how many keys are used?",
                    "options": [
                        "One key for both encryption and decryption",
                        "A public key for encryption and a private key for decryption",
                        "Two different keys for encryption and decryption",
                        "No keys are used"
                    ],
                    "a": 0,
                    "ex": "Symmetric encryption uses a single secret key that is shared by both the sender and the receiver for both encrypting and decrypting data."
                },
                {
                    "q": "In asymmetric encryption, how many keys are used?",
                    "options": [
                        "One key for both encryption and decryption",
                        "A pair of keys: a public key for encryption and a private key for decryption",
                        "Two different keys for encryption and decryption",
                        "No keys are used"
                    ],
                    "a": 1,
                    "ex": "Asymmetric encryption (also known as public-key cryptography) uses a pair of mathematically related keys: a public key and a private key. The public key is used for encryption, and the corresponding private key is used for decryption (or vice versa for digital signatures)."
                },
                {
                    "q": "Which type of encryption is generally faster?",
                    "options": [
                        "Symmetric Encryption",
                        "Asymmetric Encryption",
                        "Both are equally fast",
                        "Speed depends on the algorithm"
                    ],
                    "a": 0,
                    "ex": "Symmetric encryption algorithms are typically much faster than asymmetric encryption algorithms because they are computationally less intensive."
                },
                {
                    "q": "Which type of encryption is used for securing communication over the internet (e.g., HTTPS)?",
                    "options": [
                        "Symmetric Encryption",
                        "Asymmetric Encryption",
                        "A combination of both",
                        "Hashing"
                    ],
                    "a": 2,
                    "ex": "Secure communication protocols like HTTPS use a combination of asymmetric and symmetric encryption. Asymmetric encryption is used to securely exchange a symmetric key, which is then used for faster encryption and decryption of the actual data transmission."
                },
                {
                    "q": "What is a public key in asymmetric encryption?",
                    "options": [
                        "A secret key known only to the owner",
                        "A key that is shared publicly and used to encrypt data for the owner or verify their digital signature",
                        "A key used for decryption only",
                        "A key used for hashing data"
                    ],
                    "a": 1,
                    "ex": "The public key is freely distributed and can be used by anyone to encrypt messages intended for the key's owner or to verify a digital signature created by the owner."
                },
                {
                    "q": "What is a private key in asymmetric encryption?",
                    "options": [
                        "A key that is shared publicly",
                        "A secret key known only to the owner and used to decrypt data or create digital signatures",
                        "A key used for encryption only",
                        "A key used for hashing data"
                    ],
                    "a": 1,
                    "ex": "The private key is kept secret by the owner and is used to decrypt messages that were encrypted with the corresponding public key or to create digital signatures."
                },
                {
                    "q": "What is a cipher?",
                    "options": [
                        "A secret key used for encryption",
                        "An algorithm used for encryption and decryption",
                        "The encrypted data",
                        "The original readable data"
                    ],
                    "a": 1,
                    "ex": "A cipher (or cryptographic algorithm) is a set of rules or mathematical operations used for encryption and decryption."
                },
                {
                    "q": "What is hashing in cryptography?",
                    "options": [
                        "Converting data into an unreadable format using a key",
                        "Converting unreadable data back to its original format",
                        "Creating a fixed-size string of characters (hash value) from input data, typically used for data integrity verification",
                        "Using a pair of keys for encryption"
                    ],
                    "a": 2,
                    "ex": "Hashing is a one-way process that takes input data of any size and produces a fixed-size output (hash value or digest). It's used to verify data integrity; if the data is altered, the hash value changes."
                },
                {
                    "q": "Which cryptographic technique is primarily used for verifying data integrity?",
                    "options": [
                        "Symmetric Encryption",
                        "Asymmetric Encryption",
                        "Hashing",
                        "Digital Signatures"
                    ],
                    "a": 2,
                    "ex": "Hashing is the primary method for verifying data integrity because even a small change in the input data results in a significantly different hash value."
                },
                {
                    "q": "What is a digital signature?",
                    "options": [
                        "An encrypted message",
                        "A hash of a message encrypted with the sender's private key, used for authentication and non-repudiation",
                        "A physical signature on a digital document",
                        "A type of symmetric key"
                    ],
                    "a": 1,
                    "ex": "A digital signature is a cryptographic technique used to verify the authenticity and integrity of a digital message or document. It is created by hashing the data and then encrypting the hash with the sender's private key."
                },
                {
                    "q": "What is the purpose of a digital certificate?",
                    "options": [
                        "To store encrypted data",
                        "To verify the ownership of a public key and bind it to an entity (like a person or organization)",
                        "To store symmetric keys",
                        "To perform encryption and decryption"
                    ],
                    "a": 1,
                    "ex": "A digital certificate is an electronic document that uses a digital signature to bind a public key with an identity, thereby verifying the authenticity of the public key's owner."
                },
                {
                    "q": "Which of the following is a common symmetric encryption algorithm?",
                    "options": [
                        "RSA",
                        "AES",
                        "ECC",
                        "SHA-256"
                    ],
                    "a": 1,
                    "ex": "AES (Advanced Encryption Standard) is a widely used and secure symmetric encryption algorithm."
                },
                {
                    "q": "Which of the following is a common asymmetric encryption algorithm?",
                    "options": [
                        "AES",
                        "DES",
                        "RSA",
                        "MD5"
                    ],
                    "a": 2,
                    "ex": "RSA is a popular and widely used asymmetric encryption algorithm."
                },
                {
                    "q": "What is the key difference between encryption and hashing?",
                    "options": [
                        "Encryption is a one-way process, while hashing is two-way",
                        "Encryption requires a key for decryption, while hashing does not allow decryption to retrieve the original data",
                        "Encryption is used for integrity, while hashing is used for confidentiality",
                        "Encryption produces a fixed-size output, while hashing produces a variable-size output"
                    ],
                    "a": 1,
                    "ex": "The main difference is that encryption is a two-way process (you can decrypt to get the original data using the key), while hashing is a one-way process (you cannot retrieve the original data from the hash value)."
                },
                {
                    "q": "What does confidentiality mean in the context of data security?",
                    "options": [
                        "Ensuring data is accurate and reliable",
                        "Ensuring data is available when needed",
                        "Ensuring that data is accessible only to authorized individuals",
                        "Ensuring that data cannot be altered"
                    ],
                    "a": 2,
                    "ex": "Confidentiality is the security principle that ensures data is kept private and is only accessible to authorized users or systems."
                },
                {
                    "q": "What does integrity mean in the context of data security?",
                    "options": [
                        "Ensuring that data is accessible only to authorized individuals",
                        "Ensuring data is accurate, complete, and has not been tampered with",
                        "Ensuring data is available when needed",
                        "Ensuring that users can access data quickly"
                    ],
                    "a": 1,
                    "ex": "Integrity is the security principle that ensures data is accurate, complete, and has not been modified in an unauthorized manner."
                },
                {
                    "q": "What is the purpose of salting a password before hashing?",
                    "options": [
                        "To make the password shorter",
                        "To add complexity and prevent rainbow table attacks",
                        "To encrypt the password before hashing",
                        "To make the hashing process faster"
                    ],
                    "a": 1,
                    "ex": "Salting involves adding a unique, random string (the salt) to a password before hashing it. This makes rainbow table attacks (which use precomputed hashes) ineffective, as even identical passwords will produce different hashes with different salts."
                },
                {
                    "q": "Which of the following is a cryptographic hash function?",
                    "options": [
                        "AES",
                        "RSA",
                        "MD5",
                        "DES"
                    ],
                    "a": 2,
                    "ex": "MD5 (Message-Digest Algorithm 5) is a widely known (though now considered cryptographically broken for some purposes) cryptographic hash function."
                },
                {
                    "q": "Which of the following is a stronger cryptographic hash function than MD5?",
                    "options": [
                        "SHA-256",
                        "RC4",
                        "Blowfish",
                        "DSA"
                    ],
                    "a": 0,
                    "ex": "SHA-256 (Secure Hash Algorithm 256-bit) is part of the SHA-2 family and is considered much more secure than MD5 for hashing purposes."
                },
                {
                    "q": "What is non-repudiation?",
                    "options": [
                        "The ability to deny sending a message",
                        "The ability to deny receiving a message",
                        "The assurance that someone cannot deny the validity of something (e.g., a digital signature proves the sender of a message)",
                        "The ability to revoke access to data"
                    ],
                    "a": 2,
                    "ex": "Non-repudiation provides assurance that a party cannot later deny having participated in a communication or action. Digital signatures are a key tool for achieving non-repudiation."
                },
                {
                    "q": "What is the purpose of a Certificate Authority (CA)?",
                    "options": [
                        "To store encrypted data",
                        "To issue and manage digital certificates, verifying the identity of entities and binding them to public keys",
                        "To generate encryption keys",
                        "To perform decryption of encrypted messages"
                    ],
                    "a": 1,
                    "ex": "A Certificate Authority (CA) is a trusted entity that issues digital certificates. It verifies the identity of the certificate applicant and cryptographically signs the certificate, attesting to the ownership of the public key."
                }
            ]
        },
        {
            "id": "basics-of-programming",
            "title": "Basics of Programming",
            "questions": [
                {
                    "q": "What is a variable in programming?",
                    "options": [
                        "A fixed value that cannot be changed",
                        "A named storage location for data that can be changed during program execution",
                        "A set of instructions for the computer",
                        "A type of error in a program"
                    ],
                    "a": 1,
                    "ex": "A variable is a fundamental concept in programming used to store data values that can be referred to and manipulated throughout a program."
                },
                {
                    "q": "Which of the following is NOT a common data type in programming?",
                    "options": [
                        "Integer",
                        "Boolean",
                        "Float",
                        "Coffee"
                    ],
                    "a": 3,
                    "ex": "Integer (whole numbers), Boolean (true/false), and Float (numbers with decimal points) are common data types. 'Coffee' is not a standard programming data type."
                },
                {
                    "q": "What does an arithmetic operator do?",
                    "options": [
                        "Compares values",
                        "Performs mathematical calculations (addition, subtraction, etc.)",
                        "Assigns a value to a variable",
                        "Combines strings of text"
                    ],
                    "a": 1,
                    "ex": "Arithmetic operators are used to perform mathematical operations on numerical values."
                },
                {
                    "q": "What does a relational operator do?",
                    "options": [
                        "Performs mathematical calculations",
                        "Compares two values and returns a boolean result (true or false)",
                        "Assigns a value to a variable",
                        "Combines strings of text"
                    ],
                    "a": 1,
                    "ex": "Relational operators are used to compare values and determine the relationship between them (e.g., greater than, less than, equal to)."
                },
                {
                    "q": "What is the purpose of a conditional statement (like if/else)?",
                    "options": [
                        "To repeat a block of code multiple times",
                        "To execute a block of code only if a certain condition is true",
                        "To assign a value to a variable",
                        "To define a function"
                    ],
                    "a": 1,
                    "ex": "Conditional statements allow a program to make decisions and execute different blocks of code based on whether a specified condition is met."
                },
                {
                    "q": "What is the purpose of a loop (like for or while)?",
                    "options": [
                        "To execute a block of code only once",
                        "To repeat a block of code multiple times",
                        "To define a function",
                        "To compare two values"
                    ],
                    "a": 1,
                    "ex": "Loops are used to repeatedly execute a block of code as long as a certain condition is true or for a specified number of times."
                },
                {
                    "q": "What is a function in programming?",
                    "options": [
                        "A type of variable",
                        "A named block of reusable code that performs a specific task",
                        "A set of instructions that are executed only once",
                        "A way to store data"
                    ],
                    "a": 1,
                    "ex": "A function is a self-contained block of code that performs a specific task and can be called or executed multiple times within a program."
                },
                {
                    "q": "What is an algorithm?",
                    "options": [
                        "A type of programming language",
                        "A step-by-step procedure or set of rules for solving a problem or performing a task",
                        "A variable that stores a list of values",
                        "A graphical representation of a program"
                    ],
                    "a": 1,
                    "ex": "An algorithm is a well-defined sequence of instructions used to solve a problem or perform a computation."
                },
                {
                    "q": "What is pseudocode?",
                    "options": [
                        "Actual code written in a specific programming language",
                        "A detailed graphical representation of a program's logic",
                        "An informal high-level description of an algorithm, using a mix of natural language and programming constructs",
                        "A type of database query language"
                    ],
                    "a": 2,
                    "ex": "Pseudocode is a way to describe an algorithm using a combination of natural language and programming-like syntax, making it easier to understand the logic before writing actual code."
                },
                {
                    "q": "What is a flowchart?",
                    "options": [
                        "An informal high-level description of an algorithm",
                        "A graphical representation of an algorithm or process, using symbols to show steps and their sequence",
                        "Actual code written in a specific programming language",
                        "A list of variables in a program"
                    ],
                    "a": 1,
                    "ex": "A flowchart is a visual representation of an algorithm or process, using standard symbols to depict the steps, decision points, and flow of control."
                },
                {
                    "q": "What is the process of finding and fixing errors in a program called?",
                    "options": [
                        "Compiling",
                        "Executing",
                        "Debugging",
                        "Refactoring"
                    ],
                    "a": 2,
                    "ex": "Debugging is the process of identifying, analyzing, and removing errors (bugs) from a computer program."
                },
                {
                    "q": "What is the output of the following pseudocode:  SET x = 10; IF x > 5 THEN PRINT 'Hello' ELSE PRINT 'Goodbye' END IF",
                    "options": [
                        "Goodbye",
                        "HelloGoodbye",
                        "Error",
                        "Hello"
                    ],
                    "a": 3,
                    "ex": "Since x (10) is greater than 5, the condition x > 5 is true, and the code inside the IF block is executed, printing 'Hello'."
                },
                {
                    "q": "What is the output of the following pseudocode: SET count = 0; WHILE count < 3 DO PRINT count; SET count = count + 1 END WHILE",
                    "options": [
                        "0123",
                        "012",
                        "123",
                        "0 1 2"
                    ],
                    "a": 3,
                    "ex": "The loop will execute as long as count is less than 3. It will print 0, then 1, then 2. When count becomes 3, the condition is false, and the loop terminates."
                },
                {
                    "q": "What is concatenation in programming?",
                    "options": [
                        "Performing mathematical calculations",
                        "Comparing two values",
                        "Joining two or more strings of text together",
                        "Assigning a value to a variable"
                    ],
                    "a": 2,
                    "ex": "Concatenation is the operation of joining character strings end to end. In many programming languages, the '+' operator is used for string concatenation."
                },
                {
                    "q": "What is the purpose of comments in programming code?",
                    "options": [
                        "To be executed by the computer",
                        "To provide explanations and documentation for human readers",
                        "To define variables",
                        "To indicate the start of a function"
                    ],
                    "a": 1,
                    "ex": "Comments are lines of text within code that are ignored by the compiler or interpreter but are essential for explaining the code's purpose, logic, and functionality to programmers."
                },
                {
                    "q": "What is syntax in programming?",
                    "options": [
                        "The meaning of the code",
                        "The rules that define the combinations of symbols that are considered to be correctly structured programs",
                        "The order in which instructions are executed",
                        "The output of the program"
                    ],
                    "a": 1,
                    "ex": "Syntax refers to the set of rules that govern the structure and arrangement of symbols and keywords in a programming language, determining whether the code is grammatically correct."
                },
                {
                    "q": "What is a compiler?",
                    "options": [
                        "A program that executes code line by line",
                        "A program that translates source code written in a high-level language into machine code or lower-level code all at once",
                        "A tool for debugging programs",
                        "A program that manages data storage"
                    ],
                    "a": 1,
                    "ex": "A compiler reads the entire source code of a program and translates it into a form that the computer can execute directly or into an intermediate code, typically before execution."
                },
                {
                    "q": "What is an interpreter?",
                    "options": [
                        "A program that translates source code into machine code all at once",
                        "A program that executes source code line by line without prior compilation",
                        "A tool for debugging programs",
                        "A program that manages data storage"
                    ],
                    "a": 1,
                    "ex": "An interpreter reads and executes source code line by line, translating and running each instruction as it encounters it."
                },
                {
                    "q": "What is source code?",
                    "options": [
                        "The executable version of a program",
                        "The original code written by a programmer in a high-level language",
                        "The output of a program",
                        "The data stored in a database"
                    ],
                    "a": 1,
                    "ex": "Source code is the human-readable text written by a programmer in a specific programming language."
                },
                {
                    "q": "What is the concept of abstraction in programming?",
                    "options": [
                        "Focusing on the implementation details of a function",
                        "Hiding complex details and showing only essential features",
                        "Repeating a block of code multiple times",
                        "Storing data in variables"
                    ],
                    "a": 1,
                    "ex": "Abstraction is the process of simplifying complex systems by focusing on the essential aspects and hiding unnecessary details. Functions and classes are forms of abstraction."
                },
                {
                    "q": "What is the purpose of an assignment operator (like =)?",
                    "options": [
                        "To compare two values",
                        "To assign a value to a variable",
                        "To perform mathematical calculations",
                        "To define a function"
                    ],
                    "a": 1,
                    "ex": "The assignment operator is used to store a value in a variable."
                },
                {
                    "q": "What is an array?",
                    "options": [
                        "A single variable that can store multiple values of the same data type in a structured way",
                        "A function that performs mathematical calculations",
                        "A type of conditional statement",
                        "A graphical representation of an algorithm"
                    ],
                    "a": 0,
                    "ex": "An array is a data structure that stores a fixed-size sequential collection of elements of the same data type."
                },
                {
                    "q": "What is the index of the first element in most programming arrays?",
                    "options": [
                        "1",
                        "0",
                        "-1",
                        "Depends on the programming language"
                    ],
                    "a": 1,
                    "ex": "In most widely used programming languages (like C, C++, Java, Python, JavaScript), array indexing starts from 0."
                },
                {
                    "q": "What is an infinite loop?",
                    "options": [
                        "A loop that executes a fixed number of times",
                        "A loop that never terminates because its condition for continuation is always true",
                        "A loop that executes only once",
                        "A loop that contains another loop"
                    ],
                    "a": 1,
                    "ex": "An infinite loop occurs when the loop's termination condition is never met, causing the loop to run indefinitely."
                },
                {
                    "q": "What is the purpose of a breakpoint during debugging?",
                    "options": [
                        "To stop the program execution at a specific line of code",
                        "To display the output of the program",
                        "To highlight syntax errors",
                        "To optimize the code"
                    ],
                    "a": 0,
                    "ex": "A breakpoint is a point in the program where the execution is temporarily paused, allowing the programmer to inspect the state of the program (variables, memory, etc.) at that point."
                }
            ]
        },
        {
            "id": "flowcharts-pseudocode",
            "title": "Flowcharts and Pseudocode",
            "questions": [
                {
                    "q": "What is a flowchart used for in programming?",
                    "options": [
                        "Writing the actual code",
                        "Creating a graphical representation of an algorithm or process",
                        "Debugging errors in a program",
                        "Storing data"
                    ],
                    "a": 1,
                    "ex": "Flowcharts use standard symbols to visually represent the steps, sequence, and decision points in an algorithm or process."
                },
                {
                    "q": "What is pseudocode used for in programming?",
                    "options": [
                        "Writing the actual code in a specific language",
                        "Creating a formal, standardized representation of an algorithm",
                        "Providing an informal, high-level description of an algorithm's logic",
                        "Executing a program"
                    ],
                    "a": 2,
                    "ex": "Pseudocode is a way to describe an algorithm using a combination of natural language and programming-like constructs, focusing on the logic rather than the exact syntax of a specific language."
                },
                {
                    "q": "In a flowchart, which symbol is used to represent the start or end of a process?",
                    "options": [
                        "Rectangle",
                        "Diamond",
                        "Oval/Terminator",
                        "Parallelogram"
                    ],
                    "a": 2,
                    "ex": "The oval or terminator symbol is used to indicate the beginning and end points of a flowchart."
                },
                {
                    "q": "In a flowchart, which symbol is used to represent a process or action?",
                    "options": [
                        "Diamond",
                        "Parallelogram",
                        "Rectangle",
                        "Arrow"
                    ],
                    "a": 2,
                    "ex": "A rectangle symbol represents a process, action, or operation that changes the value, form, or location of data."
                },
                {
                    "q": "In a flowchart, which symbol is used to represent a decision or a question that has two or more possible outcomes?",
                    "options": [
                        "Rectangle",
                        "Oval/Terminator",
                        "Diamond",
                        "Parallelogram"
                    ],
                    "a": 2,
                    "ex": "The diamond symbol is used to represent a decision point in a flowchart, where the flow of control branches based on a condition."
                },
                {
                    "q": "In a flowchart, which symbol is used to represent input or output operations?",
                    "options": [
                        "Rectangle",
                        "Diamond",
                        "Parallelogram",
                        "Arrow"
                    ],
                    "a": 2,
                    "ex": "The parallelogram symbol is used to indicate input or output of data."
                },
                {
                    "q": "In a flowchart, what do arrows (flowlines) represent?",
                    "options": [
                        "Process steps",
                        "Decision points",
                        "The direction of the flow of control",
                        "Input/Output"
                    ],
                    "a": 2,
                    "ex": "Arrows in a flowchart connect the different symbols and indicate the direction in which the process or algorithm proceeds."
                },
                {
                    "q": "Which of the following is an advantage of using flowcharts?",
                    "options": [
                        "They are easy to modify for complex algorithms",
                        "They provide a visual representation that is easy to understand",
                        "They are written in actual programming code",
                        "They are only useful for very simple algorithms"
                    ],
                    "a": 1,
                    "ex": "Flowcharts offer a clear and visual way to represent the logic and flow of an algorithm, making it easier for people to understand."
                },
                {
                    "q": "Which of the following is an advantage of using pseudocode?",
                    "options": [
                        "It is a formal, standardized notation",
                        "It is easily understood by computers",
                        "It is language-independent and focuses on the logic of the algorithm",
                        "It provides a detailed graphical representation"
                    ],
                    "a": 2,
                    "ex": "Pseudocode is not tied to any specific programming language, making it a good tool for designing algorithms before committing to a particular language. It focuses on the steps and logic."
                },
                {
                    "q": "Which tool is better suited for representing simple, sequential algorithms?",
                    "options": [
                        "Flowchart",
                        "Pseudocode",
                        "Both are equally suited",
                        "Neither is suitable"
                    ],
                    "a": 2,
                    "ex": "For simple, sequential algorithms, both flowcharts (with their visual representation) and pseudocode (with its step-by-step textual description) can be effective."
                },
                {
                    "q": "Which tool can become cumbersome for representing complex algorithms with many branches and loops?",
                    "options": [
                        "Flowchart",
                        "Pseudocode",
                        "Neither becomes cumbersome",
                        "Both become cumbersome"
                    ],
                    "a": 0,
                    "ex": "While useful, flowcharts can become large and difficult to follow when representing complex algorithms with numerous decision points and nested structures."
                },
                {
                    "q": "Which of the following is a characteristic of good pseudocode?",
                    "options": [
                        "It uses the exact syntax of a specific programming language",
                        "It is ambiguous and open to interpretation",
                        "It is clear, concise, and easy to understand, using simple terms",
                        "It includes detailed implementation specifics"
                    ],
                    "a": 2,
                    "ex": "Good pseudocode is designed to be easily understood by humans, using straightforward language to describe the algorithm's logic without getting bogged down in programming language specifics."
                },
                {
                    "q": "In pseudocode, how is a loop typically represented?",
                    "options": [
                        "Using a DECISION statement",
                        "Using keywords like WHILE, FOR, or REPEAT",
                        "Using INPUT/OUTPUT statements",
                        "Using process steps"
                    ],
                    "a": 1,
                    "ex": "Pseudocode uses keywords to represent common programming constructs. Loops are typically indicated by keywords such as WHILE...DO, FOR...END FOR, or REPEAT...UNTIL."
                },
                {
                    "q": "In pseudocode, how is a conditional statement typically represented?",
                    "options": [
                        "Using keywords like WHILE or FOR",
                        "Using keywords like IF...THEN...ELSE...END IF",
                        "Using INPUT/OUTPUT statements",
                        "Using process steps"
                    ],
                    "a": 1,
                    "ex": "Conditional statements in pseudocode are commonly represented using keywords like IF...THEN...ELSE...END IF or variations of these."
                },
                {
                    "q": "What is the primary advantage of using pseudocode over writing code directly for complex algorithms?",
                    "options": [
                        "It runs faster",
                        "It is easier to design and refine the algorithm's logic without worrying about syntax errors",
                        "It automatically generates the final code",
                        "It is easier to debug"
                    ],
                    "a": 1,
                    "ex": "Pseudocode allows developers to focus on the algorithmic logic and structure without being constrained by the strict syntax rules of a specific programming language, facilitating clearer thinking and easier revisions."
                },
                {
                    "q": "What is the primary advantage of using flowcharts over pseudocode for complex algorithms?",
                    "options": [
                        "They are easier to write",
                        "They provide a clear visual representation of the flow of control",
                        "They are less prone to errors",
                        "They are automatically converted to code"
                    ],
                    "a": 1,
                    "ex": "Flowcharts excel at visually depicting the flow of control, especially at decision points and within loops, making it easier to follow the execution path of a complex algorithm."
                },
                {
                    "q": "Can a flowchart and pseudocode represent the same algorithm?",
                    "options": [
                        "Yes",
                        "No",
                        "Only if the algorithm is very simple",
                        "Only if the algorithm is very complex"
                    ],
                    "a": 0,
                    "ex": "Yes, both flowcharts and pseudocode are tools for representing algorithms. They can both describe the same logical steps, just in different formats (graphical vs. textual)."
                },
                {
                    "q": "What is the level of detail typically included in pseudocode?",
                    "options": [
                        "Highly detailed, including all syntax rules",
                        "Very abstract, only outlining the main steps",
                        "Sufficiently detailed to describe the algorithm's logic without being tied to a specific language",
                        "Only includes input and output operations"
                    ],
                    "a": 2,
                    "ex": "Pseudocode aims for a level of detail that is specific enough to clearly describe the algorithm's logic and steps but general enough to be easily translated into different programming languages."
                },
                {
                    "q": "What is the level of detail typically included in a flowchart?",
                    "options": [
                        "Highly detailed, showing every single operation",
                        "Very abstract, only outlining the main symbols",
                        "Sufficiently detailed to show the flow of control and major steps",
                        "Only includes mathematical calculations"
                    ],
                    "a": 2,
                    "ex": "Flowcharts should represent the key steps and decision points of an algorithm, providing a clear visual overview of the program's flow without necessarily showing every minute detail."
                },
                {
                    "q": "What is the role of a connector in a flowchart?",
                    "options": [
                        "To represent a decision",
                        "To represent a process",
                        "To indicate a continuation of the flowchart on another page or section",
                        "To represent input/output"
                    ],
                    "a": 2,
                    "ex": "Connectors (usually small circles) are used in flowcharts to indicate that the flow of control continues to or from another part of the diagram, often on a different page."
                },
                {
                    "q": "When might you choose to use a flowchart over pseudocode?",
                    "options": [
                        "When you need to focus on the exact syntax of the code",
                        "When you want a clear visual representation of the algorithm's flow and decision points",
                        "When you need to quickly jot down the algorithm's logic",
                        "When the algorithm is very simple and sequential"
                    ],
                    "a": 1,
                    "ex": "Flowcharts are particularly useful when visualizing the branching logic (decisions) and looping structures within an algorithm."
                },
                {
                    "q": "When might you choose to use pseudocode over a flowchart?",
                    "options": [
                        "When you need a detailed graphical representation",
                        "When you are working with a very complex algorithm that would result in a large and unwieldy flowchart",
                        "When you need to represent the exact sequence of physical actions",
                        "When you are presenting the algorithm to someone who is not familiar with programming concepts"
                    ],
                    "a": 1,
                    "ex": "Pseudocode can be more manageable than a large flowchart for complex algorithms, as it allows for a more structured textual description of the steps."
                },
                {
                    "q": "Is pseudocode executable by a computer?",
                    "options": [
                        "Yes",
                        "No",
                        "Only after compilation",
                        "Only if it is very simple"
                    ],
                    "a": 1,
                    "ex": "Pseudocode is not a programming language and cannot be directly executed by a computer. It is a design tool for humans."
                },
                {
                    "q": "Is a flowchart executable by a computer?",
                    "options": [
                        "Yes",
                        "No",
                        "Only after being converted to code",
                        "Only if it is very simple"
                    ],
                    "a": 1,
                    "ex": "A flowchart is a visual representation and is not directly executable by a computer. It needs to be translated into a programming language."
                },
                {
                    "q": "Which tool is better for quickly outlining the logic of a small algorithm?",
                    "options": [
                        "Flowchart",
                        "Pseudocode",
                        "Both are equally suitable",
                        "Neither is suitable"
                    ],
                    "a": 2,
                    "ex": "For small algorithms, both pseudocode and simple flowcharts can be used for quick outlining, depending on personal preference and the nature of the algorithm."
                },
                {
                    "q": "What is the main benefit of using both flowcharts and pseudocode in the algorithm design process?",
                    "options": [
                        "It doubles the amount of work",
                        "It provides multiple perspectives for understanding and verifying the algorithm's logic before coding",
                        "It is required by most programming standards",
                        "It automates the coding process"
                    ],
                    "a": 1,
                    "ex": "Using both tools offers a more comprehensive understanding of the algorithm. The flowchart provides a visual overview, while the pseudocode provides a more detailed textual description of the steps and logic."
                },
                {
                    "q": "In pseudocode, how do you typically indicate the beginning and end of a function or procedure?",
                    "options": [
                        "Using START and END keywords",
                        "Using PROCEDURE/FUNCTION and END PROCEDURE/END FUNCTION keywords",
                        "Using curly braces {}",
                        "Using indentation"
                    ],
                    "a": 1,
                    "ex": "Common conventions for pseudocode include using keywords like PROCEDURE, FUNCTION, START, BEGIN, END, or RETURN to delineate the start and end of code blocks like functions."
                },
                {
                    "q": "In a flowchart, what does the document symbol (a rectangle with a wavy base) represent?",
                    "options": [
                        "A process step",
                        "A decision point",
                        "Input or output of a document",
                        "A connection point"
                    ],
                    "a": 2,
                    "ex": "The document symbol in a flowchart is used to indicate the input or output of a document or report."
                },
                {
                    "q": "What is the purpose of using indentation in pseudocode?",
                    "options": [
                        "To make the pseudocode executable",
                        "To visually indicate the structure and nesting of control flow statements (like loops and conditionals)",
                        "To highlight keywords",
                        "To add comments"
                    ],
                    "a": 1,
                    "ex": "Indentation is crucial in pseudocode to visually represent the block structure and nesting of conditional statements and loops, making the logic easier to follow."
                },
                {
                    "q": "Which symbol in a flowchart represents a predefined process or a subroutine?",
                    "options": [
                        "Rectangle",
                        "Diamond",
                        "Parallelogram",
                        "Rectangle with double vertical lines"
                    ],
                    "a": 3,
                    "ex": "A rectangle with double vertical lines is used to represent a predefined process or subroutine, indicating that the details of this process are shown in a separate flowchart or have been defined elsewhere."
                }
            ]
        },
        {
            "id": "c-cpp-programming",
            "title": "C/C++ Programming",
            "questions": [
                {
                    "q": "What is the primary function of the `main` function in C and C++ programs?",
                    "options": [
                        "To define variables",
                        "To include header files",
                        "It is the entry point of the program execution",
                        "To perform calculations"
                    ],
                    "a": 2,
                    "ex": "The `main` function is where the execution of a C or C++ program begins."
                },
                {
                    "q": "Which header file in C is used for standard input and output operations (like printing to the console and reading input)?",
                    "options": [
                        "`<stdlib.h>`",
                        "`<string.h>`",
                        "`<stdio.h>`",
                        "`<math.h>`"
                    ],
                    "a": 2,
                    "ex": "The `<stdio.h>` header file (Standard Input/Output) provides functions like `printf` and `scanf` for console I/O."
                },
                {
                    "q": "Which header file in C++ is commonly used for input and output streams?",
                    "options": [
                        "`<vector>`",
                        "`<string>`",
                        "`<iostream>`",
                        "`<fstream>`"
                    ],
                    "a": 2,
                    "ex": "The `<iostream>` header file provides the `cin` (standard input) and `cout` (standard output) objects for stream-based I/O in C++."
                },
                {
                    "q": "What is a pointer in C/C++?",
                    "options": [
                        "A variable that stores a numerical value",
                        "A variable that stores a character",
                        "A variable that stores the memory address of another variable",
                        "A function that returns a value"
                    ],
                    "a": 2,
                    "ex": "A pointer is a powerful feature in C and C++ that allows you to directly work with memory addresses."
                },
                {
                    "q": "Which operator is used to get the memory address of a variable in C/C++?",
                    "options": [
                        "`*` (dereference operator)",
                        "`&` (address-of operator)",
                        "`+`",
                        "`-`"
                    ],
                    "a": 1,
                    "ex": "The `&` operator is used to obtain the memory address of a variable."
                },
                {
                    "q": "Which operator is used to access the value stored at the memory address pointed to by a pointer (dereferencing)?",
                    "options": [
                        "`&` (address-of operator)",
                        "`*` (dereference operator)",
                        "`.`",
                        "`->`"
                    ],
                    "a": 1,
                    "ex": "The `*` operator, when used with a pointer, accesses the value stored at the memory location that the pointer points to."
                },
                {
                    "q": "What is an array in C/C++?",
                    "options": [
                        "A single variable that stores multiple values of different data types",
                        "A single variable that stores multiple values of the same data type in a contiguous block of memory",
                        "A function that performs a specific task",
                        "A structure that stores key-value pairs"
                    ],
                    "a": 1,
                    "ex": "An array is a collection of elements of the same data type stored in adjacent memory locations, accessed using an index."
                },
                {
                    "q": "In C++, what is a class?",
                    "options": [
                        "A function that performs a specific task",
                        "A blueprint or template for creating objects, defining their properties (attributes) and behaviors (methods)",
                        "A variable that stores multiple values",
                        "A keyword used for loops"
                    ],
                    "a": 1,
                    "ex": "A class is the fundamental building block of Object-Oriented Programming (OOP) in C++. It encapsulates data and the functions that operate on that data."
                },
                {
                    "q": "In C++, what is an object?",
                    "options": [
                        "A blueprint for creating classes",
                        "An instance of a class",
                        "A variable that stores a single value",
                        "A type of operator"
                    ],
                    "a": 1,
                    "ex": "An object is a concrete instance of a class. When you create an object, memory is allocated for its attributes, and you can access its methods."
                },
                {
                    "q": "What is inheritance in Object-Oriented Programming?",
                    "options": [
                        "Creating a new class based on an existing class, inheriting its properties and behaviors",
                        "Combining data and methods into a single unit",
                        "Having multiple functions with the same name but different parameters",
                        "Hiding the implementation details of a class"
                    ],
                    "a": 0,
                    "ex": "Inheritance allows a new class (derived class or subclass) to inherit attributes and methods from an existing class (base class or superclass), promoting code reusability."
                },
                {
                    "q": "What is polymorphism in Object-Oriented Programming?",
                    "options": [
                        "Creating a new class based on an existing class",
                        "Combining data and methods into a single unit",
                        "The ability of an object or function to take on multiple forms or have multiple implementations",
                        "Hiding the implementation details of a class"
                    ],
                    "a": 2,
                    "ex": "Polymorphism means 'many forms'. In OOP, it allows objects of different classes to be treated as objects of a common superclass, and a single function call can result in different behaviors depending on the object's actual type."
                },
                {
                    "q": "What is encapsulation in Object-Oriented Programming?",
                    "options": [
                        "Creating a new class based on an existing class",
                        "Combining data and methods that operate on the data into a single unit (a class), and often hiding the internal implementation details",
                        "Having multiple functions with the same name but different parameters",
                        "Allowing objects to take on multiple forms"
                    ],
                    "a": 1,
                    "ex": "Encapsulation is the bundling of data (attributes) and the methods (functions) that operate on that data into a single unit (a class). It often involves data hiding to protect the internal state of an object."
                },
                {
                    "q": "Which keyword is used to declare a constant in C++?",
                    "options": [
                        "`var`",
                        "`let`",
                        "`const`",
                        "`final`"
                    ],
                    "a": 2,
                    "ex": "The `const` keyword is used to declare variables whose values cannot be changed after initialization."
                },
                {
                    "q": "What is the purpose of the `include` directive in C/C++?",
                    "options": [
                        "To define a function",
                        "To create a variable",
                        "To include the content of another file (usually a header file) into the current file",
                        "To execute a block of code repeatedly"
                    ],
                    "a": 2,
                    "ex": "The `#include` preprocessor directive tells the compiler to insert the content of the specified header file into the source code before compilation."
                },
                {
                    "q": "What is the difference between `==` and `=` in C/C++?",
                    "options": [
                        "`==` is for assignment, `=` is for comparison",
                        "`==` is for comparison, `=` is for assignment",
                        "Both are used for comparison",
                        "Both are used for assignment"
                    ],
                    "a": 1,
                    "ex": "The `==` operator is used for comparison (checking if two values are equal), while the `=` operator is used for assignment (assigning a value to a variable)."
                },
                {
                    "q": "What is a destructor in C++?",
                    "options": [
                        "A function that initializes an object",
                        "A function that is automatically called when an object is destroyed (goes out of scope or is deleted) to clean up resources",
                        "A function that performs calculations",
                        "A function that creates a new object"
                    ],
                    "a": 1,
                    "ex": "A destructor is a special member function of a class that is automatically invoked when an object of that class is destroyed. It is typically used to release resources (like allocated memory) held by the object."
                },
                {
                    "q": "What is a constructor in C++?",
                    "options": [
                        "A function that cleans up resources",
                        "A function that is automatically called when an object of a class is created to initialize its members",
                        "A function that performs calculations",
                        "A function that deletes an object"
                    ],
                    "a": 1,
                    "ex": "A constructor is a special member function of a class that is automatically called when an object of that class is created. It is used to initialize the object's member variables."
                },
                {
                    "q": "What is memory allocation?",
                    "options": [
                        "Storing data in a database",
                        "Assigning memory space for variables and data structures",
                        "Writing data to a file",
                        "Executing a program"
                    ],
                    "a": 1,
                    "ex": "Memory allocation is the process of reserving space in the computer's memory for storing data that will be used by a program."
                },
                {
                    "q": "What is memory deallocation?",
                    "options": [
                        "Storing data in a database",
                        "Freeing up memory space that is no longer needed by a program",
                        "Writing data to a file",
                        "Executing a program"
                    ],
                    "a": 1,
                    "ex": "Memory deallocation is the process of releasing memory space that was previously allocated to a program, making it available for other programs to use."
                },
                {
                    "q": "In C++, what is the purpose of the `namespace` keyword?",
                    "options": [
                        "To define a new class",
                        "To create a variable",
                        "To organize code into logical groups and prevent naming conflicts",
                        "To include header files"
                    ],
                    "a": 2,
                    "ex": "Namespaces provide a way to group related declarations (like classes, functions, variables) under a unique name to avoid naming conflicts, especially in large projects or when using libraries."
                },
                {
                    "q": "What is function overloading in C++?",
                    "options": [
                        "Defining multiple functions with different names but the same parameters",
                        "Defining multiple functions with the same name but different parameters or number of parameters",
                        "Defining a function within another function",
                        "Defining a function that calls itself"
                    ],
                    "a": 1,
                    "ex": "Function overloading allows you to define multiple functions in the same scope with the same name but with different parameter lists (different types, order, or number of parameters)."
                },
                {
                    "q": "What is operator overloading in C++?",
                    "options": [
                        "Defining new operators",
                        "Giving operators different meanings based on the context (the types of operands)",
                        "Using multiple operators in a single expression",
                        "Changing the precedence of operators"
                    ],
                    "a": 1,
                    "ex": "Operator overloading allows you to redefine the way operators work for user-defined data types (classes), giving them special meanings when applied to objects of those classes."
                },
                {
                    "q": "What is the difference between `struct` in C and `struct` in C++?",
                    "options": [
                        "There is no difference",
                        "In C, `struct` can contain member functions, but in C++ it cannot",
                        "In C++, `struct` can contain member functions and has features similar to a class (with members public by default), while in C it can only contain data members",
                        "In C, `struct` can have access specifiers (public/private), but in C++ it cannot"
                    ],
                    "a": 2,
                    "ex": "In C++, `struct` is essentially a class where members are public by default. It can have both data members and member functions. In C, `struct` can only contain data members."
                },
                {
                    "q": "What is the purpose of the `this` pointer in C++?",
                    "options": [
                        "To point to the next object in a list",
                        "To point to the base class object",
                        "To point to the current object that the member function is being called on",
                        "To point to a null value"
                    ],
                    "a": 2,
                    "ex": "The `this` pointer is a special pointer in C++ that points to the object for which a member function is called. It is implicitly used to access the members of the current object."
                },
                {
                    "q": "What is the role of the `virtual` keyword in C++?",
                    "options": [
                        "To make a function accessible from anywhere",
                        "To indicate that a function can be overloaded",
                        "To enable polymorphism by allowing a derived class's version of a function to be called through a base class pointer or reference",
                        "To define a constant function"
                    ],
                    "a": 2,
                    "ex": "The `virtual` keyword is used in the base class to declare a member function that is expected to be overridden by derived classes. This enables dynamic polymorphism (runtime binding)."
                },
                {
                    "q": "What is an abstract class in C++?",
                    "options": [
                        "A class that cannot have any member functions",
                        "A class that contains at least one pure virtual function and cannot be instantiated directly",
                        "A class that can only be used for inheritance",
                        "A class that has no member variables"
                    ],
                    "a": 1,
                    "ex": "An abstract class is a class that is designed to be a base class for other classes. It contains at least one pure virtual function (a virtual function with `= 0`). You cannot create objects directly from an abstract class."
                },
                {
                    "q": "What is a pure virtual function in C++?",
                    "options": [
                        "A virtual function that has already been implemented",
                        "A virtual function declared with `= 0` at the end of its declaration in the base class, indicating that derived classes must provide an implementation",
                        "A virtual function that returns no value",
                        "A virtual function that cannot be overridden"
                    ],
                    "a": 1,
                    "ex": "A pure virtual function is a virtual function in a base class that has no implementation (`= 0`). It forces derived classes to provide their own implementation of that function."
                },
                {
                    "q": "What is dynamic memory allocation in C/C++?",
                    "options": [
                        "Allocating memory at compile time",
                        "Allocating memory on the stack",
                        "Allocating memory on the heap during program execution",
                        "Allocating memory for static variables"
                    ],
                    "a": 2,
                    "ex": "Dynamic memory allocation involves allocating memory from the heap (a region of memory for dynamic allocation) during the runtime of the program, using functions like `malloc` and `calloc` in C, and operators `new` and `delete` in C++."
                },
                {
                    "q": "What is the purpose of the `new` operator in C++?",
                    "options": [
                        "To deallocate memory",
                        "To allocate memory dynamically on the heap for an object or an array of objects",
                        "To create a new variable on the stack",
                        "To perform mathematical calculations"
                    ],
                    "a": 1,
                    "ex": "The `new` operator is used in C++ to allocate memory dynamically for an object or an array of objects on the heap and returns a pointer to the allocated memory."
                },
                {
                    "q": "What is the purpose of the `delete` operator in C++?",
                    "options": [
                        "To allocate memory",
                        "To deallocate memory that was previously allocated with `new`",
                        "To delete a variable from the stack",
                        "To delete a file from the system"
                    ],
                    "a": 1,
                    "ex": "The `delete` operator is used in C++ to deallocate memory that was previously allocated using the `new` operator, freeing up that memory for reuse."
                }
            ]
        },
        {
            "id": "java-programming",
            "title": "Java Programming",
            "questions": [
                {
                    "q": "What is the main characteristic of Java?",
                    "options": [
                        "Platform-dependent",
                        "Compiled only",
                        "Interpreted only",
                        "Platform-independent (Write Once, Run Anywhere)"
                    ],
                    "a": 3,
                    "ex": "Java is designed to be platform-independent. Java source code is compiled into bytecode, which can then be executed on any platform with a Java Virtual Machine (JVM)."
                },
                {
                    "q": "What does JVM stand for?",
                    "options": [
                        "Java Version Machine",
                        "Java Virtual Machine",
                        "Java Verification Module",
                        "Java Visual Machine"
                    ],
                    "a": 1,
                    "ex": "JVM stands for Java Virtual Machine, which is a virtual machine that executes Java bytecode."
                },
                {
                    "q": "What is the file extension for a Java source code file?",
                    "options": [
                        ".class",
                        ".jar",
                        ".java",
                        ".txt"
                    ],
                    "a": 2,
                    "ex": "Java source code files have the `.java` extension."
                },
                {
                    "q": "What is the file extension for a Java bytecode file?",
                    "options": [
                        ".java",
                        ".jar",
                        ".class",
                        ".txt"
                    ],
                    "a": 2,
                    "ex": "When Java source code is compiled, it is translated into bytecode, which is stored in files with the `.class` extension."
                },
                {
                    "q": "Which keyword is used to declare a class in Java?",
                    "options": [
                        "`object`",
                        "`class`",
                        "`create`",
                        "`type`"
                    ],
                    "a": 1,
                    "ex": "The `class` keyword is used to define a class in Java."
                },
                {
                    "q": "What is an object in Java?",
                    "options": [
                        "A blueprint for creating classes",
                        "An instance of a class",
                        "A variable that stores a single value",
                        "A type of data structure"
                    ],
                    "a": 1,
                    "ex": "An object is a concrete instance of a class. When an object is created, it has its own state (values of instance variables) and can perform actions (call methods)."
                },
                {
                    "q": "What is a method in Java?",
                    "options": [
                        "A variable that stores a value",
                        "A blueprint for creating objects",
                        "A block of code that performs a specific task and can be called",
                        "A type of data structure"
                    ],
                    "a": 2,
                    "ex": "A method in Java is a function that belongs to a class or an object. It defines the behavior of the object."
                },
                {
                    "q": "What is the entry point for the execution of a standalone Java application?",
                    "options": [
                        "The first line of code",
                        "The `start` method",
                        "The `main` method",
                        "The `run` method"
                    ],
                    "a": 2,
                    "ex": "The `main` method (specifically `public static void main(String[] args)`) is the starting point for the execution of a Java application."
                },
                {
                    "q": "Which keyword is used to create an object of a class in Java?",
                    "options": [
                        "`new`",
                        "`create`",
                        "`instanceof`",
                        "`class`"
                    ],
                    "a": 0,
                    "ex": "The `new` keyword is used to create a new object (an instance) of a class."
                },
                {
                    "q": "What is inheritance in Java?",
                    "options": [
                        "Combining data and methods into a single unit",
                        "Having multiple methods with the same name but different parameters",
                        "A mechanism where one class acquires the properties (fields and methods) of another class",
                        "Hiding the implementation details of a class"
                    ],
                    "a": 2,
                    "ex": "Inheritance allows a class (subclass or derived class) to inherit attributes and methods from another class (superclass or base class), promoting code reusability."
                },
                {
                    "q": "What is polymorphism in Java?",
                    "options": [
                        "A mechanism where one class acquires the properties of another class",
                        "Combining data and methods into a single unit",
                        "Having multiple methods with the same name but different parameters",
                        "The ability of an object to take on many forms, allowing a single method call to perform different actions based on the object's type"
                    ],
                    "a": 3,
                    "ex": "Polymorphism in Java allows objects of different classes to be treated as objects of a common superclass, and a single method call can result in different behaviors depending on the actual type of the object."
                },
                {
                    "q": "What is encapsulation in Java?",
                    "options": [
                        "A mechanism where one class acquires the properties of another class",
                        "Combining data (fields) and the methods that operate on that data into a single unit (a class), and often restricting direct access to the data",
                        "Having multiple methods with the same name but different parameters",
                        "The ability of an object to take on many forms"
                    ],
                    "a": 1,
                    "ex": "Encapsulation bundles data and methods within a class. Access modifiers (like `private`) are used to control access to the data, often requiring methods (getters and setters) to interact with it."
                },
                {
                    "q": "Which access modifier makes a member accessible only within its own class?",
                    "options": [
                        "`public`",
                        "`protected`",
                        "`private`",
                        "`default` (no keyword)"
                    ],
                    "a": 2,
                    "ex": "The `private` access modifier restricts access to members so they can only be accessed within the class where they are declared."
                },
                {
                    "q": "Which access modifier makes a member accessible within its own class, by subclasses, and within the same package?",
                    "options": [
                        "`public`",
                        "`protected`",
                        "`private`",
                        "`default` (no keyword)"
                    ],
                    "a": 1,
                    "ex": "The `protected` access modifier allows members to be accessed within the same class, by subclasses (in any package), and by classes within the same package."
                },
                {
                    "q": "Which access modifier makes a member accessible from anywhere?",
                    "options": [
                        "`public`",
                        "`protected`",
                        "`private`",
                        "`default` (no keyword)"
                    ],
                    "a": 0,
                    "ex": "The `public` access modifier allows members to be accessed from any other class."
                },
                {
                    "q": "What is the default access modifier in Java?",
                    "options": [
                        "`public`",
                        "`protected`",
                        "`private`",
                        "`default` (no keyword)"
                    ],
                    "a": 3,
                    "ex": "If no access modifier is specified, the member has default (package-private) access, meaning it is accessible only within the same package."
                },
                {
                    "q": "What is the purpose of the `super` keyword in Java?",
                    "options": [
                        "To refer to the current object",
                        "To refer to the superclass (parent class) of an object",
                        "To refer to a static member of a class",
                        "To create a new object"
                    ],
                    "a": 1,
                    "ex": "The `super` keyword is used to refer to the immediate superclass of a class, often used to access members (fields or methods) of the superclass that are hidden by members in the subclass, or to call the superclass constructor."
                },
                {
                    "q": "What is method overloading in Java?",
                    "options": [
                        "Defining a method in a subclass with the same name and signature as a method in the superclass",
                        "Defining multiple methods in the same class with the same name but different parameter lists",
                        "Defining a method that calls itself",
                        "Defining a method with a variable number of arguments"
                    ],
                    "a": 1,
                    "ex": "Method overloading allows a class to have multiple methods with the same name, provided that their parameter lists are different (different types, order, or number of parameters)."
                },
                {
                    "q": "What is method overriding in Java?",
                    "options": [
                        "Defining multiple methods in the same class with the same name but different parameter lists",
                        "Defining a method in a subclass with the same name and signature (name and parameter list) as a method in the superclass",
                        "Defining a method that calls itself",
                        "Defining a method with a variable number of arguments"
                    ],
                    "a": 1,
                    "ex": "Method overriding occurs when a subclass provides its own implementation of a method that is already defined in its superclass. The method in the subclass has the same name, return type, and parameter list as the method in the superclass."
                },
                {
                    "q": "What is an abstract class in Java?",
                    "options": [
                        "A class that cannot have any member variables",
                        "A class that cannot have any methods",
                        "A class that cannot be instantiated and may contain abstract methods (methods without an implementation)",
                        "A class that can only be used for inheritance"
                    ],
                    "a": 2,
                    "ex": "An abstract class is a class that is declared with the `abstract` keyword. It cannot be instantiated directly but can be subclassed. It may contain both abstract methods (declared with `abstract` and no body) and concrete methods."
                },
                {
                    "q": "What is an interface in Java?",
                    "options": [
                        "A class that cannot be instantiated",
                        "A blueprint of a class, containing abstract methods and constants, that a class can implement",
                        "A type of data structure for storing key-value pairs",
                        "A mechanism for handling exceptions"
                    ],
                    "a": 1,
                    "ex": "An interface is a contract that defines a set of methods that a class must implement. It contains only method signatures and constants (in older versions of Java; newer versions allow default and static methods)."
                },
                {
                    "q": "What is exception handling in Java?",
                    "options": [
                        "Ignoring errors in a program",
                        "Preventing all errors from occurring",
                        "A mechanism to deal with abnormal conditions (exceptions) that occur during the execution of a program",
                        "Converting errors into warnings"
                    ],
                    "a": 2,
                    "ex": "Exception handling in Java uses `try`, `catch`, and `finally` blocks to manage and respond to runtime errors or exceptional events in a controlled manner, preventing program crashes."
                },
                {
                    "q": "What is the `try` block in Java exception handling used for?",
                    "options": [
                        "To define the code that handles an exception",
                        "To specify the code that should be executed regardless of whether an exception occurs",
                        "To enclose the code that might throw an exception",
                        "To declare a new exception type"
                    ],
                    "a": 2,
                    "ex": "The `try` block contains the code that is suspected to potentially throw an exception."
                },
                {
                    "q": "What is the `catch` block in Java exception handling used for?",
                    "options": [
                        "To enclose the code that might throw an exception",
                        "To specify the code that should be executed regardless of whether an exception occurs",
                        "To define the code that handles a specific type of exception",
                        "To declare a new exception type"
                    ],
                    "a": 2,
                    "ex": "The `catch` block is executed if an exception of the specified type occurs within the corresponding `try` block. It contains the code to handle the exception."
                },
                {
                    "q": "What is the `finally` block in Java exception handling used for?",
                    "options": [
                        "To enclose the code that might throw an exception",
                        "To define the code that handles an exception",
                        "To specify the code that should be executed regardless of whether an exception occurs (e.g., for cleanup)",
                        "To declare a new exception type"
                    ],
                    "a": 2,
                    "ex": "The `finally` block is optional and is executed after the `try` and `catch` blocks, regardless of whether an exception occurred or was caught. It is typically used for cleanup operations."
                },
                {
                    "q": "What is the purpose of the `static` keyword in Java?",
                    "options": [
                        "To indicate that a member belongs to an object",
                        "To indicate that a member belongs to the class itself, rather than to any specific instance (object) of the class",
                        "To make a member constant",
                        "To restrict access to a member"
                    ],
                    "a": 1,
                    "ex": "The `static` keyword is used to declare class-level members. Static variables are shared among all instances of the class, and static methods can be called directly on the class without creating an object."
                },
                {
                    "q": "What is the difference between an array and an ArrayList in Java?",
                    "options": [
                        "Arrays are dynamic in size, ArrayLists are fixed size",
                        "Arrays can store objects, ArrayLists can only store primitive types",
                        "Arrays are fixed size and can store primitive types and objects, while ArrayLists are dynamic size and can only store objects (or wrappers for primitives)",
                        "There is no significant difference"
                    ],
                    "a": 2,
                    "ex": "Arrays have a fixed size determined at creation, while ArrayLists are part of the Collections framework and are dynamic in size. Arrays can store both primitive types and objects, while ArrayLists store objects (using wrapper classes for primitives)."
                },
                {
                    "q": "What is constructor chaining in Java?",
                    "options": [
                        "Creating multiple constructors with different names",
                        "Calling a constructor from another constructor within the same class or from a subclass",
                        "Using multiple constructors to create a single object",
                        "Defining a constructor in an interface"
                    ],
                    "a": 1,
                    "ex": "Constructor chaining is the process of calling one constructor from another constructor. This can be done within the same class (using `this()`) or from a subclass to call a superclass constructor (using `super()`)."
                },
                {
                    "q": "What is the purpose of the `final` keyword in Java?",
                    "options": [
                        "To make a class abstract",
                        "To indicate that a variable, method, or class cannot be changed or overridden",
                        "To indicate that a method returns no value",
                        "To make a member accessible from anywhere"
                    ],
                    "a": 1,
                    "ex": "The `final` keyword has different meanings depending on what it is applied to: a `final` variable is a constant, a `final` method cannot be overridden by subclasses, and a `final` class cannot be subclassed."
                }
            ]
        },
        {
            "id": "python-programming",
            "title": "Python Programming",
            "questions": [
                {
                    "q": "What is the primary characteristic of Python?",
                    "options": [
                        "Compiled language",
                        "Interpreted language",
                        "Statically typed language",
                        "Uses strict syntax for indentation"
                    ],
                    "a": 1,
                    "ex": "Python is an interpreted language, meaning the code is executed line by line by an interpreter rather than being fully compiled before execution."
                },
                {
                    "q": "Which of the following is NOT a standard data type in Python?",
                    "options": [
                        "List",
                        "Tuple",
                        "Set",
                        "Array"
                    ],
                    "a": 3,
                    "ex": "List, Tuple, and Set are built-in data types in Python. While Python has concepts related to arrays (like NumPy arrays), 'Array' itself is not a standard built-in data type in the same way."
                },
                {
                    "q": "How do you assign a value to a variable in Python?",
                    "options": [
                        "`x == 5`",
                        "`x = 5`",
                        "`assign x to 5`",
                        "`let x = 5`"
                    ],
                    "a": 1,
                    "ex": "The `=` operator is used for assignment in Python, similar to many other programming languages."
                },
                {
                    "q": "Which symbol is used for single-line comments in Python?",
                    "options": [
                        "`//`",
                        "`#`",
                        "`/* */`",
                        "`--`"
                    ],
                    "a": 1,
                    "ex": "The `#` symbol is used to indicate a single-line comment in Python. Anything after `#` on that line is ignored by the interpreter."
                },
                {
                    "q": "Which keyword is used to define a function in Python?",
                    "options": [
                        "`function`",
                        "`def`",
                        "`method`",
                        "`func`"
                    ],
                    "a": 1,
                    "ex": "The `def` keyword is used to define a function in Python."
                },
                {
                    "q": "What is the purpose of indentation in Python?",
                    "options": [
                        "To make the code look pretty",
                        "To indicate blocks of code (like within loops, conditionals, and functions)",
                        "To add comments",
                        "To define variables"
                    ],
                    "a": 1,
                    "ex": "Indentation is crucial in Python. It is used to define the scope of blocks of code. Consistent indentation is required for the code to be syntactically correct."
                },
                {
                    "q": "What is a list in Python?",
                    "options": [
                        "An ordered collection of unique elements",
                        "An unordered collection of unique elements",
                        "An ordered, mutable collection of items",
                        "An unordered, immutable collection of key-value pairs"
                    ],
                    "a": 2,
                    "ex": "A list is a mutable (changeable), ordered sequence of elements. Lists are defined using square brackets `[]`."
                },
                {
                    "q": "What is a tuple in Python?",
                    "options": [
                        "An ordered, mutable collection of items",
                        "An ordered, immutable collection of items",
                        "An unordered collection of unique elements",
                        "An unordered, immutable collection of key-value pairs"
                    ],
                    "a": 1,
                    "ex": "A tuple is an immutable (unchangeable), ordered sequence of elements. Tuples are defined using parentheses `()`."
                },
                {
                    "q": "What is a set in Python?",
                    "options": [
                        "An ordered collection of unique elements",
                        "An unordered collection of unique elements",
                        "An ordered, mutable collection of items",
                        "An unordered, immutable collection of key-value pairs"
                    ],
                    "a": 1,
                    "ex": "A set is an unordered collection of unique elements. Sets are defined using curly braces `{}` or the `set()` constructor."
                },
                {
                    "q": "What is a dictionary in Python?",
                    "options": [
                        "An ordered collection of unique elements",
                        "An unordered collection of unique elements",
                        "An ordered, mutable collection of items",
                        "An unordered, mutable collection of key-value pairs"
                    ],
                    "a": 3,
                    "ex": "A dictionary is an unordered (in versions prior to Python 3.7, ordered in 3.7+), mutable collection of key-value pairs. Dictionaries are defined using curly braces `{}`."
                },
                {
                    "q": "Which keyword is used to create a class in Python?",
                    "options": [
                        "`object`",
                        "`class`",
                        "`type`",
                        "`define`"
                    ],
                    "a": 1,
                    "ex": "The `class` keyword is used to define a class in Python."
                },
                {
                    "q": "What is the role of the `__init__` method in a Python class?",
                    "options": [
                        "To destroy an object",
                        "To perform calculations",
                        "It is a constructor, automatically called when a new object is created to initialize its attributes",
                        "To print output"
                    ],
                    "a": 2,
                    "ex": "The `__init__` method is a special method in Python classes that serves as the constructor. It is called automatically when you create a new instance (object) of the class and is used to set up the initial state of the object."
                },
                {
                    "q": "What is inheritance in Python?",
                    "options": [
                        "Combining data and methods into a single unit",
                        "Having multiple methods with the same name but different parameters",
                        "A mechanism where a new class (subclass) derives properties and behaviors from an existing class (superclass)",
                        "Hiding the implementation details of a class"
                    ],
                    "a": 2,
                    "ex": "Inheritance allows a class (child class) to inherit attributes and methods from another class (parent class), promoting code reusability and establishing an 'is-a' relationship."
                },
                {
                    "q": "What is polymorphism in Python?",
                    "options": [
                        "A mechanism where a new class derives properties from an existing class",
                        "Combining data and methods into a single unit",
                        "Having multiple methods with the same name but different parameters",
                        "The ability of objects of different classes to respond to the same method call in their own way"
                    ],
                    "a": 3,
                    "ex": "Polymorphism in Python allows objects of different types to be treated uniformly when a method is called, as long as they support that method. This is often referred to as 'duck typing' ('If it walks like a duck and quacks like a duck, it's a duck')."
                },
                {
                    "q": "What is encapsulation in Python?",
                    "options": [
                        "A mechanism where a new class derives properties from an existing class",
                        "Combining data and methods that operate on that data within a class",
                        "Having multiple methods with the same name but different parameters",
                        "The ability of objects of different classes to respond to the same method call"
                    ],
                    "a": 1,
                    "ex": "Encapsulation involves bundling data (attributes) and the methods that operate on that data within a class. While Python doesn't have strict access modifiers like `private`, encapsulation is achieved through conventions and property decorators."
                },
                {
                    "q": "What is a module in Python?",
                    "options": [
                        "A single function",
                        "A single class",
                        "A file containing Python code (definitions, statements, etc.) that can be imported and used in other Python programs",
                        "A variable that stores multiple values"
                    ],
                    "a": 2,
                    "ex": "A module is a Python file (`.py`) containing a collection of related functions, classes, and variables. Modules allow for code organization and reusability."
                },
                {
                    "q": "How do you import a module named `math` in Python?",
                    "options": [
                        "`include math`",
                        "`import math`",
                        "`use math`",
                        "`require math`"
                    ],
                    "a": 1,
                    "ex": "The `import` keyword is used to bring the definitions from a module into the current Python script or interactive session."
                },
                {
                    "q": "What is the purpose of the `if`, `elif`, and `else` keywords in Python?",
                    "options": [
                        "To define a loop",
                        "To define a function",
                        "To implement conditional execution of code blocks",
                        "To define a class"
                    ],
                    "a": 2,
                    "ex": "The `if`, `elif` (else if), and `else` keywords are used to create conditional statements, allowing the program to execute different code blocks based on whether certain conditions are true or false."
                },
                {
                    "q": "What is the purpose of the `for` and `while` keywords in Python?",
                    "options": [
                        "To define a function",
                        "To implement conditional execution",
                        "To create objects",
                        "To implement loops for repeating code blocks"
                    ],
                    "a": 3,
                    "ex": "The `for` loop is typically used to iterate over a sequence (like a list or string), while the `while` loop repeats a block of code as long as a condition is true."
                },
                {
                    "q": "What is slicing in Python?",
                    "options": [
                        "Dividing a number by another number",
                        "Extracting a portion (substring, sublist, etc.) from a sequence (string, list, tuple)",
                        "Rounding a floating-point number",
                        "Concatenating two strings"
                    ],
                    "a": 1,
                    "ex": "Slicing allows you to access a range of elements from a sequence using indices and a colon notation (e.g., `my_list[start:end:step]`)."
                },
                {
                    "q": "What is the result of the expression `5 + 2 * 3` in Python?",
                    "options": [
                        "21",
                        "11",
                        "17",
                        "15"
                    ],
                    "a": 1,
                    "ex": "Python follows the standard order of operations (PEMDAS/BODMAS). Multiplication (2 * 3 = 6) is performed before addition (5 + 6 = 11)."
                },
                {
                    "q": "What is the output of `print(type([]))` in Python?",
                    "options": [
                        "`<class 'list'>`",
                        "`<class 'tuple'>`",
                        "`<class 'dict'>`",
                        "`<class 'set'>`"
                    ],
                    "a": 0,
                    "ex": "The `type()` function returns the type of an object. `[]` creates an empty list, so its type is `list`."
                },
                {
                    "q": "What is the output of `print('Hello' + ' ' + 'World')` in Python?",
                    "options": [
                        "`Hello World`",
                        "`HelloWorld`",
                        "`'Hello' + ' ' + 'World'`",
                        "Error"
                    ],
                    "a": 0,
                    "ex": "The `+` operator is used for string concatenation in Python, joining the strings together."
                },
                {
                    "q": "How do you check if a key exists in a dictionary named `my_dict` in Python?",
                    "options": [
                        "`my_dict.has_key('key')`",
                        "`'key' in my_dict`",
                        "`my_dict.get('key')`",
                        "`my_dict['key'] is not None`"
                    ],
                    "a": 1,
                    "ex": "The `in` operator is the standard and most Pythonic way to check for the existence of a key in a dictionary."
                },
                {
                    "q": "What is the purpose of the `range()` function in Python?",
                    "options": [
                        "To generate random numbers",
                        "To create a list of numbers",
                        "To generate a sequence of numbers, often used in for loops",
                        "To calculate the range of values in a list"
                    ],
                    "a": 2,
                    "ex": "The `range()` function generates a sequence of numbers (an iterable). It is commonly used to control the number of iterations in a `for` loop."
                },
                {
                    "q": "What is a docstring in Python?",
                    "options": [
                        "A single-line comment",
                        "A multi-line string used to document modules, classes, functions, or methods",
                        "A keyword for defining documentation",
                        "A type of error message"
                    ],
                    "a": 1,
                    "ex": "Docstrings are special string literals used to document code in Python. They are enclosed in triple quotes (`'''Docstring'''` or `\"\"\"Docstring\"\"\"`) and can span multiple lines."
                },
                {
                    "q": "What is the purpose of the `return` statement in a Python function?",
                    "options": [
                        "To print output to the console",
                        "To stop the execution of the function and optionally send a value back to the caller",
                        "To define a loop",
                        "To handle exceptions"
                    ],
                    "a": 1,
                    "ex": "The `return` statement exits a function and optionally sends a value back to the part of the program that called the function."
                },
                {
                    "q": "What is an exception in Python?",
                    "options": [
                        "A syntax error in the code",
                        "An event that occurs during the execution of a program that disrupts the normal flow of instructions",
                        "A type of loop",
                        "A function that is called automatically"
                    ],
                    "a": 1,
                    "ex": "An exception is an error that occurs during the runtime of a program, causing the program to terminate abnormally if not handled."
                },
                {
                    "q": "How do you handle exceptions in Python?",
                    "options": [
                        "Using `if/else` statements",
                        "Using `for` loops",
                        "Using `try`, `except`, and optionally `finally` blocks",
                        "Using `while` loops"
                    ],
                    "a": 2,
                    "ex": "Python uses `try...except` blocks to handle exceptions. Code that might raise an exception is placed in the `try` block, and the code to handle the exception is placed in the `except` block. A `finally` block can be used for cleanup."
                },
                {
                    "q": "What is the Python Package Index (PyPI)?",
                    "options": [
                        "A website for learning Python basics",
                        "A repository of third-party Python software packages that can be easily installed",
                        "A tool for debugging Python code",
                        "A built-in Python module"
                    ],
                    "a": 1,
                    "ex": "PyPI (pronounced 'pie-pie') is the official third-party software repository for Python. It hosts thousands of libraries and frameworks that extend Python's capabilities."
                },
                {
                    "q": "Which tool is commonly used to install packages from PyPI?",
                    "options": [
                        "`python install`",
                        "`get-pip`",
                        "`pip install`",
                        "`install package`"
                    ],
                    "a": 2,
                    "ex": "Pip is the standard package installer for Python. The command `pip install package_name` is used to download and install packages from PyPI."
                }
            ]
        },
        {
            "id": "variables-data-types-operators",
            "title": "Variables, Data Types, and Operators",
            "questions": [
                {
                    "q": "What is the primary purpose of a variable in programming?",
                    "options": [
                        "To perform mathematical calculations",
                        "To store a value that can change during program execution",
                        "To define a function",
                        "To create a loop"
                    ],
                    "a": 1,
                    "ex": "Variables are named storage locations that hold data values which can be accessed and modified as the program runs."
                },
                {
                    "q": "Which of the following best describes a data type?",
                    "options": [
                        "A name given to a variable",
                        "The value stored in a variable",
                        "A classification of data which tells the compiler or interpreter how the programmer intends to use the data",
                        "An operation performed on data"
                    ],
                    "a": 2,
                    "ex": "A data type specifies the kind of data a variable can hold (e.g., integer, floating-point number, character, boolean) and the operations that can be performed on it."
                },
                {
                    "q": "Which data type is used to store whole numbers (numbers without a fractional part)?",
                    "options": [
                        "Float",
                        "Boolean",
                        "String",
                        "Integer"
                    ],
                    "a": 3,
                    "ex": "Integer data types are used to represent whole numbers, such as 5, -10, or 0."
                },
                {
                    "q": "Which data type is used to store numbers with a fractional part?",
                    "options": [
                        "Integer",
                        "Boolean",
                        "Float",
                        "Character"
                    ],
                    "a": 2,
                    "ex": "Floating-point data types (like float or double) are used to represent numbers that have a decimal point, such as 3.14 or -0.5."
                },
                {
                    "q": "Which data type is used to store true or false values?",
                    "options": [
                        "Integer",
                        "Boolean",
                        "String",
                        "Float"
                    ],
                    "a": 1,
                    "ex": "Boolean data types can only hold one of two values: true or false, often used in conditional statements and logical operations."
                },
                {
                    "q": "Which data type is used to store a sequence of characters (like words or sentences)?",
                    "options": [
                        "Integer",
                        "Boolean",
                        "String",
                        "Character"
                    ],
                    "a": 2,
                    "ex": "String data types are used to represent text, consisting of a sequence of characters enclosed in quotes."
                },
                {
                    "q": "What does an arithmetic operator like `+` or `-` perform?",
                    "options": [
                        "Comparison",
                        "Logical operation",
                        "Mathematical calculation",
                        "Assignment"
                    ],
                    "a": 2,
                    "ex": "Arithmetic operators are used for basic mathematical operations such as addition, subtraction, multiplication, and division."
                },
                {
                    "q": "What does a relational operator like `>` or `<` perform?",
                    "options": [
                        "Mathematical calculation",
                        "Comparison between two values",
                        "Logical operation",
                        "Assignment"
                    ],
                    "a": 1,
                    "ex": "Relational operators are used to compare two values and return a boolean result (true or false) based on the relationship between them."
                },
                {
                    "q": "What does a logical operator like `AND` or `OR` perform?",
                    "options": [
                        "Mathematical calculation",
                        "Comparison between two values",
                        "Combine or negate boolean expressions",
                        "Assignment"
                    ],
                    "a": 2,
                    "ex": "Logical operators are used to combine or modify boolean expressions. `AND` returns true if both operands are true, `OR` returns true if at least one operand is true, and `NOT` negates a boolean value."
                },
                {
                    "q": "What does the assignment operator `=` do?",
                    "options": [
                        "Compares two values for equality",
                        "Assigns the value on the right to the variable on the left",
                        "Performs a mathematical calculation",
                        "Combines two strings"
                    ],
                    "a": 1,
                    "ex": "The assignment operator is used to store a value in a variable."
                },
                {
                    "q": "Which operator is used to check if two values are equal?",
                    "options": [
                        "`=`",
                        "`!=`",
                        "`==`",
                        "`>=`"
                    ],
                    "a": 2,
                    "ex": "The equality operator (`==`) is used to compare if two values are equal."
                },
                {
                    "q": "Which operator is used to check if two values are NOT equal?",
                    "options": [
                        "`=`",
                        "`!=`",
                        "`==`",
                        "`<=`"
                    ],
                    "a": 1,
                    "ex": "The not equal to operator (`!=`) is used to check if two values are not equal."
                },
                {
                    "q": "What is operator precedence?",
                    "options": [
                        "The order in which variables are declared",
                        "The order in which operators are evaluated in an expression",
                        "The order in which functions are called",
                        "The order in which data types are defined"
                    ],
                    "a": 1,
                    "ex": "Operator precedence determines the order in which operations are performed in an expression when multiple operators are present (e.g., multiplication and division are usually performed before addition and subtraction)."
                },
                {
                    "q": "What is operator associativity?",
                    "options": [
                        "The direction (left-to-right or right-to-left) in which operators of the same precedence are evaluated",
                        "The order in which different types of operators are evaluated",
                        "The process of assigning values to variables",
                        "The combination of different data types"
                    ],
                    "a": 0,
                    "ex": "Operator associativity determines the grouping of operands when operators of the same precedence appear in an expression. For example, subtraction is left-associative (a - b - c is evaluated as (a - b) - c)."
                },
                {
                    "q": "What is a literal in programming?",
                    "options": [
                        "A variable name",
                        "A fixed value or constant that appears directly in the code",
                        "A function call",
                        "An operator"
                    ],
                    "a": 1,
                    "ex": "A literal is a way of representing a fixed value in the source code (e.g., `5` is an integer literal, `\"Hello\"` is a string literal, `True` is a boolean literal)."
                },
                {
                    "q": "Which of the following is a compound assignment operator?",
                    "options": [
                        "`+`",
                        "`==`",
                        "`+=`",
                        "`&&`"
                    ],
                    "a": 2,
                    "ex": "Compound assignment operators combine an arithmetic or bitwise operation with an assignment (e.g., `a += 5` is equivalent to `a = a + 5`)."
                },
                {
                    "q": "What is type casting (or type conversion)?",
                    "options": [
                        "Declaring a variable",
                        "Changing the value of a variable",
                        "Converting a value from one data type to another",
                        "Performing a mathematical calculation"
                    ],
                    "a": 2,
                    "ex": "Type casting is the process of explicitly converting a value of one data type into a value of another data type."
                },
                {
                    "q": "In languages where integer division truncates the result, what is the result of 10 / 3?",
                    "options": [
                        "3.333...",
                        "3",
                        "4",
                        "Error"
                    ],
                    "a": 1,
                    "ex": "In many programming languages (like C, C++, older Java), integer division discards the fractional part, resulting in a whole number."
                },
                {
                    "q": "What is the modulo operator (`%`) used for?",
                    "options": [
                        "Multiplication",
                        "Division",
                        "Finding the remainder of a division",
                        "Finding the quotient of a division"
                    ],
                    "a": 2,
                    "ex": "The modulo operator returns the remainder when one number is divided by another."
                },
                {
                    "q": "Which of the following is a logical NOT operator?",
                    "options": [
                        "`&&`",
                        "`||`",
                        "`!`",
                        "`!=`"
                    ],
                    "a": 2,
                    "ex": "The logical NOT operator (`!` in many languages, `not` in Python) negates a boolean expression (true becomes false, false becomes true)."
                },
                {
                    "q": "What is a constant?",
                    "options": [
                        "A variable whose value can change during program execution",
                        "A fixed value that cannot be changed during program execution",
                        "A function that returns a fixed value",
                        "A type of operator"
                    ],
                    "a": 1,
                    "ex": "A constant is a value that is fixed and does not change throughout the execution of a program. They are often declared using specific keywords (like `const` or `final`)."
                },
                {
                    "q": "Which programming paradigm focuses on using variables and functions to manipulate data?",
                    "options": [
                        "Object-Oriented Programming",
                        "Functional Programming",
                        "Procedural Programming",
                        "Logic Programming"
                    ],
                    "a": 2,
                    "ex": "Procedural programming is a paradigm based on the concept of the procedure call, where programs are organized into procedures or functions that operate on data stored in variables."
                },
                {
                    "q": "What is the purpose of declaring a variable?",
                    "options": [
                        "To assign a value to it",
                        "To reserve memory space for it and specify its data type (in some languages)",
                        "To perform a calculation",
                        "To print its value"
                    ],
                    "a": 1,
                    "ex": "Declaring a variable typically involves informing the compiler or interpreter about the variable's name and often its data type so that memory can be allocated for it."
                },
                {
                    "q": "In a statically typed language, when are data types checked?",
                    "options": [
                        "During program execution",
                        "After the program finishes execution",
                        "During compilation",
                        "Only when an error occurs"
                    ],
                    "a": 2,
                    "ex": "In statically typed languages (like C++, Java), data types are checked at compile time. This helps catch type-related errors early in the development process."
                },
                {
                    "q": "In a dynamically typed language, when are data types checked?",
                    "options": [
                        "During compilation",
                        "After the program finishes execution",
                        "During program execution (runtime)",
                        "Only when a variable is declared"
                    ],
                    "a": 2,
                    "ex": "In dynamically typed languages (like Python, JavaScript), data types are checked at runtime. This allows for more flexibility but can lead to type-related errors during execution."
                },
                {
                    "q": "What is implicit type conversion (coercion)?",
                    "options": [
                        "Explicitly converting a value from one data type to another using a cast",
                        "Automatically converting a value from one data type to another by the compiler or interpreter during an operation",
                        "Changing the value of a variable",
                        "Declaring a variable with a specific data type"
                    ],
                    "a": 1,
                    "ex": "Implicit type conversion occurs automatically when an operation involves values of different data types, and the compiler or interpreter converts one type to another based on predefined rules."
                }
            ]
        },
        {
            "id": "conditional-statements-loops",
            "title": "Conditional Statements and Loops",
            "questions": [
                {
                    "q": "Which type of statement is used to execute a block of code only if a specified condition is true?",
                    "options": [
                        "Loop statement",
                        "Assignment statement",
                        "Conditional statement",
                        "Function call"
                    ],
                    "a": 2,
                    "ex": "Conditional statements (like `if`) allow a program to make decisions and execute code based on whether a logical condition evaluates to true."
                },
                {
                    "q": "Which keyword is used to introduce an 'else if' condition in many programming languages?",
                    "options": [
                        "`elsewhen`",
                        "`elseif`",
                        "`elif`",
                        "`otherwise if`"
                    ],
                    "a": 2,
                    "ex": "While the exact keyword varies by language, `elif` (or `else if`) is commonly used to specify an alternative condition to check if the initial `if` condition is false."
                },
                {
                    "q": "Which block of code is executed if the condition in an `if` statement is false and there is no `elif` or `else`?",
                    "options": [
                        "The block of code following the `if` block",
                        "The program terminates",
                        "No code inside the `if` block is executed",
                        "The code inside the `if` block is executed anyway"
                    ],
                    "a": 2,
                    "ex": "If the condition in an `if` statement is false and there is no `else` or `elif` block, the code inside the `if` block is simply skipped."
                },
                {
                    "q": "What is the purpose of the `else` block in a conditional statement?",
                    "options": [
                        "To specify a condition to be checked",
                        "To execute code when the `if` condition is true",
                        "To execute code when the `if` condition (and any `elif` conditions) are false",
                        "To repeat a block of code"
                    ],
                    "a": 2,
                    "ex": "The `else` block provides a default action to be taken when the condition(s) in the preceding `if` and `elif` statements are all false."
                },
                {
                    "q": "Which type of loop is used to repeat a block of code a fixed number of times, often by iterating over a sequence?",
                    "options": [
                        "While loop",
                        "Do-while loop",
                        "For loop",
                        "Infinite loop"
                    ],
                    "a": 2,
                    "ex": "For loops are commonly used for iterating over a known sequence of elements or for executing a block of code a predetermined number of times."
                },
                {
                    "q": "Which type of loop continues to execute a block of code as long as a specified condition is true?",
                    "options": [
                        "For loop",
                        "Do-while loop",
                        "While loop",
                        "Infinite loop"
                    ],
                    "a": 2,
                    "ex": "A while loop repeatedly executes its body as long as the boolean condition in the `while` clause remains true."
                },
                {
                    "q": "Which type of loop executes the loop body at least once before checking the condition?",
                    "options": [
                        "For loop",
                        "While loop",
                        "Do-while loop",
                        "Infinite loop"
                    ],
                    "a": 2,
                    "ex": "The do-while loop is an exit-controlled loop. The condition is checked after the loop body is executed, guaranteeing at least one iteration."
                },
                {
                    "q": "What is an infinite loop?",
                    "options": [
                        "A loop that executes a fixed number of times",
                        "A loop that terminates after a short time",
                        "A loop whose condition for termination is never met, causing it to run indefinitely",
                        "A loop that is nested within another loop"
                    ],
                    "a": 2,
                    "ex": "An infinite loop occurs when the loop's control condition never becomes false, causing the loop to execute continuously."
                },
                {
                    "q": "What is the purpose of the `break` statement inside a loop?",
                    "options": [
                        "To skip the current iteration and continue to the next",
                        "To exit the loop immediately",
                        "To restart the loop from the beginning",
                        "To print a message"
                    ],
                    "a": 1,
                    "ex": "The `break` statement is used to terminate the execution of the innermost loop (or switch statement) and transfer control to the statement immediately following the loop."
                },
                {
                    "q": "What is the purpose of the `continue` statement inside a loop?",
                    "options": [
                        "To exit the loop immediately",
                        "To skip the rest of the current iteration and proceed to the next iteration of the loop",
                        "To restart the loop from the beginning",
                        "To print a message"
                    ],
                    "a": 1,
                    "ex": "The `continue` statement skips the remaining code within the current iteration of a loop and moves to the next iteration."
                },
                {
                    "q": "What is a nested loop?",
                    "options": [
                        "A loop that executes a fixed number of times",
                        "A loop that never terminates",
                        "A loop placed inside the body of another loop",
                        "A loop that only has one iteration"
                    ],
                    "a": 2,
                    "ex": "A nested loop is a loop that is contained within another loop. The inner loop executes completely for each iteration of the outer loop."
                },
                {
                    "q": "In a `for` loop with a counter, which part is typically responsible for updating the counter?",
                    "options": [
                        "Initialization",
                        "Condition",
                        "Increment/Decrement",
                        "Loop body"
                    ],
                    "a": 2,
                    "ex": "The increment or decrement part of a `for` loop (often in the third expression of the loop header) is used to update the loop counter in each iteration."
                },
                {
                    "q": "What is the main difference between a `while` loop and a `do-while` loop?",
                    "options": [
                        "A `while` loop checks the condition before the first iteration, while a `do-while` loop checks it after the first iteration",
                        "A `while` loop executes at least once, while a `do-while` loop may not execute at all",
                        "A `while` loop is used for fixed iterations, while a `do-while` loop is used for indefinite iterations",
                        "There is no difference"
                    ],
                    "a": 0,
                    "ex": "The crucial difference is when the condition is evaluated. A `while` loop is entry-controlled, checking the condition at the beginning. A `do-while` loop is exit-controlled, checking the condition at the end, guaranteeing at least one execution of the loop body."
                },
                {
                    "q": "What is a switch statement used for?",
                    "options": [
                        "To repeat a block of code",
                        "To perform a series of conditional checks based on the value of a single variable or expression",
                        "To define a function",
                        "To declare variables"
                    ],
                    "a": 1,
                    "ex": "A switch statement (or equivalent in some languages) provides a more concise way to handle multiple conditional branches based on matching the value of an expression against several possible constant values."
                },
                {
                    "q": "In a switch statement, what is the purpose of the `case` keyword?",
                    "options": [
                        "To define the default action",
                        "To specify a value to match against the switch expression",
                        "To terminate the switch statement",
                        "To indicate a loop"
                    ],
                    "a": 1,
                    "ex": "The `case` keyword is followed by a constant value. If the value of the switch expression matches a `case` value, the code block associated with that `case` is executed."
                },
                {
                    "q": "In a switch statement, what is the purpose of the `default` keyword?",
                    "options": [
                        "To specify a value to match",
                        "To execute code when none of the `case` values match the switch expression",
                        "To terminate the switch statement",
                        "To indicate a loop"
                    ],
                    "a": 1,
                    "ex": "The optional `default` block in a switch statement is executed if the value of the switch expression does not match any of the `case` values."
                },
                {
                    "q": "In a switch statement, what is the purpose of the `break` keyword?",
                    "options": [
                        "To continue to the next case",
                        "To exit the switch statement after a match is found and executed",
                        "To restart the switch statement",
                        "To execute the default case"
                    ],
                    "a": 1,
                    "ex": "The `break` statement within a `case` block is important to exit the switch statement after a match is found and executed, preventing 'fall-through' to subsequent cases."
                },
                {
                    "q": "If you omit the `break` statement in a `case` block of a switch statement (in languages where this is allowed), what happens?",
                    "options": [
                        "The program will produce an error",
                        "The switch statement will terminate",
                        "The code in the next `case` block will also be executed (fall-through)",
                        "The default case will be executed"
                    ],
                    "a": 2,
                    "ex": "In languages like C and C++, if a `break` statement is omitted from a `case`, execution will 'fall through' to the next `case` block (and subsequent ones) until a `break` or the end of the switch is encountered."
                },
                {
                    "q": "Which control flow statement is used to make decisions in a program?",
                    "options": [
                        "Loop",
                        "Iteration",
                        "Conditional",
                        "Assignment"
                    ],
                    "a": 2,
                    "ex": "Conditional statements enable programs to execute different code paths based on specific conditions."
                },
                {
                    "q": "Which control flow statement is used to repeat a set of instructions?",
                    "options": [
                        "Conditional",
                        "Decision",
                        "Iteration",
                        "Branching"
                    ],
                    "a": 2,
                    "ex": "Iteration, typically implemented using loops (for, while, do-while), allows for the repeated execution of a block of code."
                },
                {
                    "q": "What is the term for executing a set of instructions repeatedly?",
                    "options": [
                        "Decision Making",
                        "Branching",
                        "Iteration",
                        "Selection"
                    ],
                    "a": 2,
                    "ex": "Iteration is the process of repeating a block of code multiple times, which is the core concept behind loops."
                },
                {
                    "q": "What is the term for choosing between different paths of execution based on a condition?",
                    "options": [
                        "Iteration",
                        "Looping",
                        "Selection",
                        "Repetition"
                    ],
                    "a": 2,
                    "ex": "Selection (or decision making) involves choosing which block of code to execute based on whether a condition is true or false, implemented using conditional statements."
                },
                {
                    "q": "Which type of loop is most suitable when you know exactly how many times you need to repeat a block of code?",
                    "options": [
                        "While loop",
                        "Do-while loop",
                        "For loop",
                        "Infinite loop"
                    ],
                    "a": 2,
                    "ex": "For loops are generally preferred when the number of iterations is known in advance, such as iterating over the elements of a list or executing a block a fixed number of times using a counter."
                },
                {
                    "q": "Which type of loop is most suitable when you need to repeat a block of code as long as a condition remains true, and the number of iterations is not known beforehand?",
                    "options": [
                        "For loop",
                        "Do-while loop",
                        "While loop",
                        "Infinite loop"
                    ],
                    "a": 2,
                    "ex": "While loops are ideal when the number of iterations depends on a condition that changes during the loop's execution and is not fixed beforehand."
                },
                {
                    "q": "In a `for` loop with initialization, condition, and increment (like in C++/Java), which part is evaluated first?",
                    "options": [
                        "Condition",
                        "Initialization",
                        "Increment",
                        "Loop body"
                    ],
                    "a": 1,
                    "ex": "The initialization expression in a `for` loop is executed only once at the beginning of the loop."
                },
                {
                    "q": "In a `for` loop with initialization, condition, and increment, when is the condition checked?",
                    "options": [
                        "Before the first iteration only",
                        "After each iteration",
                        "Before each iteration",
                        "Only if the loop is nested"
                    ],
                    "a": 2,
                    "ex": "The condition in a `for` loop is checked before each iteration of the loop. If the condition is true, the loop body is executed; otherwise, the loop terminates."
                }
            ]
        }
    ]
}
